(window.webpackJsonp=window.webpackJsonp||[]).push([[1],{"+3sj":function(A,t){},"+K1Q":function(A,t,e){"use strict";e.d(t,"a",(function(){return a}));var n=e("0RYA"),s=e("5Bs9"),i=e("UBqq");function o(A,t){const e=t[0]*t[0]+t[1]*t[1];return[(A[0]*t[0]+A[1]*t[1])/e,(A[1]*t[0]-A[0]*t[1])/e]}function r(A,t){let e=[0,0];for(let i=A.length-1;i>=0;i-=1)e=[(n=e)[0]*(s=t)[0]-n[1]*s[1],n[0]*s[1]+n[1]*s[0]],e[0]+=A[i];var n,s;return e}const a=(A,t,e,a)=>(c,M,{channelCount:l,channelCountMode:u,channelInterpretation:h,feedback:g,feedforward:m})=>{const p=Object(n.a)(M,c.sampleRate),w=g.length,Y=m.length,d=Math.min(w,Y);if(0===g.length||g.length>20)throw a();if(0===g[0])throw t();if(0===m.length||m.length>20)throw a();if(0===m[0])throw t();if(1!==g[0]){for(let A=0;A<Y;A+=1)m[A]/=g[0];for(let A=1;A<w;A+=1)g[A]/=g[0]}const B=e(c,p,l,l);B.channelCount=l,B.channelCountMode=u,B.channelInterpretation=h;const D=[],G=[],C=[];for(let A=0;A<l;A+=1){D.push(0);const A=new Float32Array(32),t=new Float32Array(32);A.fill(0),t.fill(0),G.push(A),C.push(t)}B.onaudioprocess=A=>{const t=A.inputBuffer,e=A.outputBuffer,n=t.numberOfChannels;for(let i=0;i<n;i+=1){const A=t.getChannelData(i),n=e.getChannelData(i);D[i]=Object(s.a)(g,w,m,Y,d,G[i],C[i],D[i],32,A,n)}};const E=c.sampleRate/2,I={get bufferSize(){return p},get channelCount(){return B.channelCount},set channelCount(A){B.channelCount=A},get channelCountMode(){return B.channelCountMode},set channelCountMode(A){B.channelCountMode=A},get channelInterpretation(){return B.channelInterpretation},set channelInterpretation(A){B.channelInterpretation=A},get context(){return B.context},get inputs(){return[B]},get numberOfInputs(){return B.numberOfInputs},get numberOfOutputs(){return B.numberOfOutputs},addEventListener:(...A)=>B.addEventListener(A[0],A[1],A[2]),dispatchEvent:(...A)=>B.dispatchEvent(A[0]),getFrequencyResponse(t,e,n){if(t.length!==e.length||e.length!==n.length)throw A();const s=t.length;for(let A=0;A<s;A+=1){const s=-Math.PI*(t[A]/E),i=[Math.cos(s),Math.sin(s)],a=o(r(m,i),r(g,i));e[A]=Math.sqrt(a[0]*a[0]+a[1]*a[1]),n[A]=Math.atan2(a[1],a[0])}},removeEventListener:(...A)=>B.removeEventListener(A[0],A[1],A[2])};return Object(i.a)(I,B)}},"+O6C":function(A,t){},"+QdE":function(A,t){},"+nqp":function(A,t){},"+om6":function(A,t){},"+wPE":function(A,t){},"/B1R":function(A,t){},"/FEe":function(A,t,e){"use strict";e.d(t,"a",(function(){return n}));const n=(A,t)=>(e,n)=>{const s=t.get(e);if(void 0!==s)return s;const i=A.get(e);if(void 0!==i)return i;try{const s=n();return s instanceof Promise?(A.set(e,s),s.catch(()=>!1).then(n=>(A.delete(e),t.set(e,n),n))):(t.set(e,s),s)}catch{return t.set(e,!1),!1}}},"/HeQ":function(A,t,e){"use strict";e.d(t,"a",(function(){return n}));const n=(A,t)=>(e,n,s)=>{const i=new Set;var o,r;return e.connect=(o=e.connect,(s,r=0,a=0)=>{const c=0===i.size;if(t(s))return o.call(e,s,r,a),A(i,[s,r,a],A=>A[0]===s&&A[1]===r&&A[2]===a,!0),c&&n(),s;o.call(e,s,r),A(i,[s,r],A=>A[0]===s&&A[1]===r,!0),c&&n()}),e.disconnect=(r=e.disconnect,(A,n,o)=>{const a=i.size>0;if(void 0===A)r.apply(e),i.clear();else if("number"==typeof A){r.call(e,A);for(const t of i)t[1]===A&&i.delete(t)}else{t(A)?r.call(e,A,n,o):r.call(e,A,n);for(const t of i)t[0]!==A||void 0!==n&&t[1]!==n||void 0!==o&&t[2]!==o||i.delete(t)}a&&0===i.size&&s()}),e}},"/T/s":function(A,t){},"/T4j":function(A,t){},"/TJp":function(A,t){A.exports=function(A,t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(A)){var e=[],n=!0,s=!1,i=void 0;try{for(var o,r=A[Symbol.iterator]();!(n=(o=r.next()).done)&&(e.push(o.value),!t||e.length!==t);n=!0);}catch(a){s=!0,i=a}finally{try{n||null==r.return||r.return()}finally{if(s)throw i}}return e}}},"/XZ7":function(A,t){},"/beQ":function(A,t,e){"use strict";e("CYL4"),e("a1Yo"),e("Ktyc"),e("r3d1"),e("2mC2"),e("+om6"),e("1B8g"),e("Oy2c"),e("u9RD"),e("Znhr"),e("+QdE"),e("/XZ7"),e("V/Dp"),e("w7yV"),e("52z1"),e("8IY7"),e("QtzU"),e("d+VD"),e("RwaT"),e("Mbz0"),e("zrpS"),e("I/Ax"),e("rfcS"),e("ZUMP"),e("A40I"),e("KCvN"),e("LTjf"),e("K+UH"),e("urvi"),e("zC0a"),e("FnWq"),e("aUTZ"),e("lh0P"),e("IrIY"),e("R91R"),e("eE6B"),e("XWcB"),e("zJKP"),e("bAe2"),e("Memb"),e("MT5e"),e("r4Hb"),e("LnEw"),e("0gcH"),e("WgWj"),e("l1Qu"),e("4pAq"),e("8a7Q"),e("Ja0U"),e("gBqf"),e("MZD8"),e("EDcz"),e("qFOa"),e("qTOt"),e("FbdC"),e("2ya8"),e("toED"),e("e+us"),e("yKfm"),e("tapQ"),e("RB0Y"),e("9dIB"),e("l1x3"),e("htc0"),e("2OC2"),e("nGR8"),e("+wPE"),e("QAC8"),e("8j7Z"),e("wkgU"),e("9xfp"),e("cmBE"),e("Ccui"),e("C8I1"),e("Aw7S"),e("qaZc"),e("MHRE"),e("mlNg"),e("X6Sd"),e("xghV"),e("PUze"),e("7Po7"),e("tYDY")},"/f8s":function(A,t){},"/oG6":function(A,t){},"/xx+":function(A,t){},0:function(A,t,e){A.exports=e("zUnb")},"01c5":function(A,t){},"09sU":function(A,t){},"0A78":function(A,t,e){"use strict";function n(A,t,e,n,s){if("function"==typeof A.copyFromChannel)0===t[e].byteLength&&(t[e]=new Float32Array(128)),A.copyFromChannel(t[e],n,s);else{const i=A.getChannelData(n);if(0===t[e].byteLength)t[e]=i.slice(s,s+128);else{const A=new Float32Array(i.buffer,s*Float32Array.BYTES_PER_ELEMENT,128);t[e].set(A)}}}e.d(t,"a",(function(){return n}))},"0Bgy":function(A,t){},"0HOK":function(A,t,e){"use strict";e.d(t,"a",(function(){return s}));var n=e("YvTh");const s=(A,t,e,s,i)=>(o,r)=>{const a=r.listener,{forwardX:c,forwardY:M,forwardZ:l,positionX:u,positionY:h,positionZ:g,upX:m,upY:p,upZ:w}=void 0===a.forwardX?(()=>{const c=t(r,{channelCount:1,channelCountMode:"explicit",channelInterpretation:"speakers",numberOfInputs:9}),M=i(r),l=s(r,256,9,0),u=(t,s)=>{const i=e(r,{channelCount:1,channelCountMode:"explicit",channelInterpretation:"discrete",offset:s});return i.connect(c,0,t),i.start(),Object.defineProperty(i.offset,"defaultValue",{get:()=>s}),A({context:o},M,i.offset,n.b,n.a)};let h=[0,0,-1,0,1,0],g=[0,0,0];return l.onaudioprocess=({inputBuffer:A})=>{const t=[A.getChannelData(0)[0],A.getChannelData(1)[0],A.getChannelData(2)[0],A.getChannelData(3)[0],A.getChannelData(4)[0],A.getChannelData(5)[0]];t.some((A,t)=>A!==h[t])&&(a.setOrientation(...t),h=t);const e=[A.getChannelData(6)[0],A.getChannelData(7)[0],A.getChannelData(8)[0]];e.some((A,t)=>A!==g[t])&&(a.setPosition(...e),g=e)},c.connect(l),{forwardX:u(0,0),forwardY:u(1,0),forwardZ:u(2,-1),positionX:u(6,0),positionY:u(7,0),positionZ:u(8,0),upX:u(3,0),upY:u(4,1),upZ:u(5,0)}})():a;return{get forwardX(){return c},get forwardY(){return M},get forwardZ(){return l},get positionX(){return u},get positionY(){return h},get positionZ(){return g},get upX(){return m},get upY(){return p},get upZ(){return w}}}},"0PpP":function(A,t){},"0RYA":function(A,t,e){"use strict";e.d(t,"a",(function(){return n}));const n=(A,t)=>null===A?512:Math.max(512,Math.min(16384,Math.pow(2,Math.round(Math.log2(A*t)))))},"0Rd8":function(A,t){},"0ekj":function(A,t,e){"use strict";e.d(t,"a",(function(){return n}));const n=A=>()=>{if(null===A)return Promise.resolve(!1);const t=new A(1,1,44100),e=t.createBuffer(1,1,t.sampleRate),n=t.createBufferSource();return e.getChannelData(0)[0]=1,n.buffer=e,n.start(0,0,0),n.connect(t.destination),new Promise(A=>{t.oncomplete=({renderedBuffer:t})=>{A(0===t.getChannelData(0)[0])},t.startRendering()})}},"0gcH":function(A,t){},"0ieb":function(A,t){},"0xpz":function(A,t){},"15Ah":function(A,t){},"1B8g":function(A,t){},"1OHY":function(A,t,e){"use strict";e.d(t,"a",(function(){return n}));const n=A=>{if(null===A)return!1;const t=A.length;return t%2!=0?0!==A[Math.floor(t/2)]:A[t/2-1]+A[t/2]!==0}},"1PgL":function(A,t){A.exports=function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}},"1qvQ":function(A,t){},"2+VW":function(A,t){},"2FVp":function(A,t){},"2OC2":function(A,t){},"2a3G":function(A,t){},"2dwH":function(A,t){},"2lKH":function(A,t,e){"use strict";e.d(t,"a",(function(){return n}));const n=A=>t=>{const e=A(t);if(null===e.renderer)throw new Error("Missing the renderer of the given AudioNode in the audio graph.");return e.renderer}},"2m2a":function(A,t,e){"use strict";e.d(t,"a",(function(){return n}));const n=A=>(t,e)=>{A(t).add(e)}},"2mC2":function(A,t){},"2mgF":function(A,t){},"2qNk":function(A,t,e){"use strict";e.d(t,"a",(function(){return n}));const n=A=>()=>{if(null===A)return Promise.resolve(!1);const t=new A(1,1,44100);if(void 0===t.createStereoPanner)return Promise.resolve(!0);if(void 0===t.createConstantSource)return Promise.resolve(!0);const e=t.createConstantSource(),n=t.createStereoPanner();return e.channelCount=1,e.offset.value=1,n.channelCount=1,e.start(),e.connect(n).connect(t.destination),t.startRendering().then(A=>1!==A.getChannelData(0)[0])}},"2vVy":function(A,t){},"2ya8":function(A,t){},"36s8":function(A,t){},"3AdT":function(A,t){},"3OhI":function(A,t,e){"use strict";e.d(t,"a",(function(){return n}));const n=A=>t=>{const e=A.get(t);if(void 0===e)throw new Error("The context has no set of AudioWorkletNodes.");return e}},"3QpB":function(A,t,e){"use strict";e.d(t,"a",(function(){return s}));var n=e("UBqq");const s=A=>(t,e)=>{const s=A(e,A=>A.createGain());t.connect(s);const i=(o=t.disconnect,()=>{o.call(t,s),t.removeEventListener("ended",i)});var o;t.addEventListener("ended",i),Object(n.a)(t,s),t.stop=(A=>{let e=!1;return(n=0)=>{if(e)try{A.call(t,n)}catch{s.gain.setValueAtTime(0,n)}else A.call(t,n),e=!0}})(t.stop)}},"3SJO":function(A,t){},"3T0p":function(A,t){},"3bGe":function(A,t){},"3fCs":function(A,t){},"3kLt":function(A,t){},"3mKu":function(A,t,e){"use strict";e.d(t,"a",(function(){return s}));var n=e("dPZM");const s=(A,t,e,s,i,o)=>class extends e{constructor(e,o){super(e),this._nativeContext=e,n.g.set(this,e);const r=e.sampleRate;Object.defineProperty(e,"sampleRate",{get:()=>r}),s(e)&&i.set(e,new Set),this._destination=new A(this,o),this._listener=t(this,e),this._onstatechange=null}get currentTime(){return this._nativeContext.currentTime}get destination(){return this._destination}get listener(){return this._listener}get onstatechange(){return this._onstatechange}set onstatechange(A){const t="function"==typeof A?o(this,A):null;this._nativeContext.onstatechange=t;const e=this._nativeContext.onstatechange;this._onstatechange=null!==e&&e===t?A:e}get sampleRate(){return this._nativeContext.sampleRate}get state(){return this._nativeContext.state}}},"3pMG":function(A,t){},"3tyg":function(A,t,e){"use strict";e.d(t,"a",(function(){return n}));const n=(A,t)=>(e,n,s)=>{const i=e.destination;if(i.channelCount!==n)try{i.channelCount=n}catch{}s&&"explicit"!==i.channelCountMode&&(i.channelCountMode="explicit"),0===i.maxChannelCount&&Object.defineProperty(i,"maxChannelCount",{value:n});const o=A(e,{channelCount:n,channelCountMode:i.channelCountMode,channelInterpretation:i.channelInterpretation,gain:1});return t(o,"channelCount",A=>()=>A.call(o),A=>t=>{A.call(o,t);try{i.channelCount=t}catch(e){if(t>i.maxChannelCount)throw e}}),t(o,"channelCountMode",A=>()=>A.call(o),A=>t=>{A.call(o,t),i.channelCountMode=t}),t(o,"channelInterpretation",A=>()=>A.call(o),A=>t=>{A.call(o,t),i.channelInterpretation=t}),Object.defineProperty(o,"maxChannelCount",{get:()=>i.maxChannelCount}),o.connect(i),o}},"3yhf":function(A,t,e){"use strict";e.d(t,"a",(function(){return n}));const n=(A,t)=>e=>{const n=A.get(e);return t(n)||t(e)}},"4Iew":function(A,t,e){"use strict";e.d(t,"a",(function(){return s}));var n=e("SWU+");const s=(A,t,e)=>()=>{const s=new WeakMap;return{render(i,o,r){const a=s.get(o);return void 0!==a?Promise.resolve(a):(async(i,o,r)=>{let a=t(i);return Object(n.a)(a,o)||(a=A(o,{channelCount:a.channelCount,channelCountMode:a.channelCountMode,channelInterpretation:a.channelInterpretation,numberOfInputs:a.numberOfInputs})),s.set(o,a),await e(i,o,a,r),a})(i,o,r)}}}},"4JRa":function(A,t,e){"use strict";e.d(t,"a",(function(){return n}));const n=()=>{try{return new DOMException("","InvalidStateError")}catch(A){return A.code=11,A.name="InvalidStateError",A}}},"4MzO":function(A,t,e){"use strict";e.d(t,"a",(function(){return s}));var n=e("UBqq");const s=(A,t,e,s)=>(i,{offset:o,...r})=>{const a=i.createBuffer(1,2,i.sampleRate),c=t(i,{buffer:null,channelCount:2,channelCountMode:"max",channelInterpretation:"speakers",loop:!1,loopEnd:0,loopStart:0,playbackRate:1}),M=e(i,{...r,gain:o}),l=a.getChannelData(0);l[0]=1,l[1]=1,c.buffer=a,c.loop=!0;const u={get bufferSize(){},get channelCount(){return M.channelCount},set channelCount(A){M.channelCount=A},get channelCountMode(){return M.channelCountMode},set channelCountMode(A){M.channelCountMode=A},get channelInterpretation(){return M.channelInterpretation},set channelInterpretation(A){M.channelInterpretation=A},get context(){return M.context},get inputs(){return[]},get numberOfInputs(){return c.numberOfInputs},get numberOfOutputs(){return M.numberOfOutputs},get offset(){return M.gain},get onended(){return c.onended},set onended(A){c.onended=A},addEventListener:(...A)=>c.addEventListener(A[0],A[1],A[2]),dispatchEvent:(...A)=>c.dispatchEvent(A[0]),removeEventListener:(...A)=>c.removeEventListener(A[0],A[1],A[2]),start(A=0){c.start.call(c,A)},stop(A=0){c.stop.call(c,A)}};return A(i,c),s(Object(n.a)(u,M),()=>c.connect(M),()=>c.disconnect(M))}},"4W56":function(A,t,e){"use strict";e.d(t,"a",(function(){return n}));const n=A=>null===A?null:A.hasOwnProperty("AudioWorkletNode")?A.AudioWorkletNode:null},"4pAq":function(A,t){},"4yWH":function(A,t,e){"use strict";e.d(t,"a",(function(){return s}));var n=e("6MIv");const s=(A,t,e,s,i,o)=>r=>(a,c)=>{const M=A.get(a);if(void 0===M){if(!r&&o(a)){const A=s(a),{outputs:o}=e(a);for(const e of o)if(Object(n.a)(e)){const n=s(e[0]);t(A,n,e[1],e[2])}else{const t=i(e[0]);A.disconnect(t,e[1])}}A.set(a,c)}else A.set(a,M+c)}},"51wD":function(A,t){},"52z1":function(A,t){},"5Bs9":function(A,t,e){"use strict";e.d(t,"a",(function(){return n}));const n=(A,t,e,n,s,i,o,r,a,c,M)=>{const l=c.length;let u=r;for(let h=0;h<l;h+=1){let r=e[0]*c[h];for(let t=1;t<s;t+=1){const n=u-t&a-1;r+=e[t]*i[n],r-=A[t]*o[n]}for(let A=s;A<n;A+=1)r+=e[A]*i[u-A&a-1];for(let e=s;e<t;e+=1)r-=A[e]*o[u-e&a-1];i[u]=c[h],o[u]=r,u=u+1&a-1,M[h]=r}return u}},"5J5n":function(A,t,e){"use strict";e.d(t,"a",(function(){return n}));const n=(A,t)=>e=>{const n={value:A};return Object.defineProperties(e,{currentTarget:n,target:n}),"function"==typeof t?t.call(A,e):t.handleEvent.call(A,e)}},"5MiQ":function(A,t){},"5O4r":function(A,t){},"5ThQ":function(A,t,e){"use strict";e.d(t,"a",(function(){return n}));const n=A=>{const t=new Uint32Array([1179011410,40,1163280727,544501094,16,131073,44100,176400,1048580,1635017060,4,0]);try{const e=A.decodeAudioData(t.buffer,()=>{});return void 0!==e&&(e.catch(()=>{}),!0)}catch{}return!1}},"5VPu":function(A,t,e){"use strict";e.d(t,"a",(function(){return n}));const n=(A,t)=>()=>{if(null===t)return!1;const e=new t(1,1,44100);return void 0===e.createConstantSource||A(e,A=>A.createConstantSource()).offset.maxValue!==Number.POSITIVE_INFINITY}},"5YLH":function(A,t){},"5eOa":function(A,t){},"5gzO":function(A,t,e){"use strict";e.d(t,"a",(function(){return n}));const n=A=>t=>{const e=A(t,A=>A.createOscillator());try{e.stop(-1)}catch(n){return n instanceof RangeError}return!1}},"5oY7":function(A,t){},"5wwn":function(A,t){},"62VS":function(A,t){},"6ENl":function(A,t){},"6MIv":function(A,t,e){"use strict";e.d(t,"a",(function(){return s}));var n=e("tF58");const s=A=>Object(n.a)(A[0])},"6dyI":function(A,t,e){"use strict";e.d(t,"a",(function(){return n}));const n=A=>async t=>{try{const A=await fetch(t);if(A.ok)return A.text()}catch{}throw A()}},"6wCO":function(A,t,e){"use strict";e.d(t,"a",(function(){return s}));var n=e("SWU+");const s=(A,t,e)=>()=>{const s=new WeakMap;return{render(i,o,r){const a=s.get(o);return void 0!==a?Promise.resolve(a):(async(i,o,r)=>{let a=t(i);return Object(n.a)(a,o)||(a=A(o,{channelCount:a.channelCount,channelCountMode:a.channelCountMode,channelInterpretation:a.channelInterpretation,numberOfOutputs:a.numberOfOutputs})),s.set(o,a),await e(i,o,a,r),a})(i,o,r)}}}},"6wby":function(A,t){},"7//d":function(A,t){},"77rU":function(A,t){},"78mH":function(A,t){},"79tk":function(A,t){},"7P0p":function(A,t,e){"use strict";e.d(t,"a",(function(){return o}));var n=e("Y/Aa"),s=e("jvfW"),i=e("zna5");const o=(A,t)=>(e,o)=>{const r=A(e,A=>A.createPanner());return void 0===r.orientationX?t(e,o):(Object(i.a)(r,o),Object(n.a)(r,o,"orientationX"),Object(n.a)(r,o,"orientationY"),Object(n.a)(r,o,"orientationZ"),Object(n.a)(r,o,"positionX"),Object(n.a)(r,o,"positionY"),Object(n.a)(r,o,"positionZ"),Object(s.a)(r,o,"coneInnerAngle"),Object(s.a)(r,o,"coneOuterAngle"),Object(s.a)(r,o,"coneOuterGain"),Object(s.a)(r,o,"distanceModel"),Object(s.a)(r,o,"maxDistance"),Object(s.a)(r,o,"panningModel"),Object(s.a)(r,o,"refDistance"),Object(s.a)(r,o,"rolloffFactor"),r)}},"7Po7":function(A,t){},"7QKQ":function(A,t,e){"use strict";e.d(t,"a",(function(){return s}));const n={channelCount:1,channelCountMode:"explicit",channelInterpretation:"speakers",numberOfInputs:6},s=(A,t,e,s,i)=>class extends A{constructor(A,o=n){const r=s(A),a={...n,...o};super(A,!1,e(r,a),i(r)?t():null)}}},"7R1p":function(A,t){},"7T5s":function(A,t,e){"use strict";e.d(t,"a",(function(){return n}));const n=A=>(t,e)=>A(t,A=>A.createMediaElementSource(e.mediaElement))},"7aPT":function(A,t){},"7c0I":function(A,t){},"7dO6":function(A,t,e){"use strict";e.d(t,"a",(function(){return s}));var n=e("gAIX");const s=(A,t,e,s,i)=>class extends s{constructor(A={}){if(null===i)throw new Error("Missing the native AudioContext constructor.");const s=new i(A);if(null===s)throw e();if(!Object(n.a)(A.latencyHint))throw new TypeError(`The provided value '${A.latencyHint}' is not a valid enum value of type AudioContextLatencyCategory.`);if(void 0!==A.sampleRate&&s.sampleRate!==A.sampleRate)throw t();super(s,2);const{latencyHint:o}=A,{sampleRate:r}=s;if(this._baseLatency="number"==typeof s.baseLatency?s.baseLatency:"balanced"===o?512/r:"interactive"===o||void 0===o?256/r:"playback"===o?1024/r:128*Math.max(2,Math.min(128,Math.round(o*r/128)))/r,this._nativeAudioContext=s,this._state=null,"running"===s.state){this._state="suspended";const A=()=>{"suspended"===this._state&&(this._state=null),s.removeEventListener("statechange",A)};s.addEventListener("statechange",A)}}get baseLatency(){return this._baseLatency}get state(){return null!==this._state?this._state:this._nativeAudioContext.state}close(){return"closed"===this.state?this._nativeAudioContext.close().then(()=>{throw A()}):("suspended"===this._state&&(this._state=null),this._nativeAudioContext.close())}resume(){return"suspended"===this._state?new Promise((A,t)=>{const e=()=>{this._nativeAudioContext.removeEventListener("statechange",e),"running"===this._nativeAudioContext.state?A():this.resume().then(A,t)};this._nativeAudioContext.addEventListener("statechange",e)}):this._nativeAudioContext.resume().catch(t=>{if(void 0===t||15===t.code)throw A();throw t})}suspend(){return this._nativeAudioContext.suspend().catch(t=>{if(void 0===t)throw A();throw t})}}},"7nqQ":function(A,t){},"7olx":function(A,t){},"8+H8":function(A,t,e){"use strict";e.d(t,"a",(function(){return s}));var n=e("zna5");const s=(A,t)=>(e,s,i)=>{if(void 0===e.createIIRFilter)return t(e,s,i);const o=A(e,A=>A.createIIRFilter(i.feedforward,i.feedback));return Object(n.a)(o,i),o}},"8/15":function(A,t){},"80UW":function(A,t){},"822x":function(A,t){},"85Db":function(A,t){},"87Oy":function(A,t){},"8Bhq":function(A,t,e){"use strict";e.d(t,"a",(function(){return n}));const n=(A,t)=>{const e=[];for(let n=0;n<A;n+=1){const A=[],s="number"==typeof t?t:t[n];for(let t=0;t<s;t+=1)A.push(new Float32Array(128));e.push(A)}return e}},"8DZe":function(A,t){},"8IY7":function(A,t){},"8P6d":function(A,t,e){"use strict";e.d(t,"a",(function(){return n}));const n=A=>(t,e,n)=>{const s=[];for(let A=0;A<n.numberOfInputs;A+=1)s.push(new Set);A.set(t,{activeInputs:s,outputs:new Set,passiveInputs:new WeakMap,renderer:e})}},"8X5q":function(A,t){},"8a7Q":function(A,t){},"8cph":function(A,t){},"8gP8":function(A,t){},"8j7Z":function(A,t){},"8lz0":function(A,t){},"8tAB":function(A,t){A.exports=function(A,t){(null==t||t>A.length)&&(t=A.length);for(var e=0,n=new Array(t);e<t;e++)n[e]=A[e];return n}},"8v+1":function(A,t){},"8zIa":function(A,t){},"9KNc":function(A,t,e){"use strict";e.d(t,"a",(function(){return n}));const n=(A,t)=>async()=>{if(null===A)return!0;if(null===t)return!1;const e=new Blob(['class A extends AudioWorkletProcessor{process(){this.port.postMessage(0)}}registerProcessor("a",A)'],{type:"application/javascript; charset=utf-8"}),n=new t(1,128,3200),s=URL.createObjectURL(e);let i=!1;try{await n.audioWorklet.addModule(s);const t=n.createGain(),e=new A(n,"a",{numberOfOutputs:0});e.port.onmessage=()=>i=!0,t.connect(e),await n.startRendering()}catch{}finally{URL.revokeObjectURL(s)}return i}},"9WjW":function(A,t){},"9dIB":function(A,t){},"9lqF":function(A,t){},"9rMF":function(A,t){},"9rxh":function(A,t){},"9xfp":function(A,t){},"9yae":function(A,t,e){"use strict";e.d(t,"a",(function(){return s}));var n=e("E2bg");const s=(A,t,e,s)=>{Object(n.a)(t)?A.disconnect(t.inputs[s],e,0):A.disconnect(t,e,s)}},A40I:function(A,t){},AD0E:function(A,t){},AWlu:function(A,t){},Aehn:function(A,t,e){"use strict";e.d(t,"a",(function(){return n}));const n=A=>t=>{const e=t.createBuffer(1,1,44100),n=A(t,A=>A.createBufferSource());n.buffer=e,n.start(),n.stop();try{return n.stop(),!0}catch{return!1}}},AjRj:function(A,t){},Anyo:function(A,t,e){"use strict";e.d(t,"a",(function(){return i}));var n=e("dPZM"),s=e("XXdY");const i=A=>Object(s.a)(n.i,A)},ApDg:function(A,t){},ArhF:function(A,t){},Aw7S:function(A,t){},AwFQ:function(A,t){},Ay1J:function(A,t){},"B+Tk":function(A,t,e){"use strict";e.d(t,"a",(function(){return n}));const n=A=>t=>{const e=A(t,A=>A.createBufferSource());e.start();try{e.stop()}catch{return!1}return!0}},B4ht:function(A,t,e){"use strict";e.d(t,"a",(function(){return n}));const n=(A,t)=>e=>A.has(e)||t(e)},B5L1:function(A,t){},BE27:function(A,t,e){"use strict";e.d(t,"a",(function(){return i}));var n=e("zna5"),s=e("UBqq");const i=(A,t,e)=>(i,{buffer:o,channelCount:r,channelCountMode:a,channelInterpretation:c,disableNormalization:M})=>{const l=A(i,A=>A.createConvolver());Object(n.a)(l,{channelCount:Math.max(r,2),channelCountMode:"max"===a?a:"clamped-max",channelInterpretation:c});const u=t(i,{channelCount:r,channelCountMode:a,channelInterpretation:c,gain:1}),h={get buffer(){return l.buffer},set buffer(A){l.buffer=A},get bufferSize(){},get channelCount(){return u.channelCount},set channelCount(A){A>2&&(l.channelCount=A),u.channelCount=A},get channelCountMode(){return u.channelCountMode},set channelCountMode(A){"max"===A&&(l.channelCountMode=A),u.channelCountMode=A},get channelInterpretation(){return l.channelInterpretation},set channelInterpretation(A){l.channelInterpretation=A,u.channelInterpretation=A},get context(){return l.context},get inputs(){return[l]},get numberOfInputs(){return l.numberOfInputs},get numberOfOutputs(){return l.numberOfOutputs},get normalize(){return l.normalize},set normalize(A){l.normalize=A},addEventListener:(...A)=>l.addEventListener(A[0],A[1],A[2]),dispatchEvent:(...A)=>l.dispatchEvent(A[0]),removeEventListener:(...A)=>l.removeEventListener(A[0],A[1],A[2])};return M===h.normalize&&(h.normalize=!M),o!==h.buffer&&(h.buffer=o),e(Object(s.a)(h,u),()=>l.connect(u),()=>l.disconnect(u))}},BEiu:function(A,t){},BIA0:function(A,t){A.exports=function(A,t){if(!(A instanceof t))throw new TypeError("Cannot call a class as a function")}},BNHZ:function(A,t,e){!function(A,t,e,n){"use strict";t=t&&Object.prototype.hasOwnProperty.call(t,"default")?t.default:t,e=e&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e,n=n&&Object.prototype.hasOwnProperty.call(n,"default")?n.default:n;var s=function(A,t,e){return{endTime:t,insertTime:e,type:"exponentialRampToValue",value:A}},i=function(A,t,e){return{endTime:t,insertTime:e,type:"linearRampToValue",value:A}},o=function(A,t){return{startTime:t,type:"setValue",value:A}},r=function(A,t,e){return{duration:e,startTime:t,type:"setValueCurve",values:A}},a=function(A,t,e){var n=e.target;return n+(t-n)*Math.exp((e.startTime-A)/e.timeConstant)},c=function(A){return"exponentialRampToValue"===A.type},M=function(A){return"linearRampToValue"===A.type},l=function(A){return c(A)||M(A)},u=function(A){return"setValue"===A.type},h=function(A){return"setValueCurve"===A.type},g=function A(t,e,n,s){var i=t[e];return void 0===i?s:l(i)||u(i)?i.value:h(i)?i.values[i.values.length-1]:a(n,A(t,e-1,i.startTime,s),i)},m=function(A,t,e,n,s){return void 0===e?[n.insertTime,s]:l(e)?[e.endTime,e.value]:u(e)?[e.startTime,e.value]:h(e)?[e.startTime+e.duration,e.values[e.values.length-1]]:[e.startTime,g(A,t-1,e.startTime,s)]},p=function(A){return"cancelAndHold"===A.type},w=function(A){return"cancelScheduledValues"===A.type},Y=function(A){return p(A)||w(A)?A.cancelTime:c(A)||M(A)?A.endTime:A.startTime},d=function(A,t,e,n){var s=n.value;return e===s?s:0<e&&0<s||e<0&&s<0?e*Math.pow(s/e,(A-t)/(n.endTime-t)):0},B=function(A,t,e,n){return e+(A-t)/(n.endTime-t)*(n.value-e)},D=function(A){return"setTarget"===A.type};A.AutomationEventList=function(){function A(t){e(this,A),this._automationEvents=[],this._currenTime=0,this._defaultValue=t}return n(A,[{key:Symbol.iterator,value:function(){return this._automationEvents[Symbol.iterator]()}},{key:"add",value:function(A){var t=Y(A);if(p(A)||w(A)){var e=this._automationEvents.findIndex((function(A){return Y(A)>=t})),n=this._automationEvents[e];if(-1!==e&&(this._automationEvents=this._automationEvents.slice(0,e)),p(A)){var a=this._automationEvents[this._automationEvents.length-1];if(void 0!==n&&l(n)){if(D(a))throw new Error("The internal list is malformed.");var u=h(a)?a.startTime+a.duration:Y(a),g=h(a)?a.values[a.values.length-1]:a.value,m=c(n)?d(t,u,g,n):B(t,u,g,n),G=c(n)?s(m,t,this._currenTime):i(m,t,this._currenTime);this._automationEvents.push(G)}void 0!==a&&D(a)&&this._automationEvents.push(o(this.getValue(t),t)),void 0!==a&&h(a)&&a.startTime+a.duration>t&&(this._automationEvents[this._automationEvents.length-1]=r(new Float32Array([6,7]),a.startTime,t-a.startTime))}}else{var C=this._automationEvents.findIndex((function(A){return Y(A)>t})),E=-1===C?this._automationEvents[this._automationEvents.length-1]:this._automationEvents[C-1];if(void 0!==E&&h(E)&&Y(E)+E.duration>t)return!1;var I=c(A)?s(A.value,A.endTime,this._currenTime):M(A)?i(A.value,t,this._currenTime):A;if(-1===C)this._automationEvents.push(I);else{if(h(A)&&t+A.duration>Y(this._automationEvents[C]))return!1;this._automationEvents.splice(C,0,I)}}return!0}},{key:"flush",value:function(A){var t=this._automationEvents.findIndex((function(t){return Y(t)>A}));if(t>1){var e=this._automationEvents.slice(t-1),n=e[0];D(n)&&e.unshift(o(g(this._automationEvents,t-2,n.startTime,this._defaultValue),n.startTime)),this._automationEvents=e}}},{key:"getValue",value:function(A){if(0===this._automationEvents.length)return this._defaultValue;var e=this._automationEvents[this._automationEvents.length-1],n=this._automationEvents.findIndex((function(t){return Y(t)>A})),s=this._automationEvents[n],i=Y(e)<=A?e:this._automationEvents[n-1];if(void 0!==i&&D(i)&&(void 0===s||!l(s)||s.insertTime>A))return a(A,g(this._automationEvents,n-2,i.startTime,this._defaultValue),i);if(void 0!==i&&u(i)&&(void 0===s||!l(s)))return i.value;if(void 0!==i&&h(i)&&(void 0===s||!l(s)||i.startTime+i.duration>A))return A<i.startTime+i.duration?function(A,t){var e=t.values;return function(A,t){var e=Math.floor(t),n=Math.ceil(t);return e===n?A[e]:(1-(t-e))*A[e]+(1-(n-t))*A[n]}(e,(A-t.startTime)/t.duration*(e.length-1))}(A,i):i.values[i.values.length-1];if(void 0!==i&&l(i)&&(void 0===s||!l(s)))return i.value;if(void 0!==s&&c(s)){var o=m(this._automationEvents,n-1,i,s,this._defaultValue),r=t(o,2);return d(A,r[0],r[1],s)}if(void 0!==s&&M(s)){var p=m(this._automationEvents,n-1,i,s,this._defaultValue),w=t(p,2);return B(A,w[0],w[1],s)}return this._defaultValue}}]),A}(),A.createCancelAndHoldAutomationEvent=function(A){return{cancelTime:A,type:"cancelAndHold"}},A.createCancelScheduledValuesAutomationEvent=function(A){return{cancelTime:A,type:"cancelScheduledValues"}},A.createExponentialRampToValueAutomationEvent=function(A,t){return{endTime:t,type:"exponentialRampToValue",value:A}},A.createLinearRampToValueAutomationEvent=function(A,t){return{endTime:t,type:"linearRampToValue",value:A}},A.createSetTargetAutomationEvent=function(A,t,e){return{startTime:t,target:A,timeConstant:e,type:"setTarget"}},A.createSetValueAutomationEvent=o,A.createSetValueCurveAutomationEvent=r,Object.defineProperty(A,"__esModule",{value:!0})}(t,e("SNoo"),e("BIA0"),e("NN06"))},BTUm:function(A,t){},BTca:function(A,t,e){"use strict";e.d(t,"a",(function(){return n}));const n=(A,t,e,n,s,i,o,r)=>class extends A{constructor(A,e){const n=i(A),a=o(n),c=s(n,e,a);super(A,!1,c,a?t(r):null),this._isNodeOfNativeOfflineAudioContext=a,this._nativeAudioDestinationNode=c}get channelCount(){return this._nativeAudioDestinationNode.channelCount}set channelCount(A){if(this._isNodeOfNativeOfflineAudioContext)throw n();if(A>this._nativeAudioDestinationNode.maxChannelCount)throw e();this._nativeAudioDestinationNode.channelCount=A}get channelCountMode(){return this._nativeAudioDestinationNode.channelCountMode}set channelCountMode(A){if(this._isNodeOfNativeOfflineAudioContext)throw n();this._nativeAudioDestinationNode.channelCountMode=A}get maxChannelCount(){return this._nativeAudioDestinationNode.maxChannelCount}}},"BW/S":function(A,t){},BW5h:function(A,t,e){"use strict";e.d(t,"a",(function(){return i}));var n=e("Nhr7");const s={channelCount:2,channelCountMode:"max",channelInterpretation:"speakers"},i=(A,t,e,i,o)=>class extends A{constructor(A,r){const a=i(A),c=o(a),M={...s,...r},l=t(a,c?null:A.baseLatency,M);super(A,!1,l,c?e(M.feedback,M.feedforward):null),(A=>{var t;A.getFrequencyResponse=(t=A.getFrequencyResponse,(e,s,i)=>{if(e.length!==s.length||s.length!==i.length)throw Object(n.a)();return t.call(A,e,s,i)})})(l),this._nativeIIRFilterNode=l}getFrequencyResponse(A,t,e){return this._nativeIIRFilterNode.getFrequencyResponse(A,t,e)}}},Bel5:function(A,t,e){"use strict";e.d(t,"a",(function(){return s}));const n={buffer:null,channelCount:2,channelCountMode:"clamped-max",channelInterpretation:"speakers",disableNormalization:!1},s=(A,t,e,s,i)=>class extends A{constructor(A,o=n){const r=s(A),a={...n,...o},c=e(r,a);super(A,!1,c,i(r)?t():null),this._isBufferNullified=!1,this._nativeConvolverNode=c}get buffer(){return this._isBufferNullified?null:this._nativeConvolverNode.buffer}set buffer(A){if(this._nativeConvolverNode.buffer=A,null===A&&null!==this._nativeConvolverNode.buffer){const A=this._nativeConvolverNode.context;this._nativeConvolverNode.buffer=A.createBuffer(1,1,A.sampleRate),this._isBufferNullified=!0}else this._isBufferNullified=!1}get normalize(){return this._nativeConvolverNode.normalize}set normalize(A){this._nativeConvolverNode.normalize=A}}},Bo8n:function(A,t){},"BxD+":function(A,t,e){"use strict";e.d(t,"a",(function(){return n}));const n=A=>()=>{if(null===A)return!1;if(void 0!==A.prototype&&void 0!==A.prototype.close)return!0;const t=new A,e=void 0!==t.close;try{t.close()}catch{}return e}},BzeX:function(A,t){},C8I1:function(A,t){},CCHl:function(A,t){},CFZ3:function(A,t,e){"use strict";e.d(t,"a",(function(){return s}));const n={channelCount:2,channelCountMode:"max",channelInterpretation:"speakers",fftSize:2048,maxDecibels:-30,minDecibels:-100,smoothingTimeConstant:.8},s=(A,t,e,s,i,o)=>class extends A{constructor(A,e=n){const r=i(A),a={...n,...e},c=s(r,a);super(A,!1,c,o(r)?t():null),this._nativeAnalyserNode=c}get fftSize(){return this._nativeAnalyserNode.fftSize}set fftSize(A){this._nativeAnalyserNode.fftSize=A}get frequencyBinCount(){return this._nativeAnalyserNode.frequencyBinCount}get maxDecibels(){return this._nativeAnalyserNode.maxDecibels}set maxDecibels(A){const t=this._nativeAnalyserNode.maxDecibels;if(this._nativeAnalyserNode.maxDecibels=A,!(A>this._nativeAnalyserNode.minDecibels))throw this._nativeAnalyserNode.maxDecibels=t,e()}get minDecibels(){return this._nativeAnalyserNode.minDecibels}set minDecibels(A){const t=this._nativeAnalyserNode.minDecibels;if(this._nativeAnalyserNode.minDecibels=A,!(this._nativeAnalyserNode.maxDecibels>A))throw this._nativeAnalyserNode.minDecibels=t,e()}get smoothingTimeConstant(){return this._nativeAnalyserNode.smoothingTimeConstant}set smoothingTimeConstant(A){this._nativeAnalyserNode.smoothingTimeConstant=A}getByteFrequencyData(A){this._nativeAnalyserNode.getByteFrequencyData(A)}getByteTimeDomainData(A){this._nativeAnalyserNode.getByteTimeDomainData(A)}getFloatFrequencyData(A){this._nativeAnalyserNode.getFloatFrequencyData(A)}getFloatTimeDomainData(A){this._nativeAnalyserNode.getFloatTimeDomainData(A)}}},CFpx:function(A,t){},CQj6:function(A,t,e){"use strict";e.d(t,"a",(function(){return n}));const n=A=>({replay(t){for(const e of A)if("exponentialRampToValue"===e.type){const{endTime:A,value:n}=e;t.exponentialRampToValueAtTime(n,A)}else if("linearRampToValue"===e.type){const{endTime:A,value:n}=e;t.linearRampToValueAtTime(n,A)}else if("setTarget"===e.type){const{startTime:A,target:n,timeConstant:s}=e;t.setTargetAtTime(n,A,s)}else if("setValue"===e.type){const{startTime:A,value:n}=e;t.setValueAtTime(n,A)}else{if("setValueCurve"!==e.type)throw new Error("Can't apply an unknown automation.");{const{duration:A,startTime:n,values:s}=e;t.setValueCurveAtTime(s,n,A)}}}})},CYL4:function(A,t){},CacN:function(A,t){},CayM:function(A,t){},Cb3F:function(A,t,e){"use strict";e.d(t,"a",(function(){return n}));const n=A=>t=>(A[0]=t,A[0])},Ccui:function(A,t){},Cew9:function(A,t){},CgYg:function(A,t){},Clho:function(A,t){},Cnhf:function(A,t){},CtUq:function(A,t){},"D+dw":function(A,t,e){"use strict";e.d(t,"a",(function(){return n}));const n=A=>t=>{const e=A(t);if(null===e.renderer)throw new Error("Missing the renderer of the given AudioParam in the audio graph.");return e.renderer}},"D/V1":function(A,t){},"D/w2":function(A,t){},DAi8:function(A,t,e){"use strict";e.d(t,"a",(function(){return M}));var n=e("YvTh"),s=e("0RYA"),i=e("0A78"),o=e("z++k"),r=e("dPZM"),a=e("8Bhq"),c=e("nIXe");const M=(A,t,e,M,l,u,h,g,m,p,w,Y,d)=>(B,D,G,C)=>{if(0===C.numberOfInputs&&0===C.numberOfOutputs)throw p();if(void 0!==C.outputChannelCount){if(C.outputChannelCount.some(A=>A<1))throw p();if(C.outputChannelCount.length!==C.numberOfOutputs)throw e()}if("explicit"!==C.channelCountMode)throw p();const E=C.channelCount*C.numberOfInputs,I=C.outputChannelCount.reduce((A,t)=>A+t,0),y=void 0===G.parameterDescriptors?0:G.parameterDescriptors.length;if(E+y>6||I>6)throw p();const Q=new MessageChannel,Z=[],T=[];for(let A=0;A<C.numberOfInputs;A+=1)Z.push(g(B,{channelCount:C.channelCount,channelCountMode:C.channelCountMode,channelInterpretation:C.channelInterpretation,gain:1})),T.push(u(B,{channelCount:C.channelCount,channelCountMode:"explicit",channelInterpretation:"discrete",numberOfOutputs:C.channelCount}));const k=[];if(void 0!==G.parameterDescriptors)for(const{defaultValue:A,maxValue:t,minValue:e,name:s}of G.parameterDescriptors){const i=h(B,{channelCount:1,channelCountMode:"explicit",channelInterpretation:"discrete",offset:void 0!==C.parameterData[s]?C.parameterData[s]:void 0===A?0:A});Object.defineProperties(i.offset,{defaultValue:{get:()=>void 0===A?0:A},maxValue:{get:()=>void 0===t?n.b:t},minValue:{get:()=>void 0===e?n.a:e}}),k.push(i)}const S=l(B,{channelCount:1,channelCountMode:"explicit",channelInterpretation:"speakers",numberOfInputs:Math.max(1,E+y)}),z=Object(s.a)(D,B.sampleRate),U=m(B,z,E+y,Math.max(1,I)),b=u(B,{channelCount:Math.max(1,I),channelCountMode:"explicit",channelInterpretation:"discrete",numberOfOutputs:Math.max(1,I)}),j=[];for(let A=0;A<C.numberOfOutputs;A+=1)j.push(l(B,{channelCount:1,channelCountMode:"explicit",channelInterpretation:"speakers",numberOfInputs:C.outputChannelCount[A]}));for(let A=0;A<C.numberOfInputs;A+=1){Z[A].connect(T[A]);for(let t=0;t<C.channelCount;t+=1)T[A].connect(S,t,A*C.channelCount+t)}const N=new c.a(void 0===G.parameterDescriptors?[]:G.parameterDescriptors.map(({name:A},t)=>{const e=k[t];return e.connect(S,0,E+t),e.start(0),[A,e.offset]}));S.connect(U);let x=C.channelInterpretation,K=null;const J=0===C.numberOfOutputs?[U]:j,R={get bufferSize(){return z},get channelCount(){return C.channelCount},set channelCount(A){throw M()},get channelCountMode(){return C.channelCountMode},set channelCountMode(A){throw M()},get channelInterpretation(){return x},set channelInterpretation(A){for(const t of Z)t.channelInterpretation=A;x=A},get context(){return U.context},get inputs(){return Z},get numberOfInputs(){return C.numberOfInputs},get numberOfOutputs(){return C.numberOfOutputs},get onprocessorerror(){return K},set onprocessorerror(A){"function"==typeof K&&R.removeEventListener("processorerror",K),K="function"==typeof A?A:null,"function"==typeof K&&R.addEventListener("processorerror",K)},get parameters(){return N},get port(){return Q.port2},addEventListener:(...A)=>U.addEventListener(A[0],A[1],A[2]),connect:t.bind(null,J),disconnect:w.bind(null,J),dispatchEvent:(...A)=>U.dispatchEvent(A[0]),removeEventListener:(...A)=>U.removeEventListener(A[0],A[1],A[2])},W=new Map;var O,q;Q.port1.addEventListener=(O=Q.port1.addEventListener,(...A)=>{if("message"===A[0]){const t="function"==typeof A[1]?A[1]:"object"==typeof A[1]&&null!==A[1]&&"function"==typeof A[1].handleEvent?A[1].handleEvent:null;if(null!==t){const e=W.get(A[1]);void 0!==e?A[1]=e:(A[1]=A=>{Y(B.currentTime,B.sampleRate,()=>t(A))},W.set(t,A[1]))}}return O.call(Q.port1,A[0],A[1],A[2])}),Q.port1.removeEventListener=(q=Q.port1.removeEventListener,(...A)=>{if("message"===A[0]){const t=W.get(A[1]);void 0!==t&&(W.delete(A[1]),A[1]=t)}return q.call(Q.port1,A[0],A[1],A[2])});let F=null;Object.defineProperty(Q.port1,"onmessage",{get:()=>F,set:A=>{"function"==typeof F&&Q.port1.removeEventListener("message",F),F="function"==typeof A?A:null,"function"==typeof F&&(Q.port1.addEventListener("message",F),Q.port1.start())}}),G.prototype.port=Q.port1;let f=null;((A,t,e,n)=>{let s=r.k.get(A);void 0===s&&(s=new WeakMap,r.k.set(A,s));const i=(async(A,t)=>new A(await(A=>new Promise((t,e)=>{const{port1:n,port2:s}=new MessageChannel;n.onmessage=({data:A})=>{n.close(),s.close(),t(A)},n.onmessageerror=({data:A})=>{n.close(),s.close(),e(A)},s.postMessage(A)}))(t)))(e,n);return s.set(t,i),i})(B,R,G,C).then(A=>f=A);const V=Object(a.a)(C.numberOfInputs,C.channelCount),L=Object(a.a)(C.numberOfOutputs,C.outputChannelCount),H=void 0===G.parameterDescriptors?[]:G.parameterDescriptors.reduce((A,{name:t})=>({...A,[t]:new Float32Array(128)}),{});let v=!0;const P=()=>{C.numberOfOutputs>0&&U.disconnect(b);for(let A=0,t=0;A<C.numberOfOutputs;A+=1){const e=j[A];for(let n=0;n<C.outputChannelCount[A];n+=1)b.disconnect(e,t+n,n);t+=C.outputChannelCount[A]}};U.onaudioprocess=({inputBuffer:t,outputBuffer:e})=>{if(null!==f)for(let s=0;s<z;s+=128){for(let A=0;A<C.numberOfInputs;A+=1)for(let e=0;e<C.channelCount;e+=1)Object(i.a)(t,V[A],e,e,s);void 0!==G.parameterDescriptors&&G.parameterDescriptors.forEach(({name:A},e)=>{Object(i.a)(t,H,A,E+e,s)});for(let A=0;A<C.numberOfInputs;A+=1)for(let t=0;t<C.outputChannelCount[A];t+=1)0===L[A][t].byteLength&&(L[A][t]=new Float32Array(128));try{const t=V.map((t,e)=>{const n=A.get(R);return void 0===n||void 0===n.get(e)?[]:t}),n=Y(B.currentTime+s/B.sampleRate,B.sampleRate,()=>f.process(t,L,H));v=n;for(let A=0,i=0;A<C.numberOfOutputs;A+=1){for(let t=0;t<C.outputChannelCount[A];t+=1)Object(o.a)(e,L[A],t,i+t,s);i+=C.outputChannelCount[A]}}catch(n){v=!1,R.dispatchEvent(new ErrorEvent("processorerror",{error:n}))}if(!v){for(let A=0;A<C.numberOfInputs;A+=1){Z[A].disconnect(T[A]);for(let t=0;t<C.channelCount;t+=1)T[s].disconnect(S,t,A*C.channelCount+t)}if(void 0!==G.parameterDescriptors){const A=G.parameterDescriptors.length;for(let t=0;t<A;t+=1){const A=k[t];A.disconnect(S,0,E+t),A.stop()}}S.disconnect(U),U.onaudioprocess=null,X?P():AA();break}}};let X=!1;const _=g(B,{channelCount:1,channelCountMode:"explicit",channelInterpretation:"discrete",gain:0}),$=()=>U.connect(_).connect(_.context.destination),AA=()=>{U.disconnect(_),_.disconnect()};return $(),d(R,()=>{if(v){AA(),C.numberOfOutputs>0&&U.connect(b);for(let A=0,t=0;A<C.numberOfOutputs;A+=1){const e=j[A];for(let n=0;n<C.outputChannelCount[A];n+=1)b.connect(e,t+n,n);t+=C.outputChannelCount[A]}}X=!0},()=>{v&&($(),P()),X=!1})}},DOrM:function(A,t){},Da0I:function(A,t,e){"use strict";e.d(t,"a",(function(){return i}));var n=e("zna5"),s=e("UBqq");const i=(A,t,e,i,o,r,a,c,M,l)=>(u,{coneInnerAngle:h,coneOuterAngle:g,coneOuterGain:m,distanceModel:p,maxDistance:w,orientationX:Y,orientationY:d,orientationZ:B,panningModel:D,positionX:G,positionY:C,positionZ:E,refDistance:I,rolloffFactor:y,...Q})=>{const Z=e(u,A=>A.createPanner());if(Q.channelCount>2)throw c();if("max"===Q.channelCountMode)throw c();Object(n.a)(Z,Q);const T={channelCount:1,channelCountMode:"explicit",channelInterpretation:"discrete"},k=i(u,{...T,channelInterpretation:"speakers",numberOfInputs:6}),S=o(u,{...Q,gain:1}),z=o(u,{...T,gain:1}),U=o(u,{...T,gain:0}),b=o(u,{...T,gain:0}),j=o(u,{...T,gain:0}),N=o(u,{...T,gain:0}),x=o(u,{...T,gain:0}),K=r(u,256,6,1),J=a(u,{...T,curve:new Float32Array([1,1]),oversample:"none"});let R=[Y,d,B],W=[G,C,E];K.onaudioprocess=({inputBuffer:A})=>{const t=[A.getChannelData(0)[0],A.getChannelData(1)[0],A.getChannelData(2)[0]];t.some((A,t)=>A!==R[t])&&(Z.setOrientation(...t),R=t);const e=[A.getChannelData(3)[0],A.getChannelData(4)[0],A.getChannelData(5)[0]];e.some((A,t)=>A!==W[t])&&(Z.setPosition(...e),W=e)},Object.defineProperty(U.gain,"defaultValue",{get:()=>0}),Object.defineProperty(b.gain,"defaultValue",{get:()=>0}),Object.defineProperty(j.gain,"defaultValue",{get:()=>0}),Object.defineProperty(N.gain,"defaultValue",{get:()=>0}),Object.defineProperty(x.gain,"defaultValue",{get:()=>0});const O={get bufferSize(){},get channelCount(){return Z.channelCount},set channelCount(A){if(A>2)throw c();S.channelCount=A,Z.channelCount=A},get channelCountMode(){return Z.channelCountMode},set channelCountMode(A){if("max"===A)throw c();S.channelCountMode=A,Z.channelCountMode=A},get channelInterpretation(){return Z.channelInterpretation},set channelInterpretation(A){S.channelInterpretation=A,Z.channelInterpretation=A},get coneInnerAngle(){return Z.coneInnerAngle},set coneInnerAngle(A){Z.coneInnerAngle=A},get coneOuterAngle(){return Z.coneOuterAngle},set coneOuterAngle(A){Z.coneOuterAngle=A},get coneOuterGain(){return Z.coneOuterGain},set coneOuterGain(A){if(A<0||A>1)throw t();Z.coneOuterGain=A},get context(){return Z.context},get distanceModel(){return Z.distanceModel},set distanceModel(A){Z.distanceModel=A},get inputs(){return[S]},get maxDistance(){return Z.maxDistance},set maxDistance(A){if(A<0)throw new RangeError;Z.maxDistance=A},get numberOfInputs(){return Z.numberOfInputs},get numberOfOutputs(){return Z.numberOfOutputs},get orientationX(){return z.gain},get orientationY(){return U.gain},get orientationZ(){return b.gain},get panningModel(){return Z.panningModel},set panningModel(A){if(Z.panningModel=A,Z.panningModel!==A&&"HRTF"===A)throw c()},get positionX(){return j.gain},get positionY(){return N.gain},get positionZ(){return x.gain},get refDistance(){return Z.refDistance},set refDistance(A){if(A<0)throw new RangeError;Z.refDistance=A},get rolloffFactor(){return Z.rolloffFactor},set rolloffFactor(A){if(A<0)throw new RangeError;Z.rolloffFactor=A},addEventListener:(...A)=>S.addEventListener(A[0],A[1],A[2]),dispatchEvent:(...A)=>S.dispatchEvent(A[0]),removeEventListener:(...A)=>S.removeEventListener(A[0],A[1],A[2])};return h!==O.coneInnerAngle&&(O.coneInnerAngle=h),g!==O.coneOuterAngle&&(O.coneOuterAngle=g),m!==O.coneOuterGain&&(O.coneOuterGain=m),p!==O.distanceModel&&(O.distanceModel=p),w!==O.maxDistance&&(O.maxDistance=w),Y!==O.orientationX.value&&(O.orientationX.value=Y),d!==O.orientationY.value&&(O.orientationY.value=d),B!==O.orientationZ.value&&(O.orientationZ.value=B),D!==O.panningModel&&(O.panningModel=D),G!==O.positionX.value&&(O.positionX.value=G),C!==O.positionY.value&&(O.positionY.value=C),E!==O.positionZ.value&&(O.positionZ.value=E),I!==O.refDistance&&(O.refDistance=I),y!==O.rolloffFactor&&(O.rolloffFactor=y),1===R[0]&&0===R[1]&&0===R[2]||Z.setOrientation(...R),0===W[0]&&0===W[1]&&0===W[2]||Z.setPosition(...W),l(Object(s.a)(O,Z),()=>{S.connect(Z),A(S,J,0,0),J.connect(z).connect(k,0,0),J.connect(U).connect(k,0,1),J.connect(b).connect(k,0,2),J.connect(j).connect(k,0,3),J.connect(N).connect(k,0,4),J.connect(x).connect(k,0,5),k.connect(K).connect(u.destination)},()=>{S.disconnect(Z),M(S,J,0,0),J.disconnect(z),z.disconnect(k),J.disconnect(U),U.disconnect(k),J.disconnect(b),b.disconnect(k),J.disconnect(j),j.disconnect(k),J.disconnect(N),N.disconnect(k),J.disconnect(x),x.disconnect(k),k.disconnect(K),K.disconnect(u.destination)})}},DeJw:function(A,t,e){"use strict";e.d(t,"a",(function(){return s}));var n=e("UBqq");const s=(A,t,e,s,i,o)=>{const r=new Float32Array([1,1]),a=Math.PI/2,c={channelCount:1,channelCountMode:"explicit",channelInterpretation:"discrete"},M={...c,oversample:"none"},l=(A,n,o,l,u)=>{if(1===n)return((A,t,n,i)=>{const o=new Float32Array(16385),l=new Float32Array(16385);for(let e=0;e<16385;e+=1){const A=e/16384*a;o[e]=Math.cos(A),l[e]=Math.sin(A)}const u=e(A,{...c,gain:0}),h=s(A,{...M,curve:o}),g=s(A,{...M,curve:r}),m=e(A,{...c,gain:0}),p=s(A,{...M,curve:l});return{connectGraph(){t.connect(u),t.connect(g.inputs[0]),t.connect(m),g.connect(n),n.connect(h.inputs[0]),n.connect(p.inputs[0]),h.connect(u.gain),p.connect(m.gain),u.connect(i,0,0),m.connect(i,0,1)},disconnectGraph(){t.disconnect(u),t.disconnect(g.inputs[0]),t.disconnect(m),g.disconnect(n),n.disconnect(h.inputs[0]),n.disconnect(p.inputs[0]),h.disconnect(u.gain),p.disconnect(m.gain),u.disconnect(i,0,0),m.disconnect(i,0,1)}}})(A,o,l,u);if(2===n)return((A,n,i,o)=>{const l=new Float32Array(16385),u=new Float32Array(16385),h=new Float32Array(16385),g=new Float32Array(16385),m=Math.floor(8192.5);for(let t=0;t<16385;t+=1)if(t>m){const A=(t-m)/(16384-m)*a;l[t]=Math.cos(A),u[t]=Math.sin(A),h[t]=0,g[t]=1}else{const A=t/(16384-m)*a;l[t]=1,u[t]=0,h[t]=Math.cos(A),g[t]=Math.sin(A)}const p=t(A,{channelCount:2,channelCountMode:"explicit",channelInterpretation:"discrete",numberOfOutputs:2}),w=e(A,{...c,gain:0}),Y=s(A,{...M,curve:l}),d=e(A,{...c,gain:0}),B=s(A,{...M,curve:u}),D=s(A,{...M,curve:r}),G=e(A,{...c,gain:0}),C=s(A,{...M,curve:h}),E=e(A,{...c,gain:0}),I=s(A,{...M,curve:g});return{connectGraph(){n.connect(p),n.connect(D.inputs[0]),p.connect(w,1),p.connect(d,1),p.connect(G,1),p.connect(E,1),D.connect(i),i.connect(Y.inputs[0]),i.connect(B.inputs[0]),i.connect(C.inputs[0]),i.connect(I.inputs[0]),Y.connect(w.gain),B.connect(d.gain),C.connect(G.gain),I.connect(E.gain),w.connect(o,0,0),G.connect(o,0,0),d.connect(o,0,1),E.connect(o,0,1)},disconnectGraph(){n.disconnect(p),n.disconnect(D.inputs[0]),p.disconnect(w,1),p.disconnect(d,1),p.disconnect(G,1),p.disconnect(E,1),D.disconnect(i),i.disconnect(Y.inputs[0]),i.disconnect(B.inputs[0]),i.disconnect(C.inputs[0]),i.disconnect(I.inputs[0]),Y.disconnect(w.gain),B.disconnect(d.gain),C.disconnect(G.gain),I.disconnect(E.gain),w.disconnect(o,0,0),G.disconnect(o,0,0),d.disconnect(o,0,1),E.disconnect(o,0,1)}}})(A,o,l,u);throw i()};return(t,{channelCount:s,channelCountMode:r,pan:a,...c})=>{if("max"===r)throw i();const M=A(t,{...c,channelCount:1,channelCountMode:r,numberOfInputs:2}),u=e(t,{...c,channelCount:s,channelCountMode:r,gain:1}),h=e(t,{channelCount:1,channelCountMode:"explicit",channelInterpretation:"discrete",gain:a});let{connectGraph:g,disconnectGraph:m}=l(t,s,u,h,M);Object.defineProperty(h.gain,"defaultValue",{get:()=>0});const p={get bufferSize(){},get channelCount(){return u.channelCount},set channelCount(A){u.channelCount!==A&&(w&&m(),({connectGraph:g,disconnectGraph:m}=l(t,A,u,h,M)),w&&g()),u.channelCount=A},get channelCountMode(){return u.channelCountMode},set channelCountMode(A){if("clamped-max"===A||"max"===A)throw i();u.channelCountMode=A},get channelInterpretation(){return u.channelInterpretation},set channelInterpretation(A){u.channelInterpretation=A},get context(){return u.context},get inputs(){return[u]},get numberOfInputs(){return u.numberOfInputs},get numberOfOutputs(){return u.numberOfOutputs},get pan(){return h.gain},addEventListener:(...A)=>u.addEventListener(A[0],A[1],A[2]),dispatchEvent:(...A)=>u.dispatchEvent(A[0]),removeEventListener:(...A)=>u.removeEventListener(A[0],A[1],A[2])};let w=!1;return o(Object(n.a)(p,M),()=>{g(),w=!0},()=>{m(),w=!1})}}},DiTw:function(A,t,e){"use strict";e.d(t,"a",(function(){return n}));const n=(A,t,e,n)=>{for(const s of A)if(e(s)){if(n)return!1;throw Error("The set contains at least one similar element.")}return A.add(t),!0}},DrHF:function(A,t){},Dt7H:function(A,t){},DuGM:function(A,t){},DyMJ:function(A,t){},E1Se:function(A,t){},E2P0:function(A,t,e){"use strict";e.d(t,"a",(function(){return n}));const n=()=>{try{return new DOMException("","NotSupportedError")}catch(A){return A.code=9,A.name="NotSupportedError",A}}},E2bg:function(A,t,e){"use strict";e.d(t,"a",(function(){return n}));const n=A=>"inputs"in A},E6gS:function(A,t,e){"use strict";e.d(t,"a",(function(){return s}));var n=e("5ThQ");const s=(A,t,e,s)=>i=>A(n.a,()=>Object(n.a)(i))?Promise.resolve(A(s,s)).then(A=>{if(!A){const A=e(i,512,0,1);i.oncomplete=()=>{A.onaudioprocess=null,A.disconnect()},A.onaudioprocess=()=>i.currentTime,A.connect(i.destination)}return i.startRendering()}):new Promise(A=>{const e=t(i,{channelCount:1,channelCountMode:"explicit",channelInterpretation:"discrete",gain:0});i.oncomplete=t=>{e.disconnect(),A(t.renderedBuffer)},e.connect(i.destination),i.startRendering()})},EBxe:function(A,t,e){"use strict";e.d(t,"a",(function(){return n}));const n=A=>()=>{if(null===A)return Promise.resolve(!1);const t=new A(1,1,44100);return new Promise(A=>{let e=!0;const n=n=>{e&&(e=!1,t.startRendering(),A(n instanceof TypeError))};let s;try{s=t.decodeAudioData(null,()=>{},n)}catch(i){n(i)}void 0!==s&&s.catch(n)})}},EDcz:function(A,t){},EI1G:function(A,t){},EQi5:function(A,t){},ETzM:function(A,t,e){"use strict";e.d(t,"a",(function(){return s}));const n={channelCount:2,channelCountMode:"max",channelInterpretation:"speakers",delayTime:0,maxDelayTime:1},s=(A,t,e,s,i,o)=>class extends A{constructor(A,r=n){const a=i(A),c={...n,...r},M=s(a,c),l=o(a);super(A,!1,M,l?e(c.maxDelayTime):null),this._delayTime=t(this,l,M.delayTime,c.maxDelayTime,0)}get delayTime(){return this._delayTime}}},EVRJ:function(A,t){},EdRB:function(A,t,e){"use strict";e.d(t,"a",(function(){return s}));var n=e("dPZM");const s=A=>n.a.has(A)},EhF0:function(A,t){},EkJU:function(A,t,e){"use strict";e.d(t,"a",(function(){return s}));var n=e("kho+");const s=A=>(t,e,s=0,i=0)=>{const o=t[s];if(void 0===o)throw A();return Object(n.a)(e)?o.connect(e,0,i):o.connect(e,0)}},EmmH:function(A,t){},Eq7A:function(A,t,e){var n=e("8tAB");A.exports=function(A,t){if(A){if("string"==typeof A)return n(A,t);var e=Object.prototype.toString.call(A).slice(8,-1);return"Object"===e&&A.constructor&&(e=A.constructor.name),"Map"===e||"Set"===e?Array.from(A):"Arguments"===e||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e)?n(A,t):void 0}}},EqBf:function(A,t){},F6A0:function(A,t){},F9Jk:function(A,t){},FC2d:function(A,t,e){"use strict";e.d(t,"a",(function(){return s}));const n={channelCount:2,channelCountMode:"max",channelInterpretation:"speakers",curve:null,oversample:"none"},s=(A,t,e,s,i,o)=>class extends A{constructor(A,t=n){const r=i(A),a={...n,...t},c=e(r,a);super(A,!0,c,o(r)?s():null),this._isCurveNullified=!1,this._nativeWaveShaperNode=c}get curve(){return this._isCurveNullified?null:this._nativeWaveShaperNode.curve}set curve(A){if(null===A)this._isCurveNullified=!0,this._nativeWaveShaperNode.curve=new Float32Array([0,0]);else{if(A.length<2)throw t();this._isCurveNullified=!1,this._nativeWaveShaperNode.curve=A}}get oversample(){return this._nativeWaveShaperNode.oversample}set oversample(A){this._nativeWaveShaperNode.oversample=A}}},"FCE+":function(A,t){},FCzb:function(A,t){},FIsb:function(A,t){},FJGQ:function(A,t){},FOG8:function(A,t){},"FOs+":function(A,t){},FR7G:function(A,t,e){"use strict";e.d(t,"a",(function(){return n}));const n=A=>t=>null!==A&&"function"==typeof A.AudioParam&&t instanceof A.AudioParam},FRoz:function(A,t){},FaYK:function(A,t,e){"use strict";e("2mgF"),e("r1lH"),e("KB5y"),e("oc+8"),e("KVsz"),e("XH4K"),e("8X5q"),e("aocZ"),e("BzeX"),e("Qvq/"),e("UGPt"),e("zLgK"),e("LYLx"),e("NPXZ"),e("X075"),e("j1Cx"),e("n0IT"),e("15Ah"),e("VtkK"),e("K3jZ"),e("kNlX"),e("srTO"),e("WWnF"),e("o846"),e("vk/g"),e("Fe/V"),e("M7jd"),e("xsbe"),e("XMzK"),e("eoHL"),e("Y3aM"),e("P6gU"),e("822x"),e("sEUg"),e("RLnm"),e("GAM8"),e("Yf/P"),e("UHJ0"),e("EhF0"),e("3AdT"),e("yen9"),e("QPCC"),e("ApDg"),e("i6zT"),e("PC9b"),e("E1Se"),e("Ssr9"),e("62VS"),e("Nzsy"),e("labN"),e("KDjb"),e("S8lH"),e("rEua"),e("sAAB"),e("YX8H"),e("G2yn"),e("LtPi"),e("tIAH"),e("oaLP"),e("K+wZ"),e("77rU"),e("F6A0"),e("dg4q"),e("MUal"),e("iEoR"),e("78mH"),e("THaK"),e("AjRj"),e("KyWW"),e("kZjv"),e("8/15"),e("ahmc"),e("SwBP"),e("zBvS"),e("V23g"),e("Tt/L"),e("XAn0"),e("K5Cn"),e("Mm+Y"),e("sTV2"),e("jSSq"),e("v1w8"),e("Sprd"),e("Uudy"),e("peFD"),e("9lqF"),e("GjFq"),e("yb2S"),e("vJN5"),e("yh+Y"),e("nMty"),e("eTIN"),e("mmQx"),e("51wD"),e("QEju"),e("sptN"),e("weul"),e("sdK2"),e("efqp"),e("jxxv"),e("5MiQ"),e("EI1G"),e("dB45"),e("2dwH"),e("ZL/J"),e("ptbo"),e("Uah+"),e("BTUm"),e("L0Wg"),e("qEcr"),e("z+fr"),e("wxk5"),e("5O4r"),e("LJTL"),e("vIbL"),e("T4nf"),e("Lnet"),e("Ypea"),e("KyTj"),e("XG8z"),e("ODiM"),e("lrIq"),e("5oY7"),e("FCzb"),e("/T4j"),e("CFpx"),e("6wby"),e("ODTT"),e("U7bI"),e("+O6C"),e("P50y"),e("Lvye"),e("ArhF"),e("hNL6"),e("BW/S"),e("2vVy"),e("+nqp"),e("kL2y"),e("DOrM"),e("Dt7H"),e("3bGe"),e("9WjW"),e("cuKk"),e("TgX4"),e("FJGQ"),e("YQ/E"),e("j7Jg"),e("01c5"),e("z2JV"),e("AD0E"),e("a9DD"),e("xODY"),e("O3/C"),e("RG43"),e("79tk"),e("dEdv"),e("NT2r"),e("CtUq"),e("jW2G"),e("7//d"),e("rlmS"),e("X4+W"),e("npgF"),e("7c0I"),e("t6y6"),e("EQi5"),e("ZlB+"),e("EmmH"),e("xm0Z"),e("vfd9"),e("T4RW"),e("AWlu"),e("s+2q"),e("D/w2"),e("roH0"),e("O0e7"),e("XC81"),e("QDZq"),e("zxk7"),e("Jm+O"),e("5wwn"),e("vlu2"),e("9rMF"),e("omSt"),e("VONf"),e("Z6Q6"),e("DrHF"),e("pBau"),e("yowc"),e("+3sj"),e("t43w"),e("vJES"),e("LzqH"),e("LhgQ"),e("H10q"),e("m7Fy"),e("/T/s"),e("Re9m"),e("r4tT"),e("DuGM"),e("Q/fG"),e("Ln7M"),e("O69r"),e("QpvO"),e("3SJO"),e("fXrx"),e("mMln"),e("wcPs"),e("Iqnw"),e("8cph"),e("r724"),e("M9/c"),e("7R1p"),e("YfWv"),e("YsxF"),e("JOUb"),e("z2mF"),e("Np68"),e("D/V1"),e("Gv9h"),e("dKZW"),e("sCYc"),e("IfRI"),e("bRPT"),e("Okwt"),e("ajUT"),e("j8Jl"),e("Clho"),e("XD6l"),e("Cew9"),e("Z3uy"),e("k9jr"),e("yMTn"),e("USJF"),e("ijrL"),e("oJKu"),e("8zIa"),e("Zkfd"),e("nKNV"),e("FOG8"),e("3T0p"),e("beTH"),e("0Bgy"),e("YXBp"),e("ZQAS"),e("Wybk"),e("krMw"),e("jttC"),e("B5L1"),e("Jxv9"),e("80UW"),e("X0ge"),e("ufFQ"),e("F9Jk"),e("YoLu"),e("7nqQ"),e("/B1R"),e("nxAH"),e("sieG"),e("bsGK"),e("M/IH"),e("2FVp"),e("/oG6"),e("5YLH"),e("CCHl"),e("X2c7"),e("Wdml"),e("Qx09"),e("Bo8n"),e("swcp"),e("1qvQ"),e("s0M+"),e("d2FR"),e("8lz0"),e("vrbq"),e("n/xI"),e("OyKv"),e("5eOa"),e("bfI/"),e("FCE+"),e("xgK6"),e("kM3D"),e("JNKn"),e("9rxh"),e("dA1W"),e("Z2o7"),e("tAYT"),e("OABW"),e("mFIk"),e("zfln"),e("xlCC"),e("cEpd"),e("iYcO"),e("K4rI"),e("RzQK"),e("0ieb"),e("ig8J"),e("Spys"),e("AwFQ"),e("7aPT"),e("eL9S"),e("f6sT"),e("2+VW"),e("FIsb"),e("imd8"),e("iBDd"),e("MggJ"),e("FRoz"),e("o3wd"),e("t0tQ"),e("2a3G"),e("MxfZ"),e("aVEF"),e("hz4G"),e("/f8s"),e("Q0ES"),e("ttLD"),e("CacN"),e("Fv4m"),e("CayM"),e("3fCs"),e("Y6Nz"),e("XwxE"),e("V4Dj"),e("j6oL"),e("09sU"),e("QspU"),e("3kLt"),e("0Rd8"),e("6ENl"),e("pct4"),e("CgYg"),e("8v+1"),e("Ay1J"),e("3pMG"),e("U8PB"),e("una9"),e("wa90"),e("jryS"),e("36s8"),e("hzdg"),e("ufyd"),e("FOs+"),e("Cnhf"),e("EVRJ"),e("8gP8"),e("a2Ro"),e("uloL"),e("akCO"),e("SECZ"),e("z64H"),e("NGI1"),e("7olx"),e("8DZe"),e("87Oy"),e("mwAi"),e("0PpP"),e("oCs4"),e("eQkp"),e("fsg3"),e("be+4"),e("xrCu"),e("iQfx"),e("mjR7"),e("XMaS"),e("yhFC"),e("EqBf"),e("BEiu"),e("FbX5"),e("m1QB"),e("Lz+Y"),e("jB8l"),e("DyMJ"),e("Kuts"),e("85Db"),e("K61p"),e("XekJ"),e("0xpz"),e("W1oZ"),e("fMBi"),e("/xx+"),e("hL2X"),e("npGI"),e("Siuv")},FbX5:function(A,t){},FbdC:function(A,t){},"Fe/V":function(A,t){},FnWq:function(A,t){},Fv4m:function(A,t){},G2yn:function(A,t){},GAM8:function(A,t){},GCak:function(A,t,e){"use strict";e.d(t,"a",(function(){return i}));var n=e("E2bg"),s=e("SWU+");const i=(A,t,e,i,o,r,a,c,M,l)=>()=>{const u=new WeakMap;let h=null;return{render(g,m,p){const w=u.get(m);return void 0!==w?Promise.resolve(w):(async(g,m,p)=>{let w=null,Y=r(g);const d={channelCount:Y.channelCount,channelCountMode:Y.channelCountMode,channelInterpretation:Y.channelInterpretation},B={...d,coneInnerAngle:Y.coneInnerAngle,coneOuterAngle:Y.coneOuterAngle,coneOuterGain:Y.coneOuterGain,distanceModel:Y.distanceModel,maxDistance:Y.maxDistance,panningModel:Y.panningModel,refDistance:Y.refDistance,rolloffFactor:Y.rolloffFactor},D=Object(s.a)(Y,m);if("bufferSize"in Y)w=i(m,{...d,gain:1});else if(!D){const A={...B,orientationX:Y.orientationX.value,orientationY:Y.orientationY.value,orientationZ:Y.orientationZ.value,positionX:Y.positionX.value,positionY:Y.positionY.value,positionZ:Y.positionZ.value};Y=o(m,A)}if(u.set(m,null===w?Y:w),null!==w){if(null===h){if(null===a)throw new Error("Missing the native OfflineAudioContext constructor.");const A=new a(6,g.context.length,m.sampleRate),n=t(A,{channelCount:1,channelCountMode:"explicit",channelInterpretation:"speakers",numberOfInputs:6});n.connect(A.destination),h=(async()=>{const t=await Promise.all([g.orientationX,g.orientationY,g.orientationZ,g.positionX,g.positionY,g.positionZ].map(async(t,n)=>{const s=e(A,{channelCount:1,channelCountMode:"explicit",channelInterpretation:"discrete",offset:0===n?1:0});return await c(A,t,s.offset,p),s}));for(let A=0;A<6;A+=1)t[A].connect(n,0,A),t[A].start(0);return l(A)})()}const A=await h,n=i(m,{...d,gain:1});await M(g,m,n,p);const s=[];for(let t=0;t<A.numberOfChannels;t+=1)s.push(A.getChannelData(t));let r=[s[0][0],s[1][0],s[2][0]],u=[s[3][0],s[4][0],s[5][0]],Y=i(m,{...d,gain:1}),D=o(m,{...B,orientationX:r[0],orientationY:r[1],orientationZ:r[2],positionX:u[0],positionY:u[1],positionZ:u[2]});n.connect(Y).connect(D.inputs[0]),D.connect(w);for(let t=128;t<A.length;t+=128){const A=[s[0][t],s[1][t],s[2][t]],e=[s[3][t],s[4][t],s[5][t]];if(A.some((A,t)=>A!==r[t])||e.some((A,t)=>A!==u[t])){r=A,u=e;const s=t/m.sampleRate;Y.gain.setValueAtTime(0,s),Y=i(m,{...d,gain:0}),D=o(m,{...B,orientationX:r[0],orientationY:r[1],orientationZ:r[2],positionX:u[0],positionY:u[1],positionZ:u[2]}),Y.gain.setValueAtTime(1,s),n.connect(Y).connect(D.inputs[0]),D.connect(w)}}return w}return D?(await A(m,g.orientationX,Y.orientationX,p),await A(m,g.orientationY,Y.orientationY,p),await A(m,g.orientationZ,Y.orientationZ,p),await A(m,g.positionX,Y.positionX,p),await A(m,g.positionY,Y.positionY,p),await A(m,g.positionZ,Y.positionZ,p)):(await c(m,g.orientationX,Y.orientationX,p),await c(m,g.orientationY,Y.orientationY,p),await c(m,g.orientationZ,Y.orientationZ,p),await c(m,g.positionX,Y.positionX,p),await c(m,g.positionY,Y.positionY,p),await c(m,g.positionZ,Y.positionZ,p)),Object(n.a)(Y)?await M(g,m,Y.inputs[0],p):await M(g,m,Y,p),Y})(g,m,p)}}}},GOvI:function(A,t,e){"use strict";e.d(t,"a",(function(){return n}));const n=(A,t)=>(e,n,s,i)=>(A(n).replay(s),t(n,e,s,i))},GVtM:function(A,t,e){"use strict";e.d(t,"a",(function(){return n}));const n=()=>{try{return new DOMException("","DataCloneError")}catch(A){return A.code=25,A.name="DataCloneError",A}}},GjFq:function(A,t){},Gtqv:function(A,t,e){"use strict";e.d(t,"a",(function(){return n}));const n=A=>t=>{var e,n;t.copyFromChannel=(e=t.copyFromChannel,(n,s,i=0)=>{const o=A(i),r=A(s);if(o<t.length)return e.call(t,n,r,o)}),t.copyToChannel=(n=t.copyToChannel,(e,s,i=0)=>{const o=A(i),r=A(s);if(o<t.length)return n.call(t,e,r,o)})}},Gv9h:function(A,t){},Gyek:function(A,t,e){"use strict";e.d(t,"a",(function(){return n}));const n=(A,t,e,n)=>{let s=Object.getPrototypeOf(A);for(;!s.hasOwnProperty(t);)s=Object.getPrototypeOf(s);const{get:i,set:o}=Object.getOwnPropertyDescriptor(s,t);Object.defineProperty(A,t,{get:e(i),set:n(o)})}},H06S:function(A,t,e){"use strict";e.d(t,"a",(function(){return s}));var n=e("6MIv");const s=(A,t,e,s,i,o,r,a)=>(c,M)=>{const l=t.get(c);if(void 0===l)throw new Error("Missing the expected cycle count.");const u=o(c.context),h=a(u);if(l===M){if(t.delete(c),!h&&r(c)){const t=s(c),{outputs:o}=e(c);for(const e of o)if(Object(n.a)(e)){const n=s(e[0]);A(t,n,e[1],e[2])}else{const A=i(e[0]);t.connect(A,e[1])}}}else t.set(c,l-M)}},H10q:function(A,t){},HUSy:function(A,t,e){"use strict";e.d(t,"a",(function(){return n}));const n=A=>(t,e)=>{A(t).delete(e)}},He0i:function(A,t,e){"use strict";e.d(t,"a",(function(){return n}));const n=A=>()=>{if(null===A)return!1;let t;try{t=new A({latencyHint:"balanced"})}catch{return!1}return t.close(),!0}},HeOh:function(A,t){A.exports=function(A){if(Array.isArray(A))return A}},HnUV:function(A,t,e){"use strict";e.d(t,"a",(function(){return s}));var n=e("SWU+");const s=(A,t,e,s,i)=>o=>{const r=new WeakMap;return{render(a,c,M){const l=r.get(c);return void 0!==l?Promise.resolve(l):(async(a,c,M)=>{let l=e(a);const u=Object(n.a)(l,c);return u||(l=t(c,{channelCount:l.channelCount,channelCountMode:l.channelCountMode,channelInterpretation:l.channelInterpretation,delayTime:l.delayTime.value,maxDelayTime:o})),r.set(c,l),u?await A(c,a.delayTime,l.delayTime,M):await s(c,a.delayTime,l.delayTime,M),await i(a,c,l,M),l})(a,c,M)}}}},HsQ2:function(A,t,e){"use strict";e.d(t,"a",(function(){return n}));const n=A=>(t,e)=>{const n=A(t);return e(null!==n?n:t)}},HxUm:function(A,t,e){"use strict";e.d(t,"a",(function(){return n}));const n=A=>{var t;A.start=(t=A.start,(e=0,n=0,s)=>{const i=A.buffer,o=null===i?n:Math.min(i.duration,n);null!==i&&o>i.duration-.5/A.context.sampleRate?t.call(A,e,0,0):t.call(A,e,o,s)})}},"I/Ax":function(A,t){},I7Ur:function(A,t,e){"use strict";e.d(t,"a",(function(){return s}));var n=e("vM74");const s=A=>{var t;A.getChannelData=(t=A.getChannelData,e=>{try{return t.call(A,e)}catch(s){if(12===s.code)throw Object(n.a)();throw s}})}},IfRI:function(A,t){},ImzF:function(A,t,e){"use strict";e.d(t,"a",(function(){return n}));const n=A=>t=>null!==A&&t instanceof A},Iqnw:function(A,t){},IrIY:function(A,t){},"J+IU":function(A,t,e){"use strict";e.d(t,"a",(function(){return n}));const n=A=>null===A?null:A.hasOwnProperty("AudioContext")?A.AudioContext:A.hasOwnProperty("webkitAudioContext")?A.webkitAudioContext:null},J4wv:function(A,t,e){"use strict";e.d(t,"a",(function(){return s}));var n=e("dPZM");const s=(A,t,e)=>s=>{if("closed"===s.state&&null!==t&&"webkitAudioContext"!==t.name){if(!A(s)){const A=n.f.get(s);if(void 0!==A)return A;const e=new t;return n.f.set(s,e),e}{const A=n.f.get(s);if(void 0!==A)return A;if(null!==e){const A=new e(1,1,44100);return n.f.set(s,A),A}}}return null}},JNKn:function(A,t){},JOUb:function(A,t){},JRKu:function(A,t,e){"use strict";e.d(t,"a",(function(){return n}));const n=A=>{var t;A.start=(t=A.start,(e=0,n=0,s)=>{if("number"==typeof s&&s<0||n<0||e<0)throw new RangeError("The parameters can't be negative.");t.call(A,e,n,s)})}},JW3k:function(A,t,e){"use strict";e.d(t,"a",(function(){return s}));var n=e("zna5");const s=(A,t)=>(e,s)=>{const i=A(e,A=>A.createChannelMerger(s.numberOfInputs));return 1!==i.channelCount&&"explicit"!==i.channelCountMode&&t(e,i),Object(n.a)(i,s),i}},JWBP:function(A,t,e){"use strict";e.d(t,"a",(function(){return i}));var n=e("YvTh");const s={Q:1,channelCount:2,channelCountMode:"max",channelInterpretation:"speakers",detune:0,frequency:350,gain:0,type:"lowpass"},i=(A,t,e,i,o,r,a)=>class extends A{constructor(A,i=s){const c=r(A),M={...s,...i},l=o(c,M),u=a(c);super(A,!1,l,u?e():null),this._Q=t(this,u,l.Q,n.b,n.a),this._detune=t(this,u,l.detune,1200*Math.log2(n.b),-1200*Math.log2(n.b)),this._frequency=t(this,u,l.frequency,A.sampleRate/2,0),this._gain=t(this,u,l.gain,40*Math.log10(n.b),n.a),this._nativeBiquadFilterNode=l}get detune(){return this._detune}get frequency(){return this._frequency}get gain(){return this._gain}get Q(){return this._Q}get type(){return this._nativeBiquadFilterNode.type}set type(A){this._nativeBiquadFilterNode.type=A}getFrequencyResponse(A,t,e){if(this._nativeBiquadFilterNode.getFrequencyResponse(A,t,e),A.length!==t.length||t.length!==e.length)throw i()}}},Ja0U:function(A,t){},"Jm+O":function(A,t){},Jp3e:function(A,t,e){"use strict";e.d(t,"a",(function(){return s}));var n=e("I7Ur");const s=(A,t,e,s,i,o,r,a,c,M,l,u,h)=>(g,m)=>{const p=r(g)?g:o(g);if(i.has(m)){const A=e();return Promise.reject(A)}try{i.add(m)}catch{}return t(l,()=>l(p))?("closed"===p.state&&null!==c&&a(p)?new c(1,1,p.sampleRate):p).decodeAudioData(m).catch(A=>{if(A instanceof DOMException&&"NotSupportedError"===A.name)throw new TypeError;throw A}).then(e=>(t(M,()=>M(e))||h(e),A.add(e),e)):new Promise((t,e)=>{const i=()=>{try{(A=>{const{port1:t}=new MessageChannel;t.postMessage(A,[A])})(m)}catch{}},o=A=>{e(A),i()};try{p.decodeAudioData(m,e=>{"function"!=typeof e.copyFromChannel&&(u(e),Object(n.a)(e)),A.add(e),i(),t(e)},A=>{o(null===A?s():A)})}catch(r){o(r)}})}},Jxv9:function(A,t){},"K+UH":function(A,t){},"K+wZ":function(A,t){},K3jZ:function(A,t){},K4rI:function(A,t){},K5Cn:function(A,t){},K61p:function(A,t){},KB5y:function(A,t){},KCvN:function(A,t){},KDjb:function(A,t){},KDtT:function(A,t,e){"use strict";e.d(t,"a",(function(){return i}));var n=e("E2bg"),s=e("SWU+");const i=(A,t,e)=>()=>{const i=new WeakMap;return{render(o,r,a){const c=i.get(r);return void 0!==c?Promise.resolve(c):(async(o,r,a)=>{let c=t(o);return Object(s.a)(c,r)||(c=A(r,{channelCount:c.channelCount,channelCountMode:c.channelCountMode,channelInterpretation:c.channelInterpretation,curve:c.curve,oversample:c.oversample})),i.set(r,c),Object(n.a)(c)?await e(o,r,c.inputs[0],a):await e(o,r,c,a),c})(o,r,a)}}}},KNpT:function(A,t,e){"use strict";e.d(t,"a",(function(){return n}));const n=(A,t,e,n,s,i)=>(o,r,a,c,M,l)=>{if(null!==a)try{const e=t(o,A=>new a(A,c,l)),s=new Map;let r=null;if(Object.defineProperties(e,{channelCount:{get:()=>l.channelCount,set:()=>{throw A()}},channelCountMode:{get:()=>"explicit",set:()=>{throw A()}},onprocessorerror:{get:()=>r,set:A=>{"function"==typeof r&&e.removeEventListener("processorerror",r),r="function"==typeof A?A:null,"function"==typeof r&&e.addEventListener("processorerror",r)}}}),e.addEventListener=(h=e.addEventListener,(...A)=>{if("processorerror"===A[0]){const t="function"==typeof A[1]?A[1]:"object"==typeof A[1]&&null!==A[1]&&"function"==typeof A[1].handleEvent?A[1].handleEvent:null;if(null!==t){const e=s.get(A[1]);void 0!==e?A[1]=e:(A[1]=e=>{t(new ErrorEvent(A[0],{...e,error:new Error}))},s.set(t,A[1]))}}return h.call(e,A[0],A[1],A[2])}),e.removeEventListener=(u=e.removeEventListener,(...A)=>{if("processorerror"===A[0]){const t=s.get(A[1]);void 0!==t&&(s.delete(A[1]),A[1]=t)}return u.call(e,A[0],A[1],A[2])}),0!==l.numberOfOutputs){const A=n(o,{channelCount:1,channelCountMode:"explicit",channelInterpretation:"discrete",gain:0});return e.connect(A).connect(A.context.destination),i(e,()=>A.disconnect(),()=>A.connect(A.context.destination))}return e}catch(g){if(11===g.code)throw s();throw g}var u,h;if(void 0===M)throw s();return(A=>{const{port1:t}=new MessageChannel;try{t.postMessage(A)}finally{t.close()}})(l),e(o,r,M,l)}},KVsz:function(A,t){},Knm5:function(A,t,e){"use strict";e.d(t,"a",(function(){return i}));var n=e("dPZM"),s=e("XXdY");const i=A=>Object(s.a)(n.b,A)},Ktyc:function(A,t){},Kuts:function(A,t){},KyTj:function(A,t){},KyWW:function(A,t){},"L+VK":function(A,t,e){"use strict";e.d(t,"a",(function(){return s}));var n=e("E2bg");const s=(A,t,e,s)=>{if(Object(n.a)(t)){const n=t.inputs[s];return A.connect(n,e,0),[n,e,0]}return A.connect(t,e,s),[t,e,s]}},L0Wg:function(A,t){},L5Qq:function(A,t,e){"use strict";e.d(t,"a",(function(){return i}));var n=e("dPZM"),s=e("Anyo");const i=A=>{if(n.a.has(A))throw new Error("The AudioNode is already stored.");n.a.add(A),Object(s.a)(A).forEach(A=>A(!0))}},LJTL:function(A,t){},LTjf:function(A,t){},LYLx:function(A,t){},LhgQ:function(A,t){},Ln7M:function(A,t){},LnEw:function(A,t){},Lnet:function(A,t){},LtPi:function(A,t){},Lvye:function(A,t){},"Lz+Y":function(A,t){},LzqH:function(A,t){},"M/IH":function(A,t){},M0gW:function(A,t,e){"use strict";e.d(t,"a",(function(){return i}));var n=e("zna5"),s=e("UBqq");const i=(A,t,e,i,o,r)=>(a,{curve:c,oversample:M,...l})=>{const u=e(a,A=>A.createWaveShaper()),h=e(a,A=>A.createWaveShaper());Object(n.a)(u,l),Object(n.a)(h,l);const g=i(a,{...l,gain:1}),m=i(a,{...l,gain:-1}),p=i(a,{...l,gain:1}),w=i(a,{...l,gain:-1});let Y=null,d=!1,B=null;const D={get bufferSize(){},get channelCount(){return u.channelCount},set channelCount(A){g.channelCount=A,m.channelCount=A,u.channelCount=A,p.channelCount=A,h.channelCount=A,w.channelCount=A},get channelCountMode(){return u.channelCountMode},set channelCountMode(A){g.channelCountMode=A,m.channelCountMode=A,u.channelCountMode=A,p.channelCountMode=A,h.channelCountMode=A,w.channelCountMode=A},get channelInterpretation(){return u.channelInterpretation},set channelInterpretation(A){g.channelInterpretation=A,m.channelInterpretation=A,u.channelInterpretation=A,p.channelInterpretation=A,h.channelInterpretation=A,w.channelInterpretation=A},get context(){return u.context},get curve(){return B},set curve(e){if(null!==c&&c.length<2)throw t();if(null===e)u.curve=e,h.curve=e;else{const A=e.length,t=new Float32Array(A+2-A%2),n=new Float32Array(A+2-A%2);t[0]=e[0],n[0]=-e[A-1];const s=Math.ceil((A+1)/2),i=(A+1)/2-1;for(let o=1;o<s;o+=1){const r=o/s*i,a=Math.floor(r),c=Math.ceil(r);t[o]=a===c?e[a]:(1-(r-a))*e[a]+(1-(c-r))*e[c],n[o]=a===c?-e[A-1-a]:-(1-(r-a))*e[A-1-a]-(1-(c-r))*e[A-1-c]}t[s]=A%2==1?e[s-1]:(e[s-2]+e[s-1])/2,u.curve=t,h.curve=n}B=e,d&&(o(B)&&null===Y?Y=A(a,g):null!==Y&&(Y(),Y=null))},get inputs(){return[g]},get numberOfInputs(){return u.numberOfInputs},get numberOfOutputs(){return u.numberOfOutputs},get oversample(){return u.oversample},set oversample(A){u.oversample=A,h.oversample=A},addEventListener:(...A)=>g.addEventListener(A[0],A[1],A[2]),dispatchEvent:(...A)=>g.dispatchEvent(A[0]),removeEventListener:(...A)=>g.removeEventListener(A[0],A[1],A[2])};return c!==D.curve&&(D.curve=c),M!==D.oversample&&(D.oversample=M),r(Object(s.a)(D,p),()=>{g.connect(u).connect(p),g.connect(m).connect(h).connect(w).connect(p),d=!0,o(B)&&(Y=A(a,g))},()=>{g.disconnect(u),u.disconnect(p),g.disconnect(m),m.disconnect(h),h.disconnect(w),w.disconnect(p),d=!1,null!==Y&&(Y(),Y=null)})}},M7jd:function(A,t){},"M9/c":function(A,t){},ME4u:function(A,t,e){"use strict";e.d(t,"a",(function(){return i}));var n=e("dPZM"),s=e("XXdY");const i=A=>Object(s.a)(n.c,A)},MHRE:function(A,t){},MHXu:function(A,t,e){"use strict";e.d(t,"a",(function(){return s}));const n={channelCount:2,channelCountMode:"explicit",channelInterpretation:"speakers"},s=(A,t,e,s)=>class extends A{constructor(A,i=n){const o=e(A);if(s(o))throw new TypeError;const r={...n,...i},a=t(o,r);super(A,!1,a,null),this._nativeMediaStreamAudioDestinationNode=a}get stream(){return this._nativeMediaStreamAudioDestinationNode.stream}}},MNHC:function(A,t,e){"use strict";e.d(t,"a",(function(){return i}));var n=e("5ThQ");const s={numberOfChannels:1},i=(A,t,e,i,o)=>class extends A{constructor(A,e,o){let r;if("number"==typeof A&&void 0!==e&&void 0!==o)r={length:e,numberOfChannels:A,sampleRate:o};else{if("object"!=typeof A)throw new Error("The given parameters are not valid.");r=A}const{length:a,numberOfChannels:c,sampleRate:M}={...s,...r},l=i(c,a,M);t(n.a,()=>Object(n.a)(l))||l.addEventListener("statechange",(()=>{let A=0;const t=e=>{"running"===this._state&&(A>0?(l.removeEventListener("statechange",t),e.stopImmediatePropagation(),this._waitForThePromiseToSettle(e)):A+=1)};return t})()),super(l,c),this._length=a,this._nativeOfflineAudioContext=l,this._state=null}get length(){return void 0===this._nativeOfflineAudioContext.length?this._length:this._nativeOfflineAudioContext.length}get state(){return null===this._state?this._nativeOfflineAudioContext.state:this._state}startRendering(){return"running"===this._state?Promise.reject(e()):(this._state="running",o(this.destination,this._nativeOfflineAudioContext).then(A=>(this._state=null,A)).catch(A=>{throw this._state=null,A}))}_waitForThePromiseToSettle(A){null===this._state?this._nativeOfflineAudioContext.dispatchEvent(A):setTimeout(()=>this._waitForThePromiseToSettle(A))}}},MT5e:function(A,t){},MUSt:function(A,t,e){"use strict";e.d(t,"a",(function(){return s}));var n=e("SWU+");const s=(A,t,e,s,i)=>()=>{const o=new WeakMap;let r=null,a=null;return{set start(A){r=A},set stop(A){a=A},render(c,M,l){const u=o.get(M);return void 0!==u?Promise.resolve(u):(async(c,M,l)=>{let u=e(c);const h=Object(n.a)(u,M);return h||(u=t(M,{channelCount:u.channelCount,channelCountMode:u.channelCountMode,channelInterpretation:u.channelInterpretation,offset:u.offset.value}),null!==r&&u.start(r),null!==a&&u.stop(a)),o.set(M,u),h?await A(M,c.offset,u.offset,l):await s(M,c.offset,u.offset,l),await i(c,M,u,l),u})(c,M,l)}}}},MUal:function(A,t){},MZD8:function(A,t){},Mbz0:function(A,t){},Memb:function(A,t){},MggJ:function(A,t){},"Mm+Y":function(A,t){},MxfZ:function(A,t){},"N/99":function(A,t,e){"use strict";e.d(t,"a",(function(){return n}));const n=A=>{try{A.copyToChannel(new Float32Array(1),0,-1)}catch{return!1}return!0}},N3Uc:function(A,t,e){"use strict";e.d(t,"a",(function(){return n}));const n=(A,t)=>()=>{if(null===t)return!1;const e=new t(1,1,44100),n=A(e,A=>A.createChannelMerger());if("max"===n.channelCountMode)return!0;try{n.channelCount=2}catch{return!0}return!1}},NGI1:function(A,t){},NGPt:function(A,t,e){"use strict";e.d(t,"a",(function(){return n}));const n=A=>()=>{if(null===A)return!1;const t=new A(1,1,44100).createGain(),e=t.connect(t)===t;return t.disconnect(t),e}},NN06:function(A,t){function e(A,t){for(var e=0;e<t.length;e++){var n=t[e];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(A,n.key,n)}}A.exports=function(A,t,n){return t&&e(A.prototype,t),n&&e(A,n),A}},NPXZ:function(A,t){},NT2r:function(A,t){},NfdS:function(A,t,e){"use strict";e.d(t,"a",(function(){return n}));const n=A=>t=>new Promise((e,n)=>{if(null===A)return void n(new SyntaxError);const s=A.document.head;if(null===s)n(new SyntaxError);else{const i=A.document.createElement("script"),o=new Blob([t],{type:"application/javascript"}),r=URL.createObjectURL(o),a=A.onerror,c=()=>{A.onerror=a,URL.revokeObjectURL(r)};A.onerror=(t,e,s,i,o)=>e===r||e===A.location.href&&1===s&&1===i?(c(),n(o),!1):null!==a?a(t,e,s,i,o):void 0,i.onerror=()=>{c(),n(new SyntaxError)},i.onload=()=>{c(),e()},i.src=r,i.type="module",s.appendChild(i)}})},Nhr7:function(A,t,e){"use strict";e.d(t,"a",(function(){return n}));const n=()=>{try{return new DOMException("","InvalidAccessError")}catch(A){return A.code=15,A.name="InvalidAccessError",A}}},NjMd:function(A,t,e){"use strict";e.d(t,"a",(function(){return n}));const n=(A,t,e)=>(n,{mediaStreamTrack:s})=>t(n,"function"==typeof n.createMediaStreamTrackSource?A=>A.createMediaStreamTrackSource(s):t=>{const n=new MediaStream([s]),i=t.createMediaStreamSource(n);if("audio"!==s.kind)throw A();if(e(t))throw new TypeError;return i})},Np68:function(A,t){},NzhG:function(A,t,e){"use strict";e.d(t,"a",(function(){return i}));var n=e("5Bs9"),s=e("SWU+");const i=(A,t,e,i,o,r)=>(a,c)=>{const M=new WeakMap;let l=null;return{render(u,h,g){const m=M.get(h);return void 0!==m?Promise.resolve(m):(async(u,h,g)=>{let m=null,p=e(u);const w=Object(s.a)(p,h);if(void 0===h.createIIRFilter?m=A(h,{buffer:null,channelCount:2,channelCountMode:"max",channelInterpretation:"speakers",loop:!1,loopEnd:0,loopStart:0,playbackRate:1}):w||(p=t(h,A=>A.createIIRFilter(c,a))),M.set(h,null===m?p:m),null!==m){if(null===l){if(null===i)throw new Error("Missing the native OfflineAudioContext constructor.");const A=new i(u.context.destination.channelCount,u.context.length,h.sampleRate);l=(async()=>(await o(u,A,A.destination,g),((A,t,e,s)=>{const i=e.length,o=s.length,r=Math.min(i,o);if(1!==e[0]){for(let A=0;A<i;A+=1)s[A]/=e[0];for(let A=1;A<o;A+=1)e[A]/=e[0]}const a=new Float32Array(32),c=new Float32Array(32),M=t.createBuffer(A.numberOfChannels,A.length,A.sampleRate),l=A.numberOfChannels;for(let u=0;u<l;u+=1){const t=A.getChannelData(u),l=M.getChannelData(u);a.fill(0),c.fill(0),Object(n.a)(e,i,s,o,r,a,c,0,32,t,l)}return M})(await r(A),h,a,c)))()}const A=await l;return m.buffer=A,m.start(0),m}return await o(u,h,p,g),p})(u,h,g)}}}},Nzsy:function(A,t){},O0e7:function(A,t){},"O3/C":function(A,t){},O4WP:function(A,t,e){"use strict";e.d(t,"a",(function(){return n}));const n=(A,t,e)=>async(n,s,i,o)=>{const r=A(n),a=[...o,n];await Promise.all(r.activeInputs.map((A,o)=>Array.from(A).filter(([A])=>!a.includes(A)).map(async([A,r])=>{const c=t(A),M=await c.render(A,s,a),l=n.context.destination;e(A)||n===l&&e(n)||M.connect(i,r,o)})).reduce((A,t)=>[...A,...t],[]))}},O69r:function(A,t){},OABW:function(A,t){},ODTT:function(A,t){},ODiM:function(A,t){},Okwt:function(A,t){},Oy2c:function(A,t){},OyKv:function(A,t){},P50y:function(A,t){},P5CY:function(A,t,e){"use strict";e.d(t,"a",(function(){return c}));var n=e("Y/Aa"),s=e("jvfW"),i=e("zna5"),o=e("4JRa"),r=e("JRKu"),a=e("kk/u");const c=(A,t,e,c,M,l,u,h,g,m,p,w,Y)=>(d,B)=>{const D=e(d,A=>A.createBufferSource());return Object(i.a)(D,B),Object(n.a)(D,B,"playbackRate"),Object(s.a)(D,B,"buffer"),Object(s.a)(D,B,"loop"),Object(s.a)(D,B,"loopEnd"),Object(s.a)(D,B,"loopStart"),t(c,()=>c(d))||(A=>{A.start=(t=>{let e=!1;return(n=0,s=0,i)=>{if(e)throw Object(o.a)();t.call(A,n,s,i),e=!0}})(A.start)})(D),t(M,M)||((A,t)=>{let e=Number.POSITIVE_INFINITY,n=Number.POSITIVE_INFINITY;var s,i;A.start=(s=A.start,i=A.stop,(o=0,r=0,a=Number.POSITIVE_INFINITY)=>{if(s.call(A,o,r),a>=0&&a<Number.POSITIVE_INFINITY){const s=Math.max(o,t.currentTime);e=s+a/A.playbackRate.value,i.call(A,Math.min(e,n))}}),A.stop=(s=>(i=0)=>{n=Math.max(i,t.currentTime),s.call(A,Math.min(e,n))})(A.stop)})(D,d),t(l,()=>l(d))||p(D),t(u,()=>u(d))||w(D,d),t(h,()=>h(d))||Object(r.a)(D),t(g,()=>g(d))||Y(D,d),t(m,()=>m(d))||Object(a.a)(D),A(d,D),D}},P6gU:function(A,t){},PC9b:function(A,t){},PMuG:function(A,t,e){"use strict";e.d(t,"a",(function(){return s}));var n=e("dPZM");const s=A=>n.h.has(A)},PUN7:function(A,t,e){"use strict";e.d(t,"a",(function(){return i}));var n=e("kho+");const s=(A,t,e)=>{const n=t[e];if(void 0===n)throw A();return n},i=A=>(t,e,i,o=0)=>void 0===e?t.forEach(A=>A.disconnect()):"number"==typeof e?s(A,t,e).disconnect():Object(n.a)(e)?void 0===i?t.forEach(A=>A.disconnect(e)):void 0===o?s(A,t,i).disconnect(e,0):s(A,t,i).disconnect(e,0,o):void 0===i?t.forEach(A=>A.disconnect(e)):s(A,t,i).disconnect(e,0)},PUze:function(A,t){},"Pj1+":function(A,t,e){"use strict";e.d(t,"a",(function(){return n}));const n=(A,t)=>e=>{e.copyFromChannel=(n,s,i=0)=>{const o=A(i),r=A(s);if(r>=e.numberOfChannels)throw t();const a=e.length,c=e.getChannelData(r),M=n.length;for(let A=o<0?-o:0;A+o<a&&A<M;A+=1)n[A]=c[A+o]},e.copyToChannel=(n,s,i=0)=>{const o=A(i),r=A(s);if(r>=e.numberOfChannels)throw t();const a=e.length,c=e.getChannelData(r),M=n.length;for(let A=o<0?-o:0;A+o<a&&A<M;A+=1)c[A+o]=n[A]}}},Pxbj:function(A,t,e){"use strict";e.d(t,"a",(function(){return l}));var n=e("0A78"),s=e("z++k"),i=e("8Bhq"),o=e("Knm5"),r=e("dPZM"),a=e("ME4u"),c=e("XXdY"),M=e("SWU+");const l=(A,t,e,l,u,h,g,m,p,w,Y,d,B,D,G,C)=>(E,I,y)=>{const Q=new WeakMap;let Z=null;return{render(T,k,S){m(k,T);const z=Q.get(k);return void 0!==z?Promise.resolve(z):(async(m,T,k)=>{let S=Y(m),z=null;const U=Object(M.a)(S,T);if(null===d){const A=I.outputChannelCount.reduce((A,t)=>A+t,0),e=u(T,{channelCount:Math.max(1,A),channelCountMode:"explicit",channelInterpretation:"discrete",numberOfOutputs:Math.max(1,A)}),n=[];for(let t=0;t<m.numberOfOutputs;t+=1)n.push(l(T,{channelCount:1,channelCountMode:"explicit",channelInterpretation:"speakers",numberOfInputs:I.outputChannelCount[t]}));const s=g(T,{channelCount:I.channelCount,channelCountMode:I.channelCountMode,channelInterpretation:I.channelInterpretation,gain:1});s.connect=t.bind(null,n),s.disconnect=p.bind(null,n),z=[e,n,s]}else U||(S=new d(T,E));if(Q.set(T,null===z?S:z[2]),null!==z){if(null===Z){if(void 0===y)throw new Error("Missing the processor constructor.");if(null===B)throw new Error("Missing the native OfflineAudioContext constructor.");const A=m.channelCount*m.numberOfInputs,t=void 0===y.parameterDescriptors?0:y.parameterDescriptors.length,e=A+t,M=async()=>{const n=new B(e,128*Math.ceil(m.context.length/128),T.sampleRate),s=[],i=[];for(let A=0;A<I.numberOfInputs;A+=1)s.push(g(n,{channelCount:I.channelCount,channelCountMode:I.channelCountMode,channelInterpretation:I.channelInterpretation,gain:1})),i.push(u(n,{channelCount:I.channelCount,channelCountMode:"explicit",channelInterpretation:"discrete",numberOfOutputs:I.channelCount}));const o=await Promise.all(Array.from(m.parameters.values()).map(async A=>{const t=h(n,{channelCount:1,channelCountMode:"explicit",channelInterpretation:"discrete",offset:A.value});return await D(n,A,t.offset,k),t})),r=l(n,{channelCount:1,channelCountMode:"explicit",channelInterpretation:"speakers",numberOfInputs:Math.max(1,A+t)});for(let A=0;A<I.numberOfInputs;A+=1){s[A].connect(i[A]);for(let t=0;t<I.channelCount;t+=1)i[A].connect(r,t,A*I.channelCount+t)}for(const[t,e]of o.entries())e.connect(r,0,A+t),e.start(0);return r.connect(n.destination),await Promise.all(s.map(A=>G(m,n,A,k))),C(n)};Z=(async(A,t,e,M,l,u)=>{const h=null===t?128*Math.ceil(A.context.length/128):t.length,g=M.channelCount*M.numberOfInputs,m=M.outputChannelCount.reduce((A,t)=>A+t,0),p=0===m?null:e.createBuffer(m,h,e.sampleRate);if(void 0===l)throw new Error("Missing the processor constructor.");const w=Object(o.a)(A),Y=await((A,t)=>{const e=Object(c.a)(r.k,A),n=Object(a.a)(t);return Object(c.a)(e,n)})(e,A),d=Object(i.a)(M.numberOfInputs,M.channelCount),B=Object(i.a)(M.numberOfOutputs,M.outputChannelCount),D=Array.from(A.parameters.keys()).reduce((A,t)=>({...A,[t]:new Float32Array(128)}),{});for(let i=0;i<h;i+=128){if(M.numberOfInputs>0&&null!==t)for(let A=0;A<M.numberOfInputs;A+=1)for(let e=0;e<M.channelCount;e+=1)Object(n.a)(t,d[A],e,e,i);void 0!==l.parameterDescriptors&&null!==t&&l.parameterDescriptors.forEach(({name:A},e)=>{Object(n.a)(t,D,A,g+e,i)});for(let A=0;A<M.numberOfInputs;A+=1)for(let t=0;t<M.outputChannelCount[A];t+=1)0===B[A][t].byteLength&&(B[A][t]=new Float32Array(128));try{const A=d.map((A,t)=>0===w.activeInputs[t].size?[]:A),t=u(i/e.sampleRate,e.sampleRate,()=>Y.process(A,B,D));if(null!==p)for(let e=0,n=0;e<M.numberOfOutputs;e+=1){for(let A=0;A<M.outputChannelCount[e];A+=1)Object(s.a)(p,B[e],A,n+A,i);n+=M.outputChannelCount[e]}if(!t)break}catch(G){A.dispatchEvent(new ErrorEvent("processorerror",{error:G}));break}}return p})(m,0===e?null:await M(),T,I,y,w)}const A=await Z,t=e(T,{buffer:null,channelCount:2,channelCountMode:"max",channelInterpretation:"speakers",loop:!1,loopEnd:0,loopStart:0,playbackRate:1}),[M,p,Y]=z;null!==A&&(t.buffer=A,t.start(0)),t.connect(M);for(let e=0,n=0;e<m.numberOfOutputs;e+=1){const A=p[e];for(let t=0;t<I.outputChannelCount[e];t+=1)M.connect(A,n+t,t);n+=I.outputChannelCount[e]}return Y}if(U)for(const[t,e]of m.parameters.entries())await A(T,e,S.parameters.get(t),k);else for(const[A,t]of m.parameters.entries())await D(T,t,S.parameters.get(A),k);return await G(m,T,S,k),S})(T,k,S)}}}},"Q/fG":function(A,t){},Q0ES:function(A,t){},QAC8:function(A,t){},QDZq:function(A,t){},QEju:function(A,t){},QPCC:function(A,t){},QiZ9:function(A,t,e){"use strict";e.d(t,"a",(function(){return n}));const n=A=>class{constructor(A){this._nativeEventTarget=A,this._listeners=new WeakMap}addEventListener(t,e,n){if(null!==e){let s=this._listeners.get(e);void 0===s&&(s=A(this,e),"function"==typeof e&&this._listeners.set(e,s)),this._nativeEventTarget.addEventListener(t,s,n)}}dispatchEvent(A){return this._nativeEventTarget.dispatchEvent(A)}removeEventListener(A,t,e){const n=null===t?void 0:this._listeners.get(t);this._nativeEventTarget.removeEventListener(A,void 0===n?null:n,e)}}},QpvO:function(A,t){},QspU:function(A,t){},QtzU:function(A,t){},"Qvq/":function(A,t){},Qx09:function(A,t){},R91R:function(A,t){},RB0Y:function(A,t){},RG43:function(A,t){},RLnm:function(A,t){},Re9m:function(A,t){},RqEH:function(A,t,e){"use strict";e.d(t,"a",(function(){return i}));var n=e("Y/Aa"),s=e("zna5");const i=A=>(t,e)=>{const i=A(t,A=>A.createDelay(e.maxDelayTime));return Object(s.a)(i,e),Object(n.a)(i,e,"delayTime"),i}},RwaT:function(A,t){},RzQK:function(A,t){},S7Dm:function(A,t,e){"use strict";e.d(t,"a",(function(){return n}));const n=A=>()=>{if(null===A)return!1;try{new A({length:1,sampleRate:44100})}catch{return!1}return!0}},S8lH:function(A,t){},S9Gp:function(A,t,e){"use strict";e.d(t,"a",(function(){return r}));var n=e("YvTh"),s=e("L5Qq"),i=e("rl1c");const o={channelCount:2,channelCountMode:"max",channelInterpretation:"speakers",offset:1},r=(A,t,e,r,a,c,M)=>class extends A{constructor(A,s=o){const i=a(A),M={...o,...s},l=r(i,M),u=c(i),h=u?e():null;super(A,!1,l,h),this._constantSourceNodeRenderer=h,this._nativeConstantSourceNode=l,this._offset=t(this,u,l.offset,n.b,n.a),this._onended=null}get offset(){return this._offset}get onended(){return this._onended}set onended(A){const t="function"==typeof A?M(this,A):null;this._nativeConstantSourceNode.onended=t;const e=this._nativeConstantSourceNode.onended;this._onended=null!==e&&e===t?A:e}start(A=0){if(this._nativeConstantSourceNode.start(A),null!==this._constantSourceNodeRenderer)this._constantSourceNodeRenderer.start=A;else{Object(s.a)(this);const A=()=>{this._nativeConstantSourceNode.removeEventListener("ended",A),setTimeout(()=>Object(i.a)(this),1e3)};this._nativeConstantSourceNode.addEventListener("ended",A)}}stop(A=0){this._nativeConstantSourceNode.stop(A),null!==this._constantSourceNodeRenderer&&(this._constantSourceNodeRenderer.stop=A)}}},SECZ:function(A,t){},SJaf:function(A,t,e){"use strict";e.d(t,"a",(function(){return i}));var n=e("Y/Aa"),s=e("zna5");const i=(A,t)=>(e,i)=>{const o=A(e,A=>A.createDynamicsCompressor());if(Object(s.a)(o,i),i.channelCount>2)throw t();if("max"===i.channelCountMode)throw t();return Object(n.a)(o,i,"attack"),Object(n.a)(o,i,"knee"),Object(n.a)(o,i,"ratio"),Object(n.a)(o,i,"release"),Object(n.a)(o,i,"threshold"),o}},SNoo:function(A,t,e){var n=e("HeOh"),s=e("/TJp"),i=e("Eq7A"),o=e("1PgL");A.exports=function(A,t){return n(A)||s(A,t)||i(A,t)||o()}},"SWU+":function(A,t,e){"use strict";e.d(t,"a",(function(){return n}));const n=(A,t)=>A.context===t},Siuv:function(A,t){},Sprd:function(A,t){},Spys:function(A,t){},Ssr9:function(A,t){},SwBP:function(A,t){},T4RW:function(A,t){},T4nf:function(A,t){},THaK:function(A,t){},Tatq:function(A,t,e){"use strict";e.d(t,"a",(function(){return i}));var n=e("dPZM"),s=e("XXdY");const i=A=>Object(s.a)(n.d,A)},TgX4:function(A,t){},Tquh:function(A,t,e){"use strict";e.d(t,"a",(function(){return s}));var n=e("4JRa");const s=A=>t=>{const e=A.get(t);if(void 0===e)throw Object(n.a)();return e}},"Tt/L":function(A,t){},U7bI:function(A,t){},U8PB:function(A,t){},UBqq:function(A,t,e){"use strict";e.d(t,"a",(function(){return n}));const n=(A,t)=>(A.connect=t.connect.bind(t),A.disconnect=t.disconnect.bind(t),A)},UDZG:function(A,t,e){"use strict";e.d(t,"a",(function(){return i}));var n=e("5ThQ");const s={numberOfChannels:1},i=(A,t,e,i,o)=>class extends i{constructor(t){const{length:i,numberOfChannels:o,sampleRate:r}={...s,...t},a=e(o,i,r);A(n.a,()=>Object(n.a)(a))||a.addEventListener("statechange",(()=>{let A=0;const t=e=>{"running"===this._state&&(A>0?(a.removeEventListener("statechange",t),e.stopImmediatePropagation(),this._waitForThePromiseToSettle(e)):A+=1)};return t})()),super(a,o),this._length=i,this._nativeOfflineAudioContext=a,this._state=null}get length(){return void 0===this._nativeOfflineAudioContext.length?this._length:this._nativeOfflineAudioContext.length}get state(){return null===this._state?this._nativeOfflineAudioContext.state:this._state}startRendering(){return"running"===this._state?Promise.reject(t()):(this._state="running",o(this.destination,this._nativeOfflineAudioContext).then(A=>(this._state=null,A)).catch(A=>{throw this._state=null,A}))}_waitForThePromiseToSettle(A){null===this._state?this._nativeOfflineAudioContext.dispatchEvent(A):setTimeout(()=>this._waitForThePromiseToSettle(A))}}},UGPt:function(A,t){},UHJ0:function(A,t){},USJF:function(A,t){},USvv:function(A,t,e){"use strict";e.d(t,"a",(function(){return r}));var n=e("dPZM"),s=e("nIXe");const i={channelCount:2,channelCountMode:"explicit",channelInterpretation:"speakers",numberOfInputs:1,numberOfOutputs:1,outputChannelCount:void 0,parameterData:{},processorOptions:{}},o=A=>{const t=[];for(let e=0;e<A;e+=1)t.push(1);return t},r=(A,t,e,r,a,c,M,l,u)=>class extends t{constructor(t,u,h=i){const g=c(t),m=M(g),p=(A=>({...A,outputChannelCount:void 0!==A.outputChannelCount?A.outputChannelCount:1===A.numberOfInputs&&1===A.numberOfOutputs?[A.channelCount]:o(A.numberOfOutputs)}))({...i,...h}),w=n.j.get(g),Y=void 0===w?void 0:w.get(u),d=a(g,m?null:t.baseLatency,l,u,Y,p);super(t,!0,d,m?r(u,p,Y):null);const B=[];d.parameters.forEach((A,t)=>{const n=e(this,m,A);B.push([t,n])}),this._nativeAudioWorkletNode=d,this._onprocessorerror=null,this._parameters=new s.a(B),m&&A(g,this)}get onprocessorerror(){return this._onprocessorerror}set onprocessorerror(A){const t="function"==typeof A?u(this,A):null;this._nativeAudioWorkletNode.onprocessorerror=t;const e=this._nativeAudioWorkletNode.onprocessorerror;this._onprocessorerror=null!==e&&e===t?A:e}get parameters(){return null===this._parameters?this._nativeAudioWorkletNode.parameters:this._parameters}get port(){return this._nativeAudioWorkletNode.port}}},"Uah+":function(A,t){},UmtS:function(A,t,e){"use strict";e.d(t,"a",(function(){return n}));const n=A=>()=>{if(null===A)return!1;const t=new A;try{return t.createMediaStreamSource(new MediaStream),!1}catch(e){return!0}}},Unpf:function(A,t,e){"use strict";e.d(t,"a",(function(){return o}));var n=e("N/99"),s=e("I7Ur");const i={numberOfChannels:1},o=(A,t,e,o,r,a,c,M)=>{let l=null;return class u{constructor(u){if(null===r)throw new Error("Missing the native OfflineAudioContext constructor.");const{length:h,numberOfChannels:g,sampleRate:m}={...i,...u};null===l&&(l=new r(1,1,44100));const p=null!==o&&t(a,a)?new o({length:h,numberOfChannels:g,sampleRate:m}):l.createBuffer(g,h,m);if(0===p.numberOfChannels)throw e();return"function"!=typeof p.copyFromChannel?(c(p),Object(s.a)(p)):t(n.a,()=>Object(n.a)(p))||M(p),A.add(p),p}static[Symbol.hasInstance](t){return null!==t&&"object"==typeof t&&Object.getPrototypeOf(t)===u.prototype||A.has(t)}}}},Uudy:function(A,t){},Uyz6:function(A,t,e){"use strict";e.d(t,"a",(function(){return n}));const n=(A,t)=>(e,n,s)=>{if(null===t)throw new Error("Missing the native OfflineAudioContext constructor.");try{return new t(e,n,s)}catch(i){if("IndexSizeError"===i.name||"SyntaxError"===i.name)throw A();throw i}}},"V/Dp":function(A,t){},V23g:function(A,t){},V4Dj:function(A,t){},VCgJ:function(A,t,e){"use strict";e.d(t,"a",(function(){return n}));const n=A=>(t,{mediaStream:e})=>{const n=e.getAudioTracks(),s=A(t,A=>{const t=n.sort((A,t)=>A.id<t.id?-1:A.id>t.id?1:0).slice(0,1);return A.createMediaStreamSource(new MediaStream(t))});return Object.defineProperty(s,"mediaStream",{value:e}),s}},VLrm:function(A,t,e){"use strict";e.d(t,"a",(function(){return s}));const n={channelCount:6,channelCountMode:"explicit",channelInterpretation:"discrete",numberOfOutputs:6},s=(A,t,e,s,i)=>class extends A{constructor(A,o=n){const r=s(A),a=(A=>({...A,channelCount:A.numberOfOutputs}))({...n,...o});super(A,!1,e(r,a),i(r)?t():null)}}},VONf:function(A,t){},VQSN:function(A,t,e){"use strict";e.d(t,"a",(function(){return n}));const n=async(A,t,e,n,s,i,o,r,a,c,M,l,u,h)=>!!(A(t,t)&&A(e,e)&&A(s,s)&&A(i,i)&&A(r,r)&&A(a,a)&&A(c,c)&&A(M,M)&&A(l,l))&&(await Promise.all([A(n,n),A(o,o),A(u,u),A(h,h)])).every(A=>A)},VYZo:function(A,t){},VtkK:function(A,t){},Vyha:function(A,t,e){"use strict";e.d(t,"a",(function(){return n}));const n=A=>(t,e,n,s)=>A(e,t,n,s)},W1oZ:function(A,t){},WPTw:function(A,t,e){"use strict";e.d(t,"a",(function(){return i}));var n=e("Y/Aa"),s=e("zna5");const i=(A,t,e)=>(i,o)=>A(i,A=>{const r=o.channelCountMode;if("clamped-max"===r)throw e();if(void 0===i.createStereoPanner)return t(i,o);const a=A.createStereoPanner();return Object(s.a)(a,o),Object(n.a)(a,o,"pan"),Object.defineProperty(a,"channelCountMode",{get:()=>r,set:A=>{if(A!==r)throw e()}}),a})},WWnF:function(A,t){},Wdml:function(A,t){},WgOq:function(A,t,e){"use strict";e.d(t,"a",(function(){return r}));var n=e("Y/Aa"),s=e("zna5"),i=e("JRKu"),o=e("kk/u");const r=(A,t,e,r,a,c)=>(M,l)=>{if(void 0===M.createConstantSource)return r(M,l);const u=e(M,A=>A.createConstantSource());return Object(s.a)(u,l),Object(n.a)(u,l,"offset"),t(a,()=>a(M))||Object(i.a)(u),t(c,()=>c(M))||Object(o.a)(u),A(M,u),u}},WgWj:function(A,t){},WihM:function(A,t,e){"use strict";e.d(t,"a",(function(){return n}));const n=(A,t)=>e=>{const n=A.get(e);return t(n)||t(e)}},WpfU:function(A,t,e){"use strict";e.d(t,"a",(function(){return i}));var n=e("E2bg"),s=e("SWU+");const i=(A,t,e)=>()=>{const i=new WeakMap;return{render(o,r,a){const c=i.get(r);return void 0!==c?Promise.resolve(c):(async(o,r,a)=>{let c=t(o);return Object(s.a)(c,r)||(c=A(r,{buffer:c.buffer,channelCount:c.channelCount,channelCountMode:c.channelCountMode,channelInterpretation:c.channelInterpretation,disableNormalization:!c.normalize})),i.set(r,c),Object(n.a)(c)?await e(o,r,c.inputs[0],a):await e(o,r,c,a),c})(o,r,a)}}}},"WtY/":function(A,t,e){"use strict";e.d(t,"a",(function(){return n}));const n=A=>t=>null!==A&&t instanceof A},Wybk:function(A,t){},X075:function(A,t){},X0ge:function(A,t){},X2c7:function(A,t){},"X4+W":function(A,t){},X6Sd:function(A,t){},XAn0:function(A,t){},XC81:function(A,t){},XD6l:function(A,t){},XG8z:function(A,t){},XH4K:function(A,t){},XMaS:function(A,t){},XMzK:function(A,t){},XOZ0:function(A,t,e){"use strict";e.d(t,"a",(function(){return n}));const n=(A,t)=>e=>A(e)||t(e)},XWcB:function(A,t){},XXdY:function(A,t,e){"use strict";e.d(t,"a",(function(){return n}));const n=(A,t)=>{const e=A.get(t);if(void 0===e)throw new Error("A value with the given key could not be found.");return e}},XekJ:function(A,t){},XwxE:function(A,t){},"Y/Aa":function(A,t,e){"use strict";e.d(t,"a",(function(){return n}));const n=(A,t,e)=>{const n=t[e];void 0!==n&&n!==A[e].value&&(A[e].value=n)}},"Y/e3":function(A,t,e){"use strict";e.d(t,"a",(function(){return n}));const n=A=>(t,e,n)=>{Object.defineProperties(A,{currentFrame:{configurable:!0,get:()=>Math.round(t*e)},currentTime:{configurable:!0,get:()=>t}});try{return n()}finally{null!==A&&(delete A.currentFrame,delete A.currentTime)}}},Y3aM:function(A,t){},Y6Nz:function(A,t){},Y7nV:function(A,t,e){"use strict";e.d(t,"a",(function(){return n}));const n=A=>t=>null!==A&&"function"==typeof A.AudioNode&&t instanceof A.AudioNode},"YQ/E":function(A,t){},YX8H:function(A,t){},YXBp:function(A,t){},"Yf/P":function(A,t){},YfWv:function(A,t){},YoLu:function(A,t){},Ypea:function(A,t){},YsxF:function(A,t){},YvTh:function(A,t,e){"use strict";e.d(t,"a",(function(){return n})),e.d(t,"b",(function(){return s}));const n=-34028234663852886e22,s=-n},Yyi2:function(A,t,e){"use strict";e.d(t,"a",(function(){return n}));const n=A=>t=>{const e=A(t,A=>A.createBufferSource()),n=t.createBuffer(1,1,44100);e.buffer=n;try{e.start(0,1)}catch{return!1}return!0}},Z2o7:function(A,t){},Z3uy:function(A,t){},Z6Q6:function(A,t){},ZGWs:function(A,t,e){"use strict";e.d(t,"a",(function(){return n}));const n=A=>(t,e)=>{const n=A(t,{buffer:null,channelCount:2,channelCountMode:"max",channelInterpretation:"speakers",loop:!1,loopEnd:0,loopStart:0,playbackRate:1}),s=t.createBuffer(1,2,t.sampleRate);return n.buffer=s,n.loop=!0,n.connect(e),n.start(),()=>{n.stop(),n.disconnect(e)}}},"ZL/J":function(A,t){},ZNpu:function(A,t,e){"use strict";e.d(t,"a",(function(){return s}));var n=e("SWU+");const s=(A,t,e,s,i)=>()=>{const o=new WeakMap;let r=null,a=null;return{set start(A){r=A},set stop(A){a=A},render(c,M,l){const u=o.get(M);return void 0!==u?Promise.resolve(u):(async(c,M,l)=>{let u=e(c);const h=Object(n.a)(u,M);return h||(u=t(M,{buffer:u.buffer,channelCount:u.channelCount,channelCountMode:u.channelCountMode,channelInterpretation:u.channelInterpretation,loop:u.loop,loopEnd:u.loopEnd,loopStart:u.loopStart,playbackRate:u.playbackRate.value}),null!==r&&u.start(...r),null!==a&&u.stop(a)),o.set(M,u),h?await A(M,c.playbackRate,u.playbackRate,l):await s(M,c.playbackRate,u.playbackRate,l),await i(c,M,u,l),u})(c,M,l)}}}},ZQAS:function(A,t){},ZUMP:function(A,t){},Zkfd:function(A,t){},"ZlB+":function(A,t){},Znhr:function(A,t){},a1Yo:function(A,t){},a2Ro:function(A,t){},a9DD:function(A,t){},aE9e:function(A,t,e){"use strict";e.d(t,"a",(function(){return i}));var n=e("YvTh");const s={channelCount:2,channelCountMode:"clamped-max",channelInterpretation:"speakers",coneInnerAngle:360,coneOuterAngle:360,coneOuterGain:0,distanceModel:"inverse",maxDistance:1e4,orientationX:1,orientationY:0,orientationZ:0,panningModel:"equalpower",positionX:0,positionY:0,positionZ:0,refDistance:1,rolloffFactor:1},i=(A,t,e,i,o,r)=>class extends A{constructor(A,a=s){const c=o(A),M={...s,...a},l=e(c,M),u=r(c);super(A,!1,l,u?i():null),this._nativePannerNode=l,this._orientationX=t(this,u,l.orientationX,n.b,n.a),this._orientationY=t(this,u,l.orientationY,n.b,n.a),this._orientationZ=t(this,u,l.orientationZ,n.b,n.a),this._positionX=t(this,u,l.positionX,n.b,n.a),this._positionY=t(this,u,l.positionY,n.b,n.a),this._positionZ=t(this,u,l.positionZ,n.b,n.a)}get coneInnerAngle(){return this._nativePannerNode.coneInnerAngle}set coneInnerAngle(A){this._nativePannerNode.coneInnerAngle=A}get coneOuterAngle(){return this._nativePannerNode.coneOuterAngle}set coneOuterAngle(A){this._nativePannerNode.coneOuterAngle=A}get coneOuterGain(){return this._nativePannerNode.coneOuterGain}set coneOuterGain(A){this._nativePannerNode.coneOuterGain=A}get distanceModel(){return this._nativePannerNode.distanceModel}set distanceModel(A){this._nativePannerNode.distanceModel=A}get maxDistance(){return this._nativePannerNode.maxDistance}set maxDistance(A){this._nativePannerNode.maxDistance=A}get orientationX(){return this._orientationX}get orientationY(){return this._orientationY}get orientationZ(){return this._orientationZ}get panningModel(){return this._nativePannerNode.panningModel}set panningModel(A){this._nativePannerNode.panningModel=A}get positionX(){return this._positionX}get positionY(){return this._positionY}get positionZ(){return this._positionZ}get refDistance(){return this._nativePannerNode.refDistance}set refDistance(A){this._nativePannerNode.refDistance=A}get rolloffFactor(){return this._nativePannerNode.rolloffFactor}set rolloffFactor(A){this._nativePannerNode.rolloffFactor=A}}},aUTZ:function(A,t){},aVEF:function(A,t){},ahmc:function(A,t){},ajUT:function(A,t){},akCO:function(A,t){},aocZ:function(A,t){},bAe2:function(A,t){},"bJ+h":function(A,t,e){"use strict";e.d(t,"a",(function(){return n}));const n=A=>()=>{if(null===A)return!1;const t=new A(1,1,44100).createBuffer(1,1,44100);if(void 0===t.copyToChannel)return!0;const e=new Float32Array(2);try{t.copyFromChannel(e,0,0)}catch{return!1}return!0}},bRPT:function(A,t){},"be+4":function(A,t){},beTH:function(A,t){},"bfI/":function(A,t){},bsGK:function(A,t){},c3De:function(A,t,e){"use strict";e.d(t,"a",(function(){return n}));const n=(A,t,e,n)=>class extends A{constructor(A,s){const i=e(A),o=t(i,s);if(n(i))throw TypeError();super(A,!0,o,null),this._mediaElement=s.mediaElement,this._nativeMediaElementAudioSourceNode=o}get mediaElement(){return void 0===this._nativeMediaElementAudioSourceNode.mediaElement?this._mediaElement:this._nativeMediaElementAudioSourceNode.mediaElement}}},c4LR:function(A,t,e){"use strict";e.d(t,"a",(function(){return n}));const n=()=>{try{return new DOMException("","AbortError")}catch(A){return A.code=20,A.name="AbortError",A}}},cEpd:function(A,t){},cNVD:function(A,t,e){"use strict";e.d(t,"a",(function(){return n}));const n=A=>(t,e)=>{const n=e.createBuffer(1,1,e.sampleRate);null===t.buffer&&(t.buffer=n),A(t,"buffer",A=>()=>{const e=A.call(t);return e===n?null:e},A=>e=>A.call(t,null===e?n:e))}},cTAQ:function(A,t,e){"use strict";e.d(t,"a",(function(){return s}));var n=e("I7Ur");const s=(A,t,e,s,i,o,r,a)=>{const c=[];return(M,l)=>e(M).render(M,l,c).then(()=>Promise.all(Array.from(s(l)).map(A=>e(A).render(A,l,c)))).then(()=>i(l)).then(e=>("function"!=typeof e.copyFromChannel?(r(e),Object(n.a)(e)):t(o,()=>o(e))||a(e),A.add(e),e))}},cX8k:function(A,t,e){"use strict";e.d(t,"a",(function(){return i}));var n=e("zna5"),s=e("4JRa");const i=A=>(t,e)=>{const i=A(t,A=>A.createChannelSplitter(e.numberOfOutputs));return Object(n.a)(i,e),(A=>{const t=A.numberOfOutputs;Object.defineProperty(A,"channelCount",{get:()=>t,set:A=>{if(A!==t)throw Object(s.a)()}}),Object.defineProperty(A,"channelCountMode",{get:()=>"explicit",set:A=>{if("explicit"!==A)throw Object(s.a)()}}),Object.defineProperty(A,"channelInterpretation",{get:()=>"discrete",set:A=>{if("discrete"!==A)throw Object(s.a)()}})})(i),i}},cmBE:function(A,t){},cuKk:function(A,t){},cvTa:function(A,t,e){"use strict";e.d(t,"a",(function(){return n}));const n=A=>null===A?null:A.hasOwnProperty("OfflineAudioContext")?A.OfflineAudioContext:A.hasOwnProperty("webkitOfflineAudioContext")?A.webkitOfflineAudioContext:null},cxpV:function(A,t,e){"use strict";e.d(t,"a",(function(){return s}));var n=e("SWU+");const s=(A,t,e)=>()=>{const s=new WeakMap;return{render(i,o,r){const a=s.get(o);return void 0!==a?Promise.resolve(a):(async(i,o,r)=>{let a=t(i);return Object(n.a)(a,o)||(a=A(o,{channelCount:a.channelCount,channelCountMode:a.channelCountMode,channelInterpretation:a.channelInterpretation,fftSize:a.fftSize,maxDecibels:a.maxDecibels,minDecibels:a.minDecibels,smoothingTimeConstant:a.smoothingTimeConstant})),s.set(o,a),await e(i,o,a,r),a})(i,o,r)}}}},cyq1:function(A,t,e){"use strict";e.d(t,"a",(function(){return s}));var n=e("SWU+");const s=(A,t,e,s,i)=>()=>{const o=new WeakMap;let r=null,a=null,c=null;return{set periodicWave(A){r=A},set start(A){a=A},set stop(A){c=A},render(M,l,u){const h=o.get(l);return void 0!==h?Promise.resolve(h):(async(M,l,u)=>{let h=e(M);const g=Object(n.a)(h,l);return g||(h=t(l,{channelCount:h.channelCount,channelCountMode:h.channelCountMode,channelInterpretation:h.channelInterpretation,detune:h.detune.value,frequency:h.frequency.value,periodicWave:null===r?void 0:r,type:h.type}),null!==a&&h.start(a),null!==c&&h.stop(c)),o.set(l,h),g?(await A(l,M.detune,h.detune,u),await A(l,M.frequency,h.frequency,u)):(await s(l,M.detune,h.detune,u),await s(l,M.frequency,h.frequency,u)),await i(M,l,h,u),h})(M,l,u)}}}},"d+0u":function(A,t,e){"use strict";e.d(t,"a",(function(){return s}));var n=e("SWU+");const s=(A,t,e,s,i)=>()=>{const o=new WeakMap;return{render(r,a,c){const M=o.get(a);return void 0!==M?Promise.resolve(M):(async(r,a,c)=>{let M=e(r);const l=Object(n.a)(M,a);return l||(M=t(a,{channelCount:M.channelCount,channelCountMode:M.channelCountMode,channelInterpretation:M.channelInterpretation,gain:M.gain.value})),o.set(a,M),l?await A(a,r.gain,M.gain,c):await s(a,r.gain,M.gain,c),await i(r,a,M,c),M})(r,a,c)}}}},"d+VD":function(A,t){},d2FR:function(A,t){},d746:function(A,t,e){"use strict";e.d(t,"a",(function(){return i}));var n=e("Y/Aa"),s=e("zna5");const i=A=>(t,e)=>{const i=A(t,A=>A.createGain());return Object(s.a)(i,e),Object(n.a)(i,e,"gain"),i}},dA1W:function(A,t){},dB45:function(A,t){},dEdv:function(A,t){},dIfd:function(A,t,e){"use strict";e.d(t,"a",(function(){return c}));var n=e("dPZM");const s={construct:()=>s},i=/^import(?:(?:[\s]+[\w]+|(?:[\s]+[\w]+[\s]*,)?[\s]*\{[\s]*[\w]+(?:[\s]+as[\s]+[\w]+)?(?:[\s]*,[\s]*[\w]+(?:[\s]+as[\s]+[\w]+)?)*[\s]*}|(?:[\s]+[\w]+[\s]*,)?[\s]*\*[\s]+as[\s]+[\w]+)[\s]+from)?(?:[\s]*)("([^"\\]|\\.)+"|'([^'\\]|\\.)+')(?:[\s]*);?/,o=(A,t)=>{const e=[];let n=A.replace(/^[\s]+/,""),s=n.match(i);for(;null!==s;){const A=s[1].slice(1,-1),o=s[0].replace(/([\s]+)?;?$/,"").replace(A,new URL(A,t).toString());e.push(o),n=n.slice(s[0].length).replace(/^[\s]+/,""),s=n.match(i)}return[e.join(";"),n]},r=A=>{if(void 0!==A&&!Array.isArray(A))throw new TypeError("The parameterDescriptors property of given value for processorCtor is not an array.")},a=A=>{if(!(A=>{try{new new Proxy(A,s)}catch{return!1}return!0})(A))throw new TypeError("The given value for processorCtor should be a constructor.");if(null===A.prototype||"object"!=typeof A.prototype)throw new TypeError("The given value for processorCtor should have a prototype.")},c=(A,t,e,s,i,c,M,l,u)=>(h,g,m={credentials:"omit"})=>{const p=c(h),w=new URL(g,u.location.href).toString();if(void 0!==p.audioWorklet)return s(g).then(A=>{const[t,e]=o(A,w),n=new Blob([`${t};(registerProcessor=>{${e}\n})((n,p)=>registerProcessor(n,class extends p{process(i,o,p){return super.process(i.map(j=>j.some(k=>k.length===0)?[]:j),o,p)}}))`],{type:"application/javascript; charset=utf-8"}),s=URL.createObjectURL(n),r=i(p);return(null!==r?r:p).audioWorklet.addModule(s,m).then(()=>URL.revokeObjectURL(s)).catch(A=>{throw URL.revokeObjectURL(s),void 0!==A.code&&"SyntaxError"!==A.name||(A.code=12),A})});const Y=l.get(h);if(void 0!==Y&&Y.has(g))return Promise.resolve();const d=M.get(h);if(void 0!==d){const A=d.get(g);if(void 0!==A)return A}const B=s(g).then(A=>{const[e,n]=o(A,w);return t(`${e};((a,b)=>{(a[b]=a[b]||[]).push((AudioWorkletProcessor,global,registerProcessor,sampleRate,self,window)=>{${n}\n})})(window,'_AWGS')`)}).then(()=>{const t=u._AWGS.pop();if(void 0===t)throw new SyntaxError;e(p.currentTime,p.sampleRate,()=>t(class{},void 0,(t,e)=>{if(""===t.trim())throw A();const s=n.j.get(p);if(void 0!==s){if(s.has(t))throw A();a(e),r(e.parameterDescriptors),s.set(t,e)}else a(e),r(e.parameterDescriptors),n.j.set(p,new Map([[t,e]]))},p.sampleRate,void 0,void 0))}).catch(A=>{throw void 0!==A.code&&"SyntaxError"!==A.name||(A.code=12),A});return void 0===d?M.set(h,new Map([[g,B]])):d.set(g,B),B.then(()=>{const A=l.get(h);void 0===A?l.set(h,new Set([g])):A.add(g)}).catch(()=>{}).then(()=>{const A=M.get(h);void 0!==A&&A.delete(g)}),B}},dKZW:function(A,t){},dPZM:function(A,t,e){"use strict";e.d(t,"a",(function(){return n})),e.d(t,"b",(function(){return s})),e.d(t,"c",(function(){return i})),e.d(t,"d",(function(){return o})),e.d(t,"e",(function(){return r})),e.d(t,"f",(function(){return a})),e.d(t,"g",(function(){return c})),e.d(t,"i",(function(){return M})),e.d(t,"h",(function(){return l})),e.d(t,"j",(function(){return u})),e.d(t,"k",(function(){return h}));const n=new WeakSet,s=new WeakMap,i=new WeakMap,o=new WeakMap,r=new WeakMap,a=new WeakMap,c=new WeakMap,M=new WeakMap,l=new WeakMap,u=new WeakMap,h=new WeakMap},dPjB:function(A,t,e){"use strict";e.d(t,"a",(function(){return n}));const n=(A,t,e)=>async(n,s,i,o)=>{const r=t(n);await Promise.all(Array.from(r.activeInputs).map(async([t,n])=>{const r=A(t),a=await r.render(t,s,o);e(t)||a.connect(i,n)}))}},dWkh:function(A,t,e){"use strict";e.d(t,"a",(function(){return r}));var n=e("YvTh"),s=e("L5Qq"),i=e("rl1c");const o={buffer:null,channelCount:2,channelCountMode:"max",channelInterpretation:"speakers",loop:!1,loopEnd:0,loopStart:0,playbackRate:1},r=(A,t,e,r,a,c,M,l)=>class extends A{constructor(A,s=o){const i=c(A),r={...o,...s},l=a(i,r),u=M(i),h=u?t():null;super(A,!1,l,h),this._audioBufferSourceNodeRenderer=h,this._isBufferNullified=!1,this._isBufferSet=null!=s.buffer,this._nativeAudioBufferSourceNode=l,this._onended=null,this._playbackRate=e(this,u,l.playbackRate,n.b,n.a)}get buffer(){return this._isBufferNullified?null:this._nativeAudioBufferSourceNode.buffer}set buffer(A){try{this._nativeAudioBufferSourceNode.buffer=A}catch(t){if(null!==A||17!==t.code)throw t;if(null!==this._nativeAudioBufferSourceNode.buffer){const A=this._nativeAudioBufferSourceNode.buffer,t=A.numberOfChannels;for(let e=0;e<t;e+=1)A.getChannelData(e).fill(0);this._isBufferNullified=!0}}if(null!==A){if(this._isBufferSet)throw r();this._isBufferSet=!0}}get loop(){return this._nativeAudioBufferSourceNode.loop}set loop(A){this._nativeAudioBufferSourceNode.loop=A}get loopEnd(){return this._nativeAudioBufferSourceNode.loopEnd}set loopEnd(A){this._nativeAudioBufferSourceNode.loopEnd=A}get loopStart(){return this._nativeAudioBufferSourceNode.loopStart}set loopStart(A){this._nativeAudioBufferSourceNode.loopStart=A}get onended(){return this._onended}set onended(A){const t="function"==typeof A?l(this,A):null;this._nativeAudioBufferSourceNode.onended=t;const e=this._nativeAudioBufferSourceNode.onended;this._onended=null!==e&&e===t?A:e}get playbackRate(){return this._playbackRate}start(A=0,t=0,e){if(this._nativeAudioBufferSourceNode.start(A,t,e),null!==this._audioBufferSourceNodeRenderer)this._audioBufferSourceNodeRenderer.start=void 0===e?[A,t]:[A,t,e];else{Object(s.a)(this);const A=()=>{this._nativeAudioBufferSourceNode.removeEventListener("ended",A),setTimeout(()=>Object(i.a)(this),1e3)};this._nativeAudioBufferSourceNode.addEventListener("ended",A)}}stop(A=0){this._nativeAudioBufferSourceNode.stop(A),null!==this._audioBufferSourceNodeRenderer&&(this._audioBufferSourceNodeRenderer.stop=A)}}},dg4q:function(A,t){},"e+us":function(A,t){},e0Cc:function(A,t,e){"use strict";e.d(t,"a",(function(){return i}));var n=e("E2bg"),s=e("SWU+");const i=(A,t,e,i,o)=>()=>{const r=new WeakMap;return{render(a,c,M){const l=r.get(c);return void 0!==l?Promise.resolve(l):(async(a,c,M)=>{let l=e(a);const u=Object(s.a)(l,c);return u||(l=t(c,{channelCount:l.channelCount,channelCountMode:l.channelCountMode,channelInterpretation:l.channelInterpretation,pan:l.pan.value})),r.set(c,l),u?await A(c,a.pan,l.pan,M):await i(c,a.pan,l.pan,M),Object(n.a)(l)?await o(a,c,l.inputs[0],M):await o(a,c,l,M),l})(a,c,M)}}}},eE6B:function(A,t){},eIq1:function(A,t,e){"use strict";e.d(t,"a",(function(){return s}));var n=e("zna5");const s=(A,t)=>(e,s)=>{if(void 0===e.createMediaStreamDestination)throw t();const i=A(e,A=>A.createMediaStreamDestination());return Object(n.a)(i,s),1===i.numberOfOutputs&&Object.defineProperty(i,"numberOfOutputs",{get:()=>0}),i}},eL9S:function(A,t){},eNoX:function(A,t,e){"use strict";e.d(t,"AudioContext",(function(){return Ms})),e.d(t,"AudioWorkletNode",(function(){return Bs})),e.d(t,"OfflineAudioContext",(function(){return Cs})),e.d(t,"isAnyAudioContext",(function(){return Es})),e.d(t,"isAnyAudioNode",(function(){return Is})),e.d(t,"isAnyAudioParam",(function(){return ys})),e.d(t,"isAnyOfflineAudioContext",(function(){return Qs}));var n=e("BNHZ"),s=e("c4LR"),i=e("8P6d"),o=e("rT3k"),r=e("dIfd"),a=e("yclo"),c=e("2m2a"),M=e("CFZ3"),l=e("cxpV"),u=e("Unpf"),h=e("dWkh"),g=e("ZNpu"),m=e("lbaV"),p=e("BTca"),w=e("grEA"),Y=e("0HOK"),d=e("n+Vi"),B=e("ktqq"),D=e("CQj6"),G=e("USvv"),C=e("Pxbj"),E=e("sTSC"),I=e("JWBP"),y=e("gnuX"),Q=e("/FEe"),Z=e("7QKQ"),T=e("4Iew"),k=e("VLrm"),S=e("6wCO"),z=e("Vyha"),U=e("EkJU"),b=e("ZGWs"),j=e("S9Gp"),N=e("MUSt"),x=e("Cb3F"),K=e("Bel5"),J=e("WpfU"),R=e("Uyz6"),W=e("GVtM"),O=e("Jp3e"),q=e("H06S"),F=e("ETzM"),f=e("HnUV"),V=e("HUSy"),L=e("erIE"),H=e("PUN7"),v=e("gvNG"),P=e("upBd"),X=e("tntC"),_=e("NfdS"),$=e("QiZ9"),AA=e("Y/e3"),tA=e("6dyI"),eA=e("x970"),nA=e("d+0u"),sA=e("2lKH"),iA=e("D+dw"),oA=e("J4wv"),rA=e("Tquh"),aA=e("3OhI"),cA=e("BW5h"),MA=e("NzhG"),lA=e("4yWH"),uA=e("vM74"),hA=e("Nhr7"),gA=e("4JRa"),mA=e("WihM"),pA=e("B4ht"),wA=e("fnX1"),YA=e("3yhf"),dA=e("ImzF"),BA=e("Y7nV"),DA=e("FR7G"),GA=e("XOZ0"),CA=e("WtY/"),EA=e("hvVe"),IA=(e("VQSN"),e("c3De")),yA=e("MHXu"),QA=e("qktI"),ZA=e("ulit"),TA=e("7dO6"),kA=e("3mKu"),SA=e("UDZG"),zA=e("/HeQ"),UA=e("s0Dh"),bA=e("iPTv"),jA=e("P5CY"),NA=e("J+IU"),xA=e("3tyg"),KA=e("HsQ2"),JA=e("4W56"),RA=e("KNpT"),WA=e("DAi8"),OA=e("qk4J"),qA=e("JW3k"),FA=e("cX8k"),fA=e("WgOq"),VA=e("4MzO"),LA=e("oU2c"),HA=e("BE27"),vA=e("RqEH"),PA=e("SJaf"),XA=e("d746"),_A=e("8+H8"),$A=e("+K1Q"),At=e("7T5s"),tt=e("eIq1"),et=e("VCgJ"),nt=e("NjMd"),st=e("cvTa"),it=e("l+/H"),ot=e("7P0p"),rt=e("Da0I"),at=e("m7HT"),ct=e("r2Z3"),Mt=e("WPTw"),lt=e("DeJw"),ut=e("hZWe"),ht=e("M0gW"),gt=e("E2P0"),mt=e("MNHC"),pt=e("nFs0"),wt=e("cyq1"),Yt=e("aE9e"),dt=e("GCak"),Bt=e("wQCP"),Dt=e("GOvI"),Gt=e("O4WP"),Ct=e("dPjB"),Et=e("E6gS"),It=e("cTAQ"),yt=e("jsEv"),Qt=e("e0Cc"),Zt=e("S7Dm"),Tt=(e("bJ+h"),e("xQhs")),kt=e("0ekj"),St=e("Yyi2"),zt=e("B+Tk"),Ut=(e("BxD+"),e("EBxe"),e("He0i"),e("NGPt"),e("zLzO")),bt=e("Aehn"),jt=e("5gzO"),Nt=(e("9KNc"),e("N3Uc"),e("5VPu"),e("heEd"),e("sh5e"),e("UmtS"),e("zqSo")),xt=(e("2qNk"),e("wdAX")),Kt=e("FC2d"),Jt=e("KDtT"),Rt=e("qzuq"),Wt=e("Pj1+"),Ot=e("Gtqv"),qt=e("cNVD"),Ft=e("3QpB"),ft=e("h1Un"),Vt=e("dPZM"),Lt=e("L+VK"),Ht=e("9yae"),vt=e("Knm5"),Pt=e("Tatq"),Xt=e("ME4u"),_t=e("lNmD"),$t=e("XXdY"),Ae=e("DiTw"),te=e("EdRB"),ee=e("1OHY"),ne=e("PMuG"),se=e("Gyek"),ie=e("N/99"),oe=e("5ThQ"),re=(e("fML1"),e("HxUm")),ae=e("5J5n");e("/beQ"),e("FaYK");const ce=Object(Q.a)(new Map,new WeakMap),Me=Object(Rt.a)(),le=Object(st.a)(Me),ue=Object(CA.a)(le),he=Object(NA.a)(Me),ge=Object(oA.a)(ue,he,le),me=Object(KA.a)(ge),pe=Object(UA.a)(ce,uA.a,me),we=Object(sA.a)(vt.a),Ye=Object(Gt.a)(vt.a,we,ne.a),de=Object(l.a)(pe,Xt.a,Ye),Be=new WeakMap,De=Object(rA.a)(Vt.g),Ge=new WeakMap,Ce=Object($.a)(ae.a),Ee=Object(dA.a)(he),Ie=Object(BA.a)(Me),ye=Object(DA.a)(Me),Qe=Object(d.a)(Object(i.a)(Vt.b),Be,ce,Object(lA.a)(Vt.h,Ht.a,vt.a,Xt.a,_t.a,te.a),uA.a,hA.a,gt.a,Object(q.a)(Lt.a,Vt.h,vt.a,Xt.a,_t.a,De,te.a,ue),Object(L.a)(Ge,vt.a,$t.a),Ce,De,Ee,Ie,ye,ue),Ze=Object(M.a)(Qe,de,uA.a,pe,De,ue),Te=new WeakSet,ke=Object(bA.a)(Me),Se=Object(x.a)(new Uint32Array(1)),ze=Object(Wt.a)(Se,uA.a),Ue=Object(Ot.a)(Se),be=Object(u.a)(Te,ce,gt.a,ke,le,Object(Zt.a)(ke),ze,Ue),je=Object(XA.a)(me),Ne=Object(a.a)(je),xe=Object(Ut.a)(me),Ke=Object(bt.a)(me),Je=Object(jt.a)(me),Re=Object(Ft.a)(me),We=Object(Ct.a)(we,Pt.a,ne.a),Oe=Object(z.a)(We),qe=Object(jA.a)(Ne,ce,me,Object(Tt.a)(me),Object(kt.a)(le),Object(St.a)(me),Object(zt.a)(me),xe,Ke,Je,re.a,Object(qt.a)(se.a),Re),Fe=Object(Dt.a)(Object(iA.a)(Pt.a),We),fe=Object(g.a)(Oe,qe,Xt.a,Fe,Ye),Ve=Object(B.a)(Object(o.a)(Vt.d),Ge,Vt.e,D.a,n.createCancelAndHoldAutomationEvent,n.createCancelScheduledValuesAutomationEvent,n.createExponentialRampToValueAutomationEvent,n.createLinearRampToValueAutomationEvent,n.createSetTargetAutomationEvent,n.createSetValueAutomationEvent,n.createSetValueCurveAutomationEvent,he),Le=Object(h.a)(Qe,fe,Ve,gA.a,qe,De,ue,ae.a),He=Object(p.a)(Qe,w.a,uA.a,gA.a,Object(xA.a)(je,se.a),De,ue,Ye),ve=Object(OA.a)(me),Pe=Object(y.a)(Oe,ve,Xt.a,Fe,Ye),Xe=Object(I.a)(Qe,Ve,Pe,hA.a,ve,De,ue),_e=Object(zA.a)(Ae.a,Ie),$e=Object(ft.a)(gA.a,me,_e),An=Object(qA.a)(me,$e),tn=Object(T.a)(An,Xt.a,Ye),en=Object(Z.a)(Qe,tn,An,De,ue),nn=Object(FA.a)(me),sn=Object(S.a)(nn,Xt.a,Ye),on=Object(k.a)(Qe,sn,nn,De,ue),rn=Object(VA.a)(Ne,qe,je,_e),an=Object(fA.a)(Ne,ce,me,rn,xe,Je),cn=Object(N.a)(Oe,an,Xt.a,Fe,Ye),Mn=Object(j.a)(Qe,Ve,cn,an,De,ue,ae.a),ln=Object(HA.a)(me,je,_e),un=Object(LA.a)(me,ln,gt.a,se.a),hn=Object(J.a)(un,Xt.a,Ye),gn=Object(K.a)(Qe,hn,un,De,ue),mn=Object(vA.a)(me),pn=Object(f.a)(Oe,mn,Xt.a,Fe,Ye),wn=Object(F.a)(Qe,Ve,pn,mn,De,ue),Yn=Object(PA.a)(me,gt.a),dn=Object(P.a)(Oe,Yn,Xt.a,Fe,Ye),Bn=Object(v.a)(Qe,Ve,dn,Yn,gt.a,De,ue),Dn=Object(nA.a)(Oe,je,Xt.a,Fe,Ye),Gn=Object(eA.a)(Qe,Ve,Dn,je,De,ue),Cn=Object(ct.a)(me),En=Object($A.a)(hA.a,gA.a,Cn,gt.a),In=Object(Et.a)(ce,je,Cn,Object(Nt.a)(je,le)),yn=Object(MA.a)(qe,me,Xt.a,le,Ye,In),Qn=Object(_A.a)(me,En),Zn=Object(cA.a)(Qe,Qn,yn,De,ue),Tn=Object(Y.a)(Ve,An,an,Cn,ue),kn=new WeakMap,Sn=Object(kA.a)(He,Tn,Ce,ue,kn,ae.a),zn=Object(it.a)(Ne,ce,me,xe,Ke,Je,Re),Un=Object(wt.a)(Oe,zn,Xt.a,Fe,Ye),bn=Object(pt.a)(Qe,Ve,gA.a,zn,Un,De,ue,ae.a),jn=Object(b.a)(qe),Nn=Object(ht.a)(jn,gA.a,me,je,ee.a,_e),xn=Object(ut.a)(jn,gA.a,me,Nn,ee.a,_e,se.a),Kn=Object(rt.a)(Lt.a,gA.a,me,An,je,Cn,xn,gt.a,Ht.a,_e),Jn=Object(ot.a)(me,Kn),Rn=Object(dt.a)(Oe,An,an,je,Jn,Xt.a,le,Fe,Ye,In),Wn=Object(Yt.a)(Qe,Ve,Jn,Rn,De,ue),On=Object(at.a)(ge),qn=Object(Bt.a)(On,De,new WeakSet),Fn=Object(lt.a)(An,nn,je,xn,gt.a,_e),fn=Object(Mt.a)(me,Fn,gt.a),Vn=Object(Qt.a)(Oe,fn,Xt.a,Fe,Ye),Ln=Object(yt.a)(Qe,Ve,fn,Vn,De,ue),Hn=Object(Jt.a)(xn,Xt.a,Ye),vn=Object(Kt.a)(Qe,gA.a,xn,Hn,De,ue),Pn=Object(EA.a)(Me),Xn=Object(AA.a)(Me),_n=Pn?Object(r.a)(gt.a,Object(_.a)(Me),Xn,Object(tA.a)(s.a),ge,De,new WeakMap,new WeakMap,Me):void 0,$n=Object(GA.a)(Ee,ue),As=Object(O.a)(Te,ce,W.a,X.a,new WeakSet,De,$n,ue,le,ie.a,oe.a,ze,Ue),ts=Object(E.a)(_n,Ze,be,Le,Xe,en,on,Mn,gn,As,wn,Bn,Gn,Zn,Sn,bn,Wn,qn,Ln,vn),es=Object(At.a)(me),ns=Object(IA.a)(Qe,es,De,ue),ss=Object(tt.a)(me,gt.a),is=Object(yA.a)(Qe,ss,De,ue),os=Object(et.a)(me),rs=Object(QA.a)(Qe,os,De,ue),as=Object(nt.a)(gA.a,me,ue),cs=Object(ZA.a)(Qe,as,De),Ms=Object(m.a)(ts,gA.a,gt.a,xt.a,ns,is,rs,cs,he),ls=Object(aA.a)(kn),us=Object(c.a)(ls),hs=Object(U.a)(uA.a),gs=Object(V.a)(ls),ms=Object(H.a)(uA.a),ps=Object(WA.a)(Be,hs,uA.a,gA.a,An,nn,an,je,Cn,gt.a,ms,Xn,_e),ws=Object(RA.a)(gA.a,me,ps,je,gt.a,_e),Ys=Object(JA.a)(Me),ds=Object(C.a)(Oe,hs,qe,An,nn,an,je,gs,ms,Xn,Xt.a,Ys,le,Fe,Ye,In),Bs=Pn?Object(G.a)(us,Qe,Ve,ds,ws,De,ue,Ys,ae.a):void 0,Ds=(Object(TA.a)(gA.a,gt.a,xt.a,Sn,he),Object(R.a)(gt.a,le)),Gs=Object(It.a)(Te,ce,we,ls,In,ie.a,ze,Ue),Cs=(Object(SA.a)(ce,gA.a,Ds,Sn,Gs),Object(mt.a)(ts,ce,gA.a,Ds,Gs)),Es=Object(mA.a)(Vt.g,Ee),Is=Object(pA.a)(Vt.c,Ie),ys=Object(wA.a)(Vt.e,ye),Qs=Object(YA.a)(Vt.g,ue)},eQkp:function(A,t){},eTIN:function(A,t){},efqp:function(A,t){},eoHL:function(A,t){},erIE:function(A,t,e){"use strict";e.d(t,"a",(function(){return s}));var n=e("tF58");const s=(A,t,e)=>function s(i,o){const r=Object(n.a)(o)?o:e(A,o);if((A=>"delayTime"in A)(r))return[];if(i[0]===r)return[i];if(i.includes(r))return[];const{outputs:a}=t(r);return Array.from(a).map(A=>s([...i,r],A[0])).reduce((A,t)=>A.concat(t),[])}},f6sT:function(A,t){},fMBi:function(A,t){},fML1:function(A,t,e){"use strict";e.d(t,"a",(function(){return n}));const n=()=>new Promise(A=>{const t=new ArrayBuffer(0),{port1:e,port2:n}=new MessageChannel;e.onmessage=({data:t})=>A(null!==t),n.postMessage(t,[t])})},fXrx:function(A,t){},fnX1:function(A,t,e){"use strict";e.d(t,"a",(function(){return n}));const n=(A,t)=>e=>A.has(e)||t(e)},fsg3:function(A,t){},gAIX:function(A,t,e){"use strict";e.d(t,"a",(function(){return n}));const n=A=>void 0===A||"number"==typeof A||"string"==typeof A&&("balanced"===A||"interactive"===A||"playback"===A)},gBqf:function(A,t){},gnuX:function(A,t,e){"use strict";e.d(t,"a",(function(){return s}));var n=e("SWU+");const s=(A,t,e,s,i)=>()=>{const o=new WeakMap;return{render(r,a,c){const M=o.get(a);return void 0!==M?Promise.resolve(M):(async(r,a,c)=>{let M=e(r);const l=Object(n.a)(M,a);return l||(M=t(a,{Q:M.Q.value,channelCount:M.channelCount,channelCountMode:M.channelCountMode,channelInterpretation:M.channelInterpretation,detune:M.detune.value,frequency:M.frequency.value,gain:M.gain.value,type:M.type})),o.set(a,M),l?(await A(a,r.Q,M.Q,c),await A(a,r.detune,M.detune,c),await A(a,r.frequency,M.frequency,c),await A(a,r.gain,M.gain,c)):(await s(a,r.Q,M.Q,c),await s(a,r.detune,M.detune,c),await s(a,r.frequency,M.frequency,c),await s(a,r.gain,M.gain,c)),await i(r,a,M,c),M})(r,a,c)}}}},grEA:function(A,t,e){"use strict";e.d(t,"a",(function(){return n}));const n=A=>{let t=null;return{render:(e,n,s)=>(null===t&&(t=(async(t,e,n)=>{const s=e.destination;return await A(t,e,s,n),s})(e,n,s)),t)}}},gvNG:function(A,t,e){"use strict";e.d(t,"a",(function(){return s}));const n={attack:.003,channelCount:2,channelCountMode:"clamped-max",channelInterpretation:"speakers",knee:30,ratio:12,release:.25,threshold:-24},s=(A,t,e,s,i,o,r)=>class extends A{constructor(A,i=n){const a=o(A),c={...n,...i},M=s(a,c),l=r(a);super(A,!1,M,l?e():null),this._attack=t(this,l,M.attack,1,0),this._knee=t(this,l,M.knee,40,0),this._nativeDynamicsCompressorNode=M,this._ratio=t(this,l,M.ratio,20,1),this._release=t(this,l,M.release,1,0),this._threshold=t(this,l,M.threshold,0,-100)}get attack(){return this._attack}get channelCount(){return this._nativeDynamicsCompressorNode.channelCount}set channelCount(A){const t=this._nativeDynamicsCompressorNode.channelCount;if(this._nativeDynamicsCompressorNode.channelCount=A,A>2)throw this._nativeDynamicsCompressorNode.channelCount=t,i()}get channelCountMode(){return this._nativeDynamicsCompressorNode.channelCountMode}set channelCountMode(A){const t=this._nativeDynamicsCompressorNode.channelCountMode;if(this._nativeDynamicsCompressorNode.channelCountMode=A,"max"===A)throw this._nativeDynamicsCompressorNode.channelCountMode=t,i()}get knee(){return this._knee}get ratio(){return this._ratio}get reduction(){return"number"==typeof this._nativeDynamicsCompressorNode.reduction.value?this._nativeDynamicsCompressorNode.reduction.value:this._nativeDynamicsCompressorNode.reduction}get release(){return this._release}get threshold(){return this._threshold}}},h1Un:function(A,t,e){"use strict";e.d(t,"a",(function(){return n}));const n=(A,t,e)=>(n,s)=>{s.channelCount=1,s.channelCountMode="explicit",Object.defineProperty(s,"channelCount",{get:()=>1,set:()=>{throw A()}}),Object.defineProperty(s,"channelCountMode",{get:()=>"explicit",set:()=>{throw A()}});const i=t(n,A=>A.createBufferSource());e(s,()=>{const A=s.numberOfInputs;for(let t=0;t<A;t+=1)i.connect(s,0,t)},()=>i.disconnect(s))}},hL2X:function(A,t){},hNL6:function(A,t){},hZWe:function(A,t,e){"use strict";e.d(t,"a",(function(){return i}));var n=e("jvfW"),s=e("zna5");const i=(A,t,e,i,o,r,a)=>(c,M)=>{const l=e(c,A=>A.createWaveShaper());try{return l.curve=new Float32Array([1]),i(c,M)}catch{}Object(s.a)(l,M);const u=M.curve;if(null!==u&&u.length<2)throw t();Object(n.a)(l,M,"curve"),Object(n.a)(l,M,"oversample");let h=null,g=!1;return a(l,"curve",A=>()=>A.call(l),t=>e=>(t.call(l,e),g&&(o(e)&&null===h?h=A(c,l):o(e)||null===h||(h(),h=null)),e)),r(l,()=>{g=!0,o(l.curve)&&(h=A(c,l))},()=>{g=!1,null!==h&&(h(),h=null)})}},heEd:function(A,t,e){"use strict";e.d(t,"a",(function(){return n}));const n=A=>()=>{if(null===A)return!1;const t=new A(1,1,44100),e=t.createConvolver();e.buffer=t.createBuffer(1,1,t.sampleRate);try{e.buffer=t.createBuffer(1,1,t.sampleRate)}catch{return!1}return!0}},htc0:function(A,t){},hvVe:function(A,t,e){"use strict";e.d(t,"a",(function(){return n}));const n=A=>null!==A&&A.isSecureContext},hz4G:function(A,t){},hzdg:function(A,t){},i6zT:function(A,t){},iBDd:function(A,t){},iEoR:function(A,t){},iPTv:function(A,t,e){"use strict";e.d(t,"a",(function(){return n}));const n=A=>null===A?null:A.hasOwnProperty("AudioBuffer")?A.AudioBuffer:null},iQfx:function(A,t){},iYcO:function(A,t){},ig8J:function(A,t){},ijrL:function(A,t){},imd8:function(A,t){},j1Cx:function(A,t){},j6oL:function(A,t){},j7Jg:function(A,t){},j8Jl:function(A,t){},jB8l:function(A,t){},jSSq:function(A,t){},jW2G:function(A,t){},jryS:function(A,t){},jsEv:function(A,t,e){"use strict";e.d(t,"a",(function(){return s}));const n={channelCount:2,channelCountMode:"explicit",channelInterpretation:"speakers",pan:0},s=(A,t,e,s,i,o)=>class extends A{constructor(A,r=n){const a=i(A),c={...n,...r},M=e(a,c),l=o(a);super(A,!1,M,l?s():null),this._pan=t(this,l,M.pan,1,-1)}get pan(){return this._pan}}},jttC:function(A,t){},jvfW:function(A,t,e){"use strict";e.d(t,"a",(function(){return n}));const n=(A,t,e)=>{const n=t[e];void 0!==n&&n!==A[e]&&(A[e]=n)}},jxxv:function(A,t){},k9jr:function(A,t){},kL2y:function(A,t){},kM3D:function(A,t){},kNlX:function(A,t){},kZjv:function(A,t){},"kho+":function(A,t,e){"use strict";e.d(t,"a",(function(){return n}));const n=A=>"context"in A},"kk/u":function(A,t,e){"use strict";e.d(t,"a",(function(){return n}));const n=A=>{var t;A.stop=(t=A.stop,(e=0)=>{if(e<0)throw new RangeError("The parameter can't be negative.");t.call(A,e)})}},krMw:function(A,t){},ktqq:function(A,t,e){"use strict";e.d(t,"a",(function(){return s}));var n=e("BNHZ");const s=(A,t,e,s,i,o,r,a,c,M,l,u)=>(h,g,m,p=null,w=null)=>{const Y=new n.AutomationEventList(m.defaultValue),d=g?s(Y):null,B={get defaultValue(){return m.defaultValue},get maxValue(){return null===p?m.maxValue:p},get minValue(){return null===w?m.minValue:w},get value(){return m.value},set value(A){m.value=A,B.setValueAtTime(A,h.context.currentTime)},cancelAndHoldAtTime(A){if("function"==typeof m.cancelAndHoldAtTime)null===d&&Y.flush(h.context.currentTime),Y.add(i(A)),m.cancelAndHoldAtTime(A);else{const t=Array.from(Y).pop();null===d&&Y.flush(h.context.currentTime),Y.add(i(A));const e=Array.from(Y).pop();m.cancelScheduledValues(A),t!==e&&void 0!==e&&("exponentialRampToValue"===e.type?m.exponentialRampToValueAtTime(e.value,e.endTime):"linearRampToValue"===e.type?m.linearRampToValueAtTime(e.value,e.endTime):"setValue"===e.type?m.setValueAtTime(e.value,e.startTime):"setValueCurve"===e.type&&m.setValueCurveAtTime(e.values,e.startTime,e.duration))}return B},cancelScheduledValues:A=>(null===d&&Y.flush(h.context.currentTime),Y.add(o(A)),m.cancelScheduledValues(A),B),exponentialRampToValueAtTime:(A,t)=>(null===d&&Y.flush(h.context.currentTime),Y.add(r(A,t)),m.exponentialRampToValueAtTime(A,t),B),linearRampToValueAtTime:(A,t)=>(null===d&&Y.flush(h.context.currentTime),Y.add(a(A,t)),m.linearRampToValueAtTime(A,t),B),setTargetAtTime:(A,t,e)=>(null===d&&Y.flush(h.context.currentTime),Y.add(c(A,t,e)),m.setTargetAtTime(A,t,e),B),setValueAtTime:(A,t)=>(null===d&&Y.flush(h.context.currentTime),Y.add(M(A,t)),m.setValueAtTime(A,t),B),setValueCurveAtTime(A,t,e){if(null!==u&&"webkitAudioContext"===u.name){const n=t+e,s=h.context.sampleRate,i=Math.ceil(t*s),o=Math.floor(n*s),r=o-i,a=new Float32Array(r);for(let M=0;M<r;M+=1){const n=(A.length-1)/e*((i+M)/s-t),o=Math.floor(n),r=Math.ceil(n);a[M]=o===r?A[o]:(1-(n-o))*A[o]+(1-(r-n))*A[r]}null===d&&Y.flush(h.context.currentTime),Y.add(l(a,t,e)),m.setValueCurveAtTime(a,t,e);const c=o/s;c<n&&B.setValueAtTime(a[a.length-1],c),B.setValueAtTime(A[A.length-1],n)}else null===d&&Y.flush(h.context.currentTime),Y.add(l(A,t,e)),m.setValueCurveAtTime(A,t,e);return B}};return e.set(B,m),t.set(B,h),A(B,d),B}},"l+/H":function(A,t,e){"use strict";e.d(t,"a",(function(){return a}));var n=e("Y/Aa"),s=e("jvfW"),i=e("zna5"),o=e("JRKu"),r=e("kk/u");const a=(A,t,e,a,c,M,l)=>(u,h)=>{const g=e(u,A=>A.createOscillator());return Object(i.a)(g,h),Object(n.a)(g,h,"detune"),Object(n.a)(g,h,"frequency"),void 0!==h.periodicWave?g.setPeriodicWave(h.periodicWave):Object(s.a)(g,h,"type"),t(a,()=>a(u))||Object(o.a)(g),t(c,()=>c(u))||l(g,u),t(M,()=>M(u))||Object(r.a)(g),A(u,g),g}},l1Qu:function(A,t){},l1x3:function(A,t){},lNmD:function(A,t,e){"use strict";e.d(t,"a",(function(){return i}));var n=e("dPZM"),s=e("XXdY");const i=A=>Object(s.a)(n.e,A)},labN:function(A,t){},lbaV:function(A,t,e){"use strict";e.d(t,"a",(function(){return s}));var n=e("gAIX");const s=(A,t,e,s,i,o,r,a,c)=>class extends A{constructor(A={}){if(null===c)throw new Error("Missing the native AudioContext constructor.");const t=new c(A);if(null===t)throw s();if(!Object(n.a)(A.latencyHint))throw new TypeError(`The provided value '${A.latencyHint}' is not a valid enum value of type AudioContextLatencyCategory.`);if(void 0!==A.sampleRate&&t.sampleRate!==A.sampleRate)throw e();super(t,2);const{latencyHint:i}=A,{sampleRate:o}=t;if(this._baseLatency="number"==typeof t.baseLatency?t.baseLatency:"balanced"===i?512/o:"interactive"===i||void 0===i?256/o:"playback"===i?1024/o:128*Math.max(2,Math.min(128,Math.round(i*o/128)))/o,this._nativeAudioContext=t,this._state=null,"running"===t.state){this._state="suspended";const A=()=>{"suspended"===this._state&&(this._state=null),t.removeEventListener("statechange",A)};t.addEventListener("statechange",A)}}get baseLatency(){return this._baseLatency}get state(){return null!==this._state?this._state:this._nativeAudioContext.state}close(){return"closed"===this.state?this._nativeAudioContext.close().then(()=>{throw t()}):("suspended"===this._state&&(this._state=null),this._nativeAudioContext.close())}createMediaElementSource(A){return new i(this,{mediaElement:A})}createMediaStreamDestination(){return new o(this)}createMediaStreamSource(A){return new r(this,{mediaStream:A})}createMediaStreamTrackSource(A){return new a(this,{mediaStreamTrack:A})}resume(){return"suspended"===this._state?new Promise((A,t)=>{const e=()=>{this._nativeAudioContext.removeEventListener("statechange",e),"running"===this._nativeAudioContext.state?A():this.resume().then(A,t)};this._nativeAudioContext.addEventListener("statechange",e)}):this._nativeAudioContext.resume().catch(A=>{if(void 0===A||15===A.code)throw t();throw A})}suspend(){return this._nativeAudioContext.suspend().catch(A=>{if(void 0===A)throw t();throw A})}}},lh0P:function(A,t){},lrIq:function(A,t){},m1QB:function(A,t){},m7Fy:function(A,t){},m7HT:function(A,t,e){"use strict";e.d(t,"a",(function(){return n}));const n=A=>(t,{disableNormalization:e,imag:n,real:s})=>{const i=A(t),o=new Float32Array(n),r=new Float32Array(s);return null!==i?i.createPeriodicWave(r,o,{disableNormalization:e}):t.createPeriodicWave(r,o,{disableNormalization:e})}},mFIk:function(A,t){},mMln:function(A,t){},mjR7:function(A,t){},mlNg:function(A,t){},mmQx:function(A,t){},mwAi:function(A,t){},"n+Vi":function(A,t,e){"use strict";e.d(t,"a",(function(){return N}));var n=e("dPZM"),s=e("tF58"),i=e("6MIv");const o=A=>"port"in A;var r=e("L+VK"),a=e("Anyo");const c=(A,t)=>{if(!Object(a.a)(A).delete(t))throw new Error("Missing the expected event listener.")};var M=e("9yae"),l=e("Knm5"),u=e("Tatq"),h=e("ME4u"),g=e("lNmD"),m=e("XXdY"),p=e("DiTw"),w=e("EdRB"),Y=e("PMuG");const d=A=>!n.a.has(A),B=(A,t)=>{const e=Array.from(A).filter(t);if(e.length>1)throw Error("More than one element was found.");if(0===e.length)throw Error("No element was found.");const[n]=e;return A.delete(n),n};var D=e("L5Qq"),G=e("rl1c");const C=(A,t)=>{!o(A)&&t.every(A=>0===A.size)&&Object(G.a)(A)},E=A=>new Promise(t=>{const e=A.createScriptProcessor(256,1,1),n=A.createGain(),s=A.createBuffer(1,2,44100),i=s.getChannelData(0);i[0]=1,i[1]=1;const o=A.createBufferSource();o.buffer=s,o.loop=!0,o.connect(e).connect(A.destination),o.connect(n),o.disconnect(n),e.onaudioprocess=n=>{const s=n.inputBuffer.getChannelData(0);Array.prototype.some.call(s,A=>1===A)?t(!0):t(!1),o.stop(),e.onaudioprocess=null,o.disconnect(e),e.disconnect(A.destination)},o.start()}),I=(A,t)=>{const e=new Map;for(const n of A)for(const A of n){const t=e.get(A);e.set(A,void 0===t?1:t+1)}e.forEach((A,e)=>t(e,A))};var y=e("kho+");const Q=(A,t,[e,n,s],i)=>{Object(p.a)(A[n],[t,e,s],A=>A[0]===t&&A[1]===e,i)},Z=(A,t,[e,n],s)=>{Object(p.a)(A,[t,e,n],A=>A[0]===t&&A[1]===e,s)},T=(A,t,[e,n,s],i)=>{const o=A.get(e);void 0===o?A.set(e,new Set([[n,t,s]])):Object(p.a)(o,[n,t,s],A=>A[0]===n&&A[1]===t,i)},k=(A,[t,e,n],s)=>{const i=A.get(t);void 0===i?A.set(t,new Set([[e,n]])):Object(p.a)(i,[e,n],A=>A[0]===e,s)},S=(A,t,e,n)=>{const s=Object(m.a)(A,t),i=B(s,A=>A[0]===e&&A[1]===n);return 0===s.size&&A.delete(t),i},z=(A,t,e)=>{const n=Object(m.a)(A,t),s=B(n,A=>A[0]===e);return 0===n.size&&A.delete(t),s},U=(A,t,e)=>{for(const n of A)if(n[0]===t&&n[1]===e)return A.delete(n),n;return null},b=(A,t,e,n)=>{const[s,i]=((A,t,e,n)=>{const{activeInputs:s,passiveInputs:i}=Object(l.a)(t),o=U(s[n],A,e);return null===o?[S(i,A,e,n)[2],!1]:[o[2],!0]})(A,t,e,n);if(null!==s&&(c(A,s),i&&!Object(Y.a)(A)&&Object(M.a)(Object(h.a)(A),Object(h.a)(t),e,n)),Object(w.a)(t)){const{activeInputs:A}=Object(l.a)(t);C(t,A)}},j=(A,t,e)=>{const[n,s]=((A,t,e)=>{const{activeInputs:n,passiveInputs:s}=Object(u.a)(t),i=U(n,A,e);return null===i?[z(s,A,e)[1],!1]:[i[2],!0]})(A,t,e);null!==n&&(c(A,n),s&&!Object(Y.a)(A)&&Object(h.a)(A).disconnect(Object(g.a)(t),e))},N=(A,t,e,c,m,G,U,N,x,K,J,R,W,O,q)=>class extends K{constructor(t,s,i,o){super(i),this._context=t,this._nativeAudioNode=i;const r=J(t);R(r)&&!0!==e(E,()=>E(r))&&(A=>{const t=new Map;var e,n;A.connect=(e=A.connect.bind(A),(A,n=0,s=0)=>{const i=Object(y.a)(A)?e(A,n,s):e(A,n),o=t.get(A);return void 0===o?t.set(A,[{input:s,output:n}]):o.every(A=>A.input!==s||A.output!==n)&&o.push({input:s,output:n}),i}),A.disconnect=(n=A.disconnect,(e,s,i)=>{if(n.apply(A),void 0===e)t.clear();else if("number"==typeof e)for(const[A,n]of t){const s=n.filter(A=>A.output!==e);0===s.length?t.delete(A):t.set(A,s)}else if(t.has(e))if(void 0===s)t.delete(e);else{const A=t.get(e);if(void 0!==A){const n=A.filter(A=>A.output!==s&&(A.input!==i||void 0===i));0===n.length?t.delete(e):t.set(e,n)}}for(const[n,o]of t)o.forEach(t=>{Object(y.a)(n)?A.connect(n,t.output,t.input):A.connect(n,t.output)})})})(i),n.c.set(this,i),n.i.set(this,new Set),s&&Object(D.a)(this),A(this,o,i)}get channelCount(){return this._nativeAudioNode.channelCount}set channelCount(A){this._nativeAudioNode.channelCount=A}get channelCountMode(){return this._nativeAudioNode.channelCountMode}set channelCountMode(A){this._nativeAudioNode.channelCountMode=A}get channelInterpretation(){return this._nativeAudioNode.channelInterpretation}set channelInterpretation(A){this._nativeAudioNode.channelInterpretation=A}get context(){return this._context}get numberOfInputs(){return this._nativeAudioNode.numberOfInputs}get numberOfOutputs(){return this._nativeAudioNode.numberOfOutputs}connect(A,e=0,n=0){if(e<0||e>=this._nativeAudioNode.numberOfOutputs)throw m();const i=J(this._context),E=q(i);if(W(A)||O(A))throw G();if(Object(s.a)(A)){const s=Object(h.a)(A);try{const a=Object(r.a)(this._nativeAudioNode,s,e,n);if(E||d(this)?this._nativeAudioNode.disconnect(...a):d(A)&&Object(D.a)(A),o(A)){const A=t.get(s);if(void 0===A){const A=i.createGain();A.connect(a[0],0,a[2]),t.set(s,new Map([[n,A]]))}else if(void 0===A.get(n)){const t=i.createGain();t.connect(a[0],0,a[2]),A.set(n,t)}}}catch(b){if(12===b.code)throw G();throw b}if(E?((A,t,e,n)=>{const{outputs:s}=Object(l.a)(A);if(Object(p.a)(s,[t,e,n],A=>A[0]===t&&A[1]===e&&A[2]===n,!0)){const{activeInputs:s}=Object(l.a)(t);return Q(s,A,[e,n,null],!0),!0}return!1})(this,A,e,n):((A,t,e,n)=>{const{activeInputs:s,passiveInputs:i}=Object(l.a)(t),{outputs:o}=Object(l.a)(A),c=Object(a.a)(A),u=o=>{const a=Object(h.a)(t),c=Object(h.a)(A);if(o){const o=S(i,A,e,n);Q(s,A,o,!1),Object(Y.a)(A)||Object(r.a)(c,a,e,n),d(t)&&Object(D.a)(t)}else{const o=((A,t,e,n)=>B(A[n],A=>A[0]===t&&A[1]===e))(s,A,e,n);T(i,n,o,!1),Object(Y.a)(A)||Object(M.a)(c,a,e,n),Object(w.a)(t)&&C(t,s)}};return!!Object(p.a)(o,[t,e,n],A=>A[0]===t&&A[1]===e&&A[2]===n,!0)&&(c.add(u),Object(w.a)(A)?Q(s,A,[e,n,u],!0):T(i,n,[A,e,u],!0),!0)})(this,A,e,n)){const t=x([this],A);I(t,c(E))}return A}const y=Object(g.a)(A);if("playbackRate"===y.name)throw U();try{this._nativeAudioNode.connect(y,e),(E||d(this))&&this._nativeAudioNode.disconnect(y,e)}catch(b){if(12===b.code)throw G();throw b}if(E?((A,t,e)=>{const{outputs:n}=Object(l.a)(A);if(Object(p.a)(n,[t,e],A=>A[0]===t&&A[1]===e,!0)){const{activeInputs:n}=Object(u.a)(t);return Z(n,A,[e,null],!0),!0}return!1})(this,A,e):((A,t,e)=>{const{activeInputs:n,passiveInputs:s}=Object(u.a)(t),{outputs:i}=Object(l.a)(A),o=Object(a.a)(A),r=i=>{const o=Object(h.a)(A),r=Object(g.a)(t);if(i){const t=z(s,A,e);Z(n,A,t,!1),Object(Y.a)(A)||o.connect(r,e)}else{const t=((A,t,e)=>B(A,A=>A[0]===t&&A[1]===e))(n,A,e);k(s,t,!1),Object(Y.a)(A)||o.disconnect(r,e)}};return!!Object(p.a)(i,[t,e],A=>A[0]===t&&A[1]===e,!0)&&(o.add(r),Object(w.a)(A)?Z(n,A,[e,r],!0):k(s,[A,e,r],!0),!0)})(this,A,e)){const t=x([this],A);I(t,c(E))}}disconnect(A,t,e){let n;if(void 0===A)n=(A=>{const t=Object(l.a)(A),e=[];for(const n of t.outputs)Object(i.a)(n)?b(A,...n):j(A,...n),e.push(n[0]);return t.outputs.clear(),e})(this);else if("number"==typeof A){if(A<0||A>=this.numberOfOutputs)throw m();n=((A,t)=>{const e=Object(l.a)(A),n=[];for(const s of e.outputs)s[1]===t&&(Object(i.a)(s)?b(A,...s):j(A,...s),n.push(s[0]),e.outputs.delete(s));return n})(this,A)}else{if(void 0!==t&&(t<0||t>=this.numberOfOutputs))throw m();if(Object(s.a)(A)&&void 0!==e&&(e<0||e>=A.numberOfInputs))throw m();if(n=((A,t,e,n)=>{const s=Object(l.a)(A);return Array.from(s.outputs).filter(A=>!(A[0]!==t||void 0!==e&&A[1]!==e||void 0!==n&&A[2]!==n)).map(t=>(Object(i.a)(t)?b(A,...t):j(A,...t),s.outputs.delete(t),t[0]))})(this,A,t,e),0===n.length)throw G()}for(const s of n){const A=x([this],s);I(A,N)}}}},"n/xI":function(A,t){},n0IT:function(A,t){},nFs0:function(A,t,e){"use strict";e.d(t,"a",(function(){return o}));var n=e("L5Qq"),s=e("rl1c");const i={channelCount:2,channelCountMode:"max",channelInterpretation:"speakers",detune:0,frequency:440,type:"sine"},o=(A,t,e,o,r,a,c,M)=>class extends A{constructor(A,e=i){const n=a(A),s={...i,...e},M=o(n,s),l=c(n),u=l?r():null,h=A.sampleRate/2;super(A,!1,M,u),this._detune=t(this,l,M.detune,153600,-153600),this._frequency=t(this,l,M.frequency,h,-h),this._nativeOscillatorNode=M,this._onended=null,this._oscillatorNodeRenderer=u,null!==this._oscillatorNodeRenderer&&void 0!==s.periodicWave&&(this._oscillatorNodeRenderer.periodicWave=s.periodicWave)}get detune(){return this._detune}get frequency(){return this._frequency}get onended(){return this._onended}set onended(A){const t="function"==typeof A?M(this,A):null;this._nativeOscillatorNode.onended=t;const e=this._nativeOscillatorNode.onended;this._onended=null!==e&&e===t?A:e}get type(){return this._nativeOscillatorNode.type}set type(A){if(this._nativeOscillatorNode.type=A,"custom"===A)throw e();null!==this._oscillatorNodeRenderer&&(this._oscillatorNodeRenderer.periodicWave=null)}setPeriodicWave(A){this._nativeOscillatorNode.setPeriodicWave(A),null!==this._oscillatorNodeRenderer&&(this._oscillatorNodeRenderer.periodicWave=A)}start(A=0){if(this._nativeOscillatorNode.start(A),null!==this._oscillatorNodeRenderer)this._oscillatorNodeRenderer.start=A;else{Object(n.a)(this);const A=()=>{this._nativeOscillatorNode.removeEventListener("ended",A),setTimeout(()=>Object(s.a)(this),1e3)};this._nativeOscillatorNode.addEventListener("ended",A)}}stop(A=0){this._nativeOscillatorNode.stop(A),null!==this._oscillatorNodeRenderer&&(this._oscillatorNodeRenderer.stop=A)}}},nGR8:function(A,t){},nIXe:function(A,t,e){"use strict";e.d(t,"a",(function(){return n}));class n{constructor(A){this._map=new Map(A)}get size(){return this._map.size}entries(){return this._map.entries()}forEach(A,t=null){return this._map.forEach((e,n)=>A.call(t,e,n,this))}get(A){return this._map.get(A)}has(A){return this._map.has(A)}keys(){return this._map.keys()}values(){return this._map.values()}}},nKNV:function(A,t){},nMty:function(A,t){},npGI:function(A,t){},npgF:function(A,t){},nxAH:function(A,t){},o3wd:function(A,t){},o846:function(A,t){},oCs4:function(A,t){},oJKu:function(A,t){},oU2c:function(A,t,e){"use strict";e.d(t,"a",(function(){return i}));var n=e("jvfW"),s=e("zna5");const i=(A,t,e,i)=>(o,r)=>{const a=A(o,A=>A.createConvolver());try{a.channelCount=1}catch(c){return t(o,r)}if(Object(s.a)(a,r),r.disableNormalization===a.normalize&&(a.normalize=!r.disableNormalization),Object(n.a)(a,r,"buffer"),r.channelCount>2)throw e();if(i(a,"channelCount",A=>()=>A.call(a),A=>t=>{if(t>2)throw e();return A.call(a,t)}),"max"===r.channelCountMode)throw e();return i(a,"channelCountMode",A=>()=>A.call(a),A=>t=>{if("max"===t)throw e();return A.call(a,t)}),a}},oaLP:function(A,t){},"oc+8":function(A,t){},omSt:function(A,t){},pBau:function(A,t){},pct4:function(A,t){},peFD:function(A,t){},ptbo:function(A,t){},qEcr:function(A,t){},qFOa:function(A,t){},qTOt:function(A,t){},qaZc:function(A,t){},qk4J:function(A,t,e){"use strict";e.d(t,"a",(function(){return o}));var n=e("Y/Aa"),s=e("jvfW"),i=e("zna5");const o=A=>(t,e)=>{const o=A(t,A=>A.createBiquadFilter());return Object(i.a)(o,e),Object(n.a)(o,e,"Q"),Object(n.a)(o,e,"detune"),Object(n.a)(o,e,"frequency"),Object(n.a)(o,e,"gain"),Object(s.a)(o,e,"type"),o}},qktI:function(A,t,e){"use strict";e.d(t,"a",(function(){return n}));const n=(A,t,e,n)=>class extends A{constructor(A,s){const i=e(A),o=t(i,s);if(n(i))throw new TypeError;super(A,!0,o,null),this._nativeMediaStreamAudioSourceNode=o}get mediaStream(){return this._nativeMediaStreamAudioSourceNode.mediaStream}}},qzuq:function(A,t,e){"use strict";e.d(t,"a",(function(){return n}));const n=()=>"undefined"==typeof window?null:window},r1lH:function(A,t){},r2Z3:function(A,t,e){"use strict";e.d(t,"a",(function(){return n}));const n=A=>(t,e,n,s)=>A(t,A=>A.createScriptProcessor(e,n,s))},r3d1:function(A,t){},r4Hb:function(A,t){},r4tT:function(A,t){},r724:function(A,t){},rEua:function(A,t){},rT3k:function(A,t,e){"use strict";e.d(t,"a",(function(){return n}));const n=A=>(t,e)=>{A.set(t,{activeInputs:new Set,passiveInputs:new WeakMap,renderer:e})}},rfcS:function(A,t){},rl1c:function(A,t,e){"use strict";e.d(t,"a",(function(){return i}));var n=e("dPZM"),s=e("Anyo");const i=A=>{if(!n.a.has(A))throw new Error("The AudioNode is not stored.");n.a.delete(A),Object(s.a)(A).forEach(A=>A(!1))}},rlmS:function(A,t){},roH0:function(A,t){},"s+2q":function(A,t){},s0Dh:function(A,t,e){"use strict";e.d(t,"a",(function(){return o}));var n=e("jvfW"),s=e("zna5");const i=A=>"function"==typeof A.getFloatTimeDomainData,o=(A,t,e)=>(o,r)=>{const a=e(o,A=>A.createAnalyser());if(Object(s.a)(a,r),!(r.maxDecibels>r.minDecibels))throw t();return Object(n.a)(a,r,"fftSize"),Object(n.a)(a,r,"maxDecibels"),Object(n.a)(a,r,"minDecibels"),Object(n.a)(a,r,"smoothingTimeConstant"),A(i,()=>i(a))||(A=>{A.getFloatTimeDomainData=t=>{const e=new Uint8Array(t.length);A.getByteTimeDomainData(e);const n=Math.max(e.length,A.fftSize);for(let A=0;A<n;A+=1)t[A]=.0078125*(e[A]-128);return t}})(a),a}},"s0M+":function(A,t){},sAAB:function(A,t){},sCYc:function(A,t){},sEUg:function(A,t){},sTSC:function(A,t,e){"use strict";e.d(t,"a",(function(){return n}));const n=(A,t,e,n,s,i,o,r,a,c,M,l,u,h,g,m,p,w,Y,d)=>class extends g{constructor(t,e){super(t,e),this._nativeContext=t,this._audioWorklet=void 0===A?void 0:{addModule:(t,e)=>A(this,t,e)}}get audioWorklet(){return this._audioWorklet}createAnalyser(){return new t(this)}createBiquadFilter(){return new s(this)}createBuffer(A,t,n){return new e({length:t,numberOfChannels:A,sampleRate:n})}createBufferSource(){return new n(this)}createChannelMerger(A=6){return new i(this,{numberOfInputs:A})}createChannelSplitter(A=6){return new o(this,{numberOfOutputs:A})}createConstantSource(){return new r(this)}createConvolver(){return new a(this)}createDelay(A=1){return new M(this,{maxDelayTime:A})}createDynamicsCompressor(){return new l(this)}createGain(){return new u(this)}createIIRFilter(A,t){return new h(this,{feedback:t,feedforward:A})}createOscillator(){return new m(this)}createPanner(){return new p(this)}createPeriodicWave(A,t,e={disableNormalization:!1}){return new w(this,{...e,imag:t,real:A})}createStereoPanner(){return new Y(this)}createWaveShaper(){return new d(this)}decodeAudioData(A,t,e){return c(this._nativeContext,A).then(A=>("function"==typeof t&&t(A),A)).catch(A=>{throw"function"==typeof e&&e(A),A})}}},sTV2:function(A,t){},sdK2:function(A,t){},sh5e:function(A,t,e){"use strict";e.d(t,"a",(function(){return n}));const n=A=>()=>null!==A&&A.hasOwnProperty("isSecureContext")},sieG:function(A,t){},sptN:function(A,t){},srTO:function(A,t){},swcp:function(A,t){},t0tQ:function(A,t){},t43w:function(A,t){},t6y6:function(A,t){},tAYT:function(A,t){},tF58:function(A,t,e){"use strict";e.d(t,"a",(function(){return n}));const n=A=>"context"in A},tIAH:function(A,t){},tYDY:function(A,t){},tapQ:function(A,t){},tntC:function(A,t,e){"use strict";e.d(t,"a",(function(){return n}));const n=()=>{try{return new DOMException("","EncodingError")}catch(A){return A.code=0,A.name="EncodingError",A}}},toED:function(A,t){},ttLD:function(A,t){},u9RD:function(A,t){},ufFQ:function(A,t){},ufyd:function(A,t){},ulit:function(A,t,e){"use strict";e.d(t,"a",(function(){return n}));const n=(A,t,e)=>class extends A{constructor(A,n){const s=e(A);super(A,!0,t(s,n),null)}}},uloL:function(A,t){},una9:function(A,t){},upBd:function(A,t,e){"use strict";e.d(t,"a",(function(){return s}));var n=e("SWU+");const s=(A,t,e,s,i)=>()=>{const o=new WeakMap;return{render(r,a,c){const M=o.get(a);return void 0!==M?Promise.resolve(M):(async(r,a,c)=>{let M=e(r);const l=Object(n.a)(M,a);return l||(M=t(a,{attack:M.attack.value,channelCount:M.channelCount,channelCountMode:M.channelCountMode,channelInterpretation:M.channelInterpretation,knee:M.knee.value,ratio:M.ratio.value,release:M.release.value,threshold:M.threshold.value})),o.set(a,M),l?(await A(a,r.attack,M.attack,c),await A(a,r.knee,M.knee,c),await A(a,r.ratio,M.ratio,c),await A(a,r.release,M.release,c),await A(a,r.threshold,M.threshold,c)):(await s(a,r.attack,M.attack,c),await s(a,r.knee,M.knee,c),await s(a,r.ratio,M.ratio,c),await s(a,r.release,M.release,c),await s(a,r.threshold,M.threshold,c)),await i(r,a,M,c),M})(r,a,c)}}}},urvi:function(A,t){},v1w8:function(A,t){},vIbL:function(A,t){},vJES:function(A,t){},vJN5:function(A,t){},vM74:function(A,t,e){"use strict";e.d(t,"a",(function(){return n}));const n=()=>{try{return new DOMException("","IndexSizeError")}catch(A){return A.code=1,A.name="IndexSizeError",A}}},vfd9:function(A,t){},"vk/g":function(A,t){},vlu2:function(A,t){},vrbq:function(A,t){},w7yV:function(A,t){},wQCP:function(A,t,e){"use strict";e.d(t,"a",(function(){return s}));const n={disableNormalization:!1},s=(A,t,e)=>class s{constructor(s,i){const o=t(s),r={...n,...i},a=A(o,r);return e.add(a),a}static[Symbol.hasInstance](A){return null!==A&&"object"==typeof A&&Object.getPrototypeOf(A)===s.prototype||e.has(A)}}},wa90:function(A,t){},wcPs:function(A,t){},wdAX:function(A,t,e){"use strict";e.d(t,"a",(function(){return n}));const n=()=>{try{return new DOMException("","UnknownError")}catch(A){return A.name="UnknownError",A}}},weul:function(A,t){},wkgU:function(A,t){},wxk5:function(A,t){},x970:function(A,t,e){"use strict";e.d(t,"a",(function(){return i}));var n=e("YvTh");const s={channelCount:2,channelCountMode:"max",channelInterpretation:"speakers",gain:1},i=(A,t,e,i,o,r)=>class extends A{constructor(A,a=s){const c=o(A),M={...s,...a},l=i(c,M),u=r(c);super(A,!1,l,u?e():null),this._gain=t(this,u,l.gain,n.b,n.a)}get gain(){return this._gain}}},xODY:function(A,t){},xQhs:function(A,t,e){"use strict";e.d(t,"a",(function(){return n}));const n=A=>t=>{const e=A(t,A=>A.createBufferSource());e.start();try{e.start()}catch{return!0}return!1}},xgK6:function(A,t){},xghV:function(A,t){},xlCC:function(A,t){},xm0Z:function(A,t){},xrCu:function(A,t){},xsbe:function(A,t){},yKfm:function(A,t){},yMTn:function(A,t){},yb2S:function(A,t){},yclo:function(A,t,e){"use strict";e.d(t,"a",(function(){return n}));const n=A=>(t,e)=>{const n=A(t,{channelCount:1,channelCountMode:"explicit",channelInterpretation:"discrete",gain:0});e.connect(n).connect(n.context.destination);const s=()=>{e.removeEventListener("ended",s),e.disconnect(n),n.disconnect()};e.addEventListener("ended",s)}},yen9:function(A,t){},"yh+Y":function(A,t){},yhFC:function(A,t){},yowc:function(A,t){},"z++k":function(A,t,e){"use strict";e.d(t,"a",(function(){return n}));const n=(A,t,e,n,s)=>{"function"==typeof A.copyToChannel?0!==t[e].byteLength&&A.copyToChannel(t[e],n,s):0!==t[e].byteLength&&A.getChannelData(n).set(t[e],s)}},"z+fr":function(A,t){},z2JV:function(A,t){},z2mF:function(A,t){},z64H:function(A,t){},zBvS:function(A,t){},zC0a:function(A,t){},zJKP:function(A,t){},zLgK:function(A,t){},zLzO:function(A,t,e){"use strict";e.d(t,"a",(function(){return n}));const n=A=>t=>{const e=A(t,A=>A.createOscillator());try{e.start(-1)}catch(n){return n instanceof RangeError}return!1}},zUnb:function(A,t,e){"use strict";function n(A){return"function"==typeof A}e.r(t);let s=!1;const i={Promise:void 0,set useDeprecatedSynchronousErrorHandling(A){if(A){const A=new Error;console.warn("DEPRECATED! RxJS was set to use deprecated synchronous error handling behavior by code at: \n"+A.stack)}else s&&console.log("RxJS: Back to a better error behavior. Thank you. <3");s=A},get useDeprecatedSynchronousErrorHandling(){return s}};function o(A){setTimeout(()=>{throw A},0)}const r={closed:!0,next(A){},error(A){if(i.useDeprecatedSynchronousErrorHandling)throw A;o(A)},complete(){}},a=(()=>Array.isArray||(A=>A&&"number"==typeof A.length))();function c(A){return null!==A&&"object"==typeof A}const M=(()=>{function A(A){return Error.call(this),this.message=A?`${A.length} errors occurred during unsubscription:\n${A.map((A,t)=>`${t+1}) ${A.toString()}`).join("\n  ")}`:"",this.name="UnsubscriptionError",this.errors=A,this}return A.prototype=Object.create(Error.prototype),A})();let l=(()=>{class A{constructor(A){this.closed=!1,this._parentOrParents=null,this._subscriptions=null,A&&(this._unsubscribe=A)}unsubscribe(){let t;if(this.closed)return;let{_parentOrParents:e,_unsubscribe:s,_subscriptions:i}=this;if(this.closed=!0,this._parentOrParents=null,this._subscriptions=null,e instanceof A)e.remove(this);else if(null!==e)for(let A=0;A<e.length;++A)e[A].remove(this);if(n(s))try{s.call(this)}catch(o){t=o instanceof M?u(o.errors):[o]}if(a(i)){let A=-1,e=i.length;for(;++A<e;){const e=i[A];if(c(e))try{e.unsubscribe()}catch(o){t=t||[],o instanceof M?t=t.concat(u(o.errors)):t.push(o)}}}if(t)throw new M(t)}add(t){let e=t;if(!t)return A.EMPTY;switch(typeof t){case"function":e=new A(t);case"object":if(e===this||e.closed||"function"!=typeof e.unsubscribe)return e;if(this.closed)return e.unsubscribe(),e;if(!(e instanceof A)){const t=e;e=new A,e._subscriptions=[t]}break;default:throw new Error("unrecognized teardown "+t+" added to Subscription.")}let{_parentOrParents:n}=e;if(null===n)e._parentOrParents=this;else if(n instanceof A){if(n===this)return e;e._parentOrParents=[n,this]}else{if(-1!==n.indexOf(this))return e;n.push(this)}const s=this._subscriptions;return null===s?this._subscriptions=[e]:s.push(e),e}remove(A){const t=this._subscriptions;if(t){const e=t.indexOf(A);-1!==e&&t.splice(e,1)}}}return A.EMPTY=function(A){return A.closed=!0,A}(new A),A})();function u(A){return A.reduce((A,t)=>A.concat(t instanceof M?t.errors:t),[])}const h=(()=>"function"==typeof Symbol?Symbol("rxSubscriber"):"@@rxSubscriber_"+Math.random())();class g extends l{constructor(A,t,e){switch(super(),this.syncErrorValue=null,this.syncErrorThrown=!1,this.syncErrorThrowable=!1,this.isStopped=!1,arguments.length){case 0:this.destination=r;break;case 1:if(!A){this.destination=r;break}if("object"==typeof A){A instanceof g?(this.syncErrorThrowable=A.syncErrorThrowable,this.destination=A,A.add(this)):(this.syncErrorThrowable=!0,this.destination=new m(this,A));break}default:this.syncErrorThrowable=!0,this.destination=new m(this,A,t,e)}}[h](){return this}static create(A,t,e){const n=new g(A,t,e);return n.syncErrorThrowable=!1,n}next(A){this.isStopped||this._next(A)}error(A){this.isStopped||(this.isStopped=!0,this._error(A))}complete(){this.isStopped||(this.isStopped=!0,this._complete())}unsubscribe(){this.closed||(this.isStopped=!0,super.unsubscribe())}_next(A){this.destination.next(A)}_error(A){this.destination.error(A),this.unsubscribe()}_complete(){this.destination.complete(),this.unsubscribe()}_unsubscribeAndRecycle(){const{_parentOrParents:A}=this;return this._parentOrParents=null,this.unsubscribe(),this.closed=!1,this.isStopped=!1,this._parentOrParents=A,this}}class m extends g{constructor(A,t,e,s){let i;super(),this._parentSubscriber=A;let o=this;n(t)?i=t:t&&(i=t.next,e=t.error,s=t.complete,t!==r&&(o=Object.create(t),n(o.unsubscribe)&&this.add(o.unsubscribe.bind(o)),o.unsubscribe=this.unsubscribe.bind(this))),this._context=o,this._next=i,this._error=e,this._complete=s}next(A){if(!this.isStopped&&this._next){const{_parentSubscriber:t}=this;i.useDeprecatedSynchronousErrorHandling&&t.syncErrorThrowable?this.__tryOrSetError(t,this._next,A)&&this.unsubscribe():this.__tryOrUnsub(this._next,A)}}error(A){if(!this.isStopped){const{_parentSubscriber:t}=this,{useDeprecatedSynchronousErrorHandling:e}=i;if(this._error)e&&t.syncErrorThrowable?(this.__tryOrSetError(t,this._error,A),this.unsubscribe()):(this.__tryOrUnsub(this._error,A),this.unsubscribe());else if(t.syncErrorThrowable)e?(t.syncErrorValue=A,t.syncErrorThrown=!0):o(A),this.unsubscribe();else{if(this.unsubscribe(),e)throw A;o(A)}}}complete(){if(!this.isStopped){const{_parentSubscriber:A}=this;if(this._complete){const t=()=>this._complete.call(this._context);i.useDeprecatedSynchronousErrorHandling&&A.syncErrorThrowable?(this.__tryOrSetError(A,t),this.unsubscribe()):(this.__tryOrUnsub(t),this.unsubscribe())}else this.unsubscribe()}}__tryOrUnsub(A,t){try{A.call(this._context,t)}catch(e){if(this.unsubscribe(),i.useDeprecatedSynchronousErrorHandling)throw e;o(e)}}__tryOrSetError(A,t,e){if(!i.useDeprecatedSynchronousErrorHandling)throw new Error("bad call");try{t.call(this._context,e)}catch(n){return i.useDeprecatedSynchronousErrorHandling?(A.syncErrorValue=n,A.syncErrorThrown=!0,!0):(o(n),!0)}return!1}_unsubscribe(){const{_parentSubscriber:A}=this;this._context=null,this._parentSubscriber=null,A.unsubscribe()}}const p=(()=>"function"==typeof Symbol&&Symbol.observable||"@@observable")();function w(A){return A}let Y=(()=>{class A{constructor(A){this._isScalar=!1,A&&(this._subscribe=A)}lift(t){const e=new A;return e.source=this,e.operator=t,e}subscribe(A,t,e){const{operator:n}=this,s=function(A,t,e){if(A){if(A instanceof g)return A;if(A[h])return A[h]()}return A||t||e?new g(A,t,e):new g(r)}(A,t,e);if(s.add(n?n.call(s,this.source):this.source||i.useDeprecatedSynchronousErrorHandling&&!s.syncErrorThrowable?this._subscribe(s):this._trySubscribe(s)),i.useDeprecatedSynchronousErrorHandling&&s.syncErrorThrowable&&(s.syncErrorThrowable=!1,s.syncErrorThrown))throw s.syncErrorValue;return s}_trySubscribe(A){try{return this._subscribe(A)}catch(t){i.useDeprecatedSynchronousErrorHandling&&(A.syncErrorThrown=!0,A.syncErrorValue=t),function(A){for(;A;){const{closed:t,destination:e,isStopped:n}=A;if(t||n)return!1;A=e&&e instanceof g?e:null}return!0}(A)?A.error(t):console.warn(t)}}forEach(A,t){return new(t=d(t))((t,e)=>{let n;n=this.subscribe(t=>{try{A(t)}catch(s){e(s),n&&n.unsubscribe()}},e,t)})}_subscribe(A){const{source:t}=this;return t&&t.subscribe(A)}[p](){return this}pipe(...A){return 0===A.length?this:(0===(t=A).length?w:1===t.length?t[0]:function(A){return t.reduce((A,t)=>t(A),A)})(this);var t}toPromise(A){return new(A=d(A))((A,t)=>{let e;this.subscribe(A=>e=A,A=>t(A),()=>A(e))})}}return A.create=t=>new A(t),A})();function d(A){if(A||(A=i.Promise||Promise),!A)throw new Error("no Promise impl found");return A}const B=(()=>{function A(){return Error.call(this),this.message="object unsubscribed",this.name="ObjectUnsubscribedError",this}return A.prototype=Object.create(Error.prototype),A})();class D extends l{constructor(A,t){super(),this.subject=A,this.subscriber=t,this.closed=!1}unsubscribe(){if(this.closed)return;this.closed=!0;const A=this.subject,t=A.observers;if(this.subject=null,!t||0===t.length||A.isStopped||A.closed)return;const e=t.indexOf(this.subscriber);-1!==e&&t.splice(e,1)}}class G extends g{constructor(A){super(A),this.destination=A}}let C=(()=>{class A extends Y{constructor(){super(),this.observers=[],this.closed=!1,this.isStopped=!1,this.hasError=!1,this.thrownError=null}[h](){return new G(this)}lift(A){const t=new E(this,this);return t.operator=A,t}next(A){if(this.closed)throw new B;if(!this.isStopped){const{observers:t}=this,e=t.length,n=t.slice();for(let s=0;s<e;s++)n[s].next(A)}}error(A){if(this.closed)throw new B;this.hasError=!0,this.thrownError=A,this.isStopped=!0;const{observers:t}=this,e=t.length,n=t.slice();for(let s=0;s<e;s++)n[s].error(A);this.observers.length=0}complete(){if(this.closed)throw new B;this.isStopped=!0;const{observers:A}=this,t=A.length,e=A.slice();for(let n=0;n<t;n++)e[n].complete();this.observers.length=0}unsubscribe(){this.isStopped=!0,this.closed=!0,this.observers=null}_trySubscribe(A){if(this.closed)throw new B;return super._trySubscribe(A)}_subscribe(A){if(this.closed)throw new B;return this.hasError?(A.error(this.thrownError),l.EMPTY):this.isStopped?(A.complete(),l.EMPTY):(this.observers.push(A),new D(this,A))}asObservable(){const A=new Y;return A.source=this,A}}return A.create=(A,t)=>new E(A,t),A})();class E extends C{constructor(A,t){super(),this.destination=A,this.source=t}next(A){const{destination:t}=this;t&&t.next&&t.next(A)}error(A){const{destination:t}=this;t&&t.error&&this.destination.error(A)}complete(){const{destination:A}=this;A&&A.complete&&this.destination.complete()}_subscribe(A){const{source:t}=this;return t?this.source.subscribe(A):l.EMPTY}}function I(A){return A&&"function"==typeof A.schedule}class y extends g{constructor(A,t,e){super(),this.parent=A,this.outerValue=t,this.outerIndex=e,this.index=0}_next(A){this.parent.notifyNext(this.outerValue,A,this.outerIndex,this.index++,this)}_error(A){this.parent.notifyError(A,this),this.unsubscribe()}_complete(){this.parent.notifyComplete(this),this.unsubscribe()}}const Q=A=>t=>{for(let e=0,n=A.length;e<n&&!t.closed;e++)t.next(A[e]);t.complete()};function Z(){return"function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator"}const T=Z(),k=A=>A&&"number"==typeof A.length&&"function"!=typeof A;function S(A){return!!A&&"function"!=typeof A.subscribe&&"function"==typeof A.then}const z=A=>{if(A&&"function"==typeof A[p])return n=A,A=>{const t=n[p]();if("function"!=typeof t.subscribe)throw new TypeError("Provided object does not correctly implement Symbol.observable");return t.subscribe(A)};if(k(A))return Q(A);if(S(A))return e=A,A=>(e.then(t=>{A.closed||(A.next(t),A.complete())},t=>A.error(t)).then(null,o),A);if(A&&"function"==typeof A[T])return t=A,A=>{const e=t[T]();for(;;){const t=e.next();if(t.done){A.complete();break}if(A.next(t.value),A.closed)break}return"function"==typeof e.return&&A.add(()=>{e.return&&e.return()}),A};{const t=c(A)?"an invalid object":`'${A}'`;throw new TypeError(`You provided ${t} where a stream was expected. You can provide an Observable, Promise, Array, or Iterable.`)}var t,e,n};function U(A,t,e,n,s=new y(A,e,n)){if(!s.closed)return t instanceof Y?t.subscribe(s):z(t)(s)}class b extends g{notifyNext(A,t,e,n,s){this.destination.next(t)}notifyError(A,t){this.destination.error(A)}notifyComplete(A){this.destination.complete()}}function j(A,t){return function(e){if("function"!=typeof A)throw new TypeError("argument is not a function. Are you looking for `mapTo()`?");return e.lift(new N(A,t))}}class N{constructor(A,t){this.project=A,this.thisArg=t}call(A,t){return t.subscribe(new x(A,this.project,this.thisArg))}}class x extends g{constructor(A,t,e){super(A),this.project=t,this.count=0,this.thisArg=e||this}_next(A){let t;try{t=this.project.call(this.thisArg,A,this.count++)}catch(e){return void this.destination.error(e)}this.destination.next(t)}}function K(A,t){return new Y(e=>{const n=new l;let s=0;return n.add(t.schedule((function(){s!==A.length?(e.next(A[s++]),e.closed||n.add(this.schedule())):e.complete()}))),n})}function J(A,t){return t?function(A,t){if(null!=A){if(function(A){return A&&"function"==typeof A[p]}(A))return function(A,t){return new Y(e=>{const n=new l;return n.add(t.schedule(()=>{const s=A[p]();n.add(s.subscribe({next(A){n.add(t.schedule(()=>e.next(A)))},error(A){n.add(t.schedule(()=>e.error(A)))},complete(){n.add(t.schedule(()=>e.complete()))}}))})),n})}(A,t);if(S(A))return function(A,t){return new Y(e=>{const n=new l;return n.add(t.schedule(()=>A.then(A=>{n.add(t.schedule(()=>{e.next(A),n.add(t.schedule(()=>e.complete()))}))},A=>{n.add(t.schedule(()=>e.error(A)))}))),n})}(A,t);if(k(A))return K(A,t);if(function(A){return A&&"function"==typeof A[T]}(A)||"string"==typeof A)return function(A,t){if(!A)throw new Error("Iterable cannot be null");return new Y(e=>{const n=new l;let s;return n.add(()=>{s&&"function"==typeof s.return&&s.return()}),n.add(t.schedule(()=>{s=A[T](),n.add(t.schedule((function(){if(e.closed)return;let A,t;try{const e=s.next();A=e.value,t=e.done}catch(n){return void e.error(n)}t?e.complete():(e.next(A),this.schedule())})))})),n})}(A,t)}throw new TypeError((null!==A&&typeof A||A)+" is not observable")}(A,t):A instanceof Y?A:new Y(z(A))}class R{constructor(A,t=Number.POSITIVE_INFINITY){this.project=A,this.concurrent=t}call(A,t){return t.subscribe(new W(A,this.project,this.concurrent))}}class W extends b{constructor(A,t,e=Number.POSITIVE_INFINITY){super(A),this.project=t,this.concurrent=e,this.hasCompleted=!1,this.buffer=[],this.active=0,this.index=0}_next(A){this.active<this.concurrent?this._tryNext(A):this.buffer.push(A)}_tryNext(A){let t;const e=this.index++;try{t=this.project(A,e)}catch(n){return void this.destination.error(n)}this.active++,this._innerSub(t,A,e)}_innerSub(A,t,e){const n=new y(this,t,e),s=this.destination;s.add(n);const i=U(this,A,void 0,void 0,n);i!==n&&s.add(i)}_complete(){this.hasCompleted=!0,0===this.active&&0===this.buffer.length&&this.destination.complete(),this.unsubscribe()}notifyNext(A,t,e,n,s){this.destination.next(t)}notifyComplete(A){const t=this.buffer;this.remove(A),this.active--,t.length>0?this._next(t.shift()):0===this.active&&this.hasCompleted&&this.destination.complete()}}function O(A=Number.POSITIVE_INFINITY){return function A(t,e,n=Number.POSITIVE_INFINITY){return"function"==typeof e?s=>s.pipe(A((A,n)=>J(t(A,n)).pipe(j((t,s)=>e(A,t,n,s))),n)):("number"==typeof e&&(n=e),A=>A.lift(new R(t,n)))}(w,A)}function q(A,t){return t?K(A,t):new Y(Q(A))}function F(...A){let t=Number.POSITIVE_INFINITY,e=null,n=A[A.length-1];return I(n)?(e=A.pop(),A.length>1&&"number"==typeof A[A.length-1]&&(t=A.pop())):"number"==typeof n&&(t=A.pop()),null===e&&1===A.length&&A[0]instanceof Y?A[0]:O(t)(q(A,e))}function f(){return function(A){return A.lift(new V(A))}}class V{constructor(A){this.connectable=A}call(A,t){const{connectable:e}=this;e._refCount++;const n=new L(A,e),s=t.subscribe(n);return n.closed||(n.connection=e.connect()),s}}class L extends g{constructor(A,t){super(A),this.connectable=t}_unsubscribe(){const{connectable:A}=this;if(!A)return void(this.connection=null);this.connectable=null;const t=A._refCount;if(t<=0)return void(this.connection=null);if(A._refCount=t-1,t>1)return void(this.connection=null);const{connection:e}=this,n=A._connection;this.connection=null,!n||e&&n!==e||n.unsubscribe()}}class H extends Y{constructor(A,t){super(),this.source=A,this.subjectFactory=t,this._refCount=0,this._isComplete=!1}_subscribe(A){return this.getSubject().subscribe(A)}getSubject(){const A=this._subject;return A&&!A.isStopped||(this._subject=this.subjectFactory()),this._subject}connect(){let A=this._connection;return A||(this._isComplete=!1,A=this._connection=new l,A.add(this.source.subscribe(new P(this.getSubject(),this))),A.closed&&(this._connection=null,A=l.EMPTY)),A}refCount(){return f()(this)}}const v=(()=>{const A=H.prototype;return{operator:{value:null},_refCount:{value:0,writable:!0},_subject:{value:null,writable:!0},_connection:{value:null,writable:!0},_subscribe:{value:A._subscribe},_isComplete:{value:A._isComplete,writable:!0},getSubject:{value:A.getSubject},connect:{value:A.connect},refCount:{value:A.refCount}}})();class P extends G{constructor(A,t){super(A),this.connectable=t}_error(A){this._unsubscribe(),super._error(A)}_complete(){this.connectable._isComplete=!0,this._unsubscribe(),super._complete()}_unsubscribe(){const A=this.connectable;if(A){this.connectable=null;const t=A._connection;A._refCount=0,A._subject=null,A._connection=null,t&&t.unsubscribe()}}}function X(){return new C}function _(A){return{toString:A}.toString()}function $(A,t,e){return _(()=>{const n=function(A){return function(...t){if(A){const e=A(...t);for(const A in e)this[A]=e[A]}}}(t);function s(...A){if(this instanceof s)return n.apply(this,A),this;const t=new s(...A);return e.annotation=t,e;function e(A,e,n){const s=A.hasOwnProperty("__parameters__")?A.__parameters__:Object.defineProperty(A,"__parameters__",{value:[]}).__parameters__;for(;s.length<=n;)s.push(null);return(s[n]=s[n]||[]).push(t),A}}return e&&(s.prototype=Object.create(e.prototype)),s.prototype.ngMetadataName=A,s.annotationCls=s,s})}const AA=$("Inject",A=>({token:A})),tA=$("Optional"),eA=$("Self"),nA=$("SkipSelf");var sA=function(A){return A[A.Default=0]="Default",A[A.Host=1]="Host",A[A.Self=2]="Self",A[A.SkipSelf=4]="SkipSelf",A[A.Optional=8]="Optional",A}({});function iA(A){for(let t in A)if(A[t]===iA)return t;throw Error("Could not find renamed property on target object.")}function oA(A,t){for(const e in t)t.hasOwnProperty(e)&&!A.hasOwnProperty(e)&&(A[e]=t[e])}function rA(A){return{token:A.token,providedIn:A.providedIn||null,factory:A.factory,value:void 0}}function aA(A){return{factory:A.factory,providers:A.providers||[],imports:A.imports||[]}}function cA(A){return MA(A,A[uA])||MA(A,A[mA])}function MA(A,t){return t&&t.token===A?t:null}function lA(A){return A&&(A.hasOwnProperty(hA)||A.hasOwnProperty(pA))?A[hA]:null}const uA=iA({"\u0275prov":iA}),hA=iA({"\u0275inj":iA}),gA=iA({"\u0275provFallback":iA}),mA=iA({ngInjectableDef:iA}),pA=iA({ngInjectorDef:iA});function wA(A){if("string"==typeof A)return A;if(Array.isArray(A))return"["+A.map(wA).join(", ")+"]";if(null==A)return""+A;if(A.overriddenName)return""+A.overriddenName;if(A.name)return""+A.name;const t=A.toString();if(null==t)return""+t;const e=t.indexOf("\n");return-1===e?t:t.substring(0,e)}function YA(A,t){return null==A||""===A?null===t?"":t:null==t||""===t?A:A+" "+t}const dA=iA({__forward_ref__:iA});function BA(A){return A.__forward_ref__=BA,A.toString=function(){return wA(this())},A}function DA(A){return"function"==typeof(t=A)&&t.hasOwnProperty(dA)&&t.__forward_ref__===BA?A():A;var t}const GA="undefined"!=typeof globalThis&&globalThis,CA="undefined"!=typeof window&&window,EA="undefined"!=typeof self&&"undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope&&self,IA="undefined"!=typeof global&&global,yA=GA||IA||CA||EA,QA=iA({"\u0275cmp":iA}),ZA=iA({"\u0275dir":iA}),TA=iA({"\u0275pipe":iA}),kA=iA({"\u0275mod":iA}),SA=iA({"\u0275loc":iA}),zA=iA({"\u0275fac":iA}),UA=iA({__NG_ELEMENT_ID__:iA});class bA{constructor(A,t){this._desc=A,this.ngMetadataName="InjectionToken",this.\u0275prov=void 0,"number"==typeof t?this.__NG_ELEMENT_ID__=t:void 0!==t&&(this.\u0275prov=rA({token:this,providedIn:t.providedIn||"root",factory:t.factory}))}toString(){return"InjectionToken "+this._desc}}const jA=new bA("INJECTOR",-1),NA={},xA=/\n/gm,KA=iA({provide:String,useValue:iA});let JA,RA=void 0;function WA(A){const t=RA;return RA=A,t}function OA(A){const t=JA;return JA=A,t}function qA(A,t=sA.Default){if(void 0===RA)throw new Error("inject() must be called from an injection context");return null===RA?VA(A,void 0,t):RA.get(A,t&sA.Optional?null:void 0,t)}function FA(A,t=sA.Default){return(JA||qA)(DA(A),t)}const fA=FA;function VA(A,t,e){const n=cA(A);if(n&&"root"==n.providedIn)return void 0===n.value?n.value=n.factory():n.value;if(e&sA.Optional)return null;if(void 0!==t)return t;throw new Error(`Injector: NOT_FOUND [${wA(A)}]`)}function LA(A){const t=[];for(let e=0;e<A.length;e++){const n=DA(A[e]);if(Array.isArray(n)){if(0===n.length)throw new Error("Arguments array must have arguments.");let A=void 0,e=sA.Default;for(let t=0;t<n.length;t++){const s=n[t];s instanceof tA||"Optional"===s.ngMetadataName||s===tA?e|=sA.Optional:s instanceof nA||"SkipSelf"===s.ngMetadataName||s===nA?e|=sA.SkipSelf:s instanceof eA||"Self"===s.ngMetadataName||s===eA?e|=sA.Self:A=s instanceof AA||s===AA?s.token:s}t.push(FA(A,e))}else t.push(FA(n))}return t}class HA{get(A,t=NA){if(t===NA){const t=new Error(`NullInjectorError: No provider for ${wA(A)}!`);throw t.name="NullInjectorError",t}return t}}class vA{}function PA(A,t){A.forEach(A=>Array.isArray(A)?PA(A,t):t(A))}function XA(A,t,e){t>=A.length?A.push(e):A.splice(t,0,e)}function _A(A,t){return t>=A.length-1?A.pop():A.splice(t,1)[0]}function $A(A,t){const e=[];for(let n=0;n<A;n++)e.push(t);return e}function At(A,t,e){let n=et(A,t);return n>=0?A[1|n]=e:(n=~n,function(A,t,e,n){let s=A.length;if(s==t)A.push(e,n);else if(1===s)A.push(n,A[0]),A[0]=e;else{for(s--,A.push(A[s-1],A[s]);s>t;)A[s]=A[s-2],s--;A[t]=e,A[t+1]=n}}(A,n,t,e)),n}function tt(A,t){const e=et(A,t);if(e>=0)return A[1|e]}function et(A,t){return function(A,t,e){let n=0,s=A.length>>1;for(;s!==n;){const e=n+(s-n>>1),i=A[e<<1];if(t===i)return e<<1;i>t?s=e:n=e+1}return~(s<<1)}(A,t)}var nt=function(A){return A[A.OnPush=0]="OnPush",A[A.Default=1]="Default",A}({}),st=function(A){return A[A.Emulated=0]="Emulated",A[A.Native=1]="Native",A[A.None=2]="None",A[A.ShadowDom=3]="ShadowDom",A}({});const it={},ot=[];let rt=0;function at(A){return _(()=>{const t=A.type,e=t.prototype,n={},s={type:t,providersResolver:null,decls:A.decls,vars:A.vars,factory:null,template:A.template||null,consts:A.consts||null,ngContentSelectors:A.ngContentSelectors,hostBindings:A.hostBindings||null,hostVars:A.hostVars||0,hostAttrs:A.hostAttrs||null,contentQueries:A.contentQueries||null,declaredInputs:n,inputs:null,outputs:null,exportAs:A.exportAs||null,onChanges:null,onInit:e.ngOnInit||null,doCheck:e.ngDoCheck||null,afterContentInit:e.ngAfterContentInit||null,afterContentChecked:e.ngAfterContentChecked||null,afterViewInit:e.ngAfterViewInit||null,afterViewChecked:e.ngAfterViewChecked||null,onDestroy:e.ngOnDestroy||null,onPush:A.changeDetection===nt.OnPush,directiveDefs:null,pipeDefs:null,selectors:A.selectors||ot,viewQuery:A.viewQuery||null,features:A.features||null,data:A.data||{},encapsulation:A.encapsulation||st.Emulated,id:"c",styles:A.styles||ot,_:null,setInput:null,schemas:A.schemas||null,tView:null},i=A.directives,o=A.features,r=A.pipes;return s.id+=rt++,s.inputs=ht(A.inputs,n),s.outputs=ht(A.outputs),o&&o.forEach(A=>A(s)),s.directiveDefs=i?()=>("function"==typeof i?i():i).map(ct):null,s.pipeDefs=r?()=>("function"==typeof r?r():r).map(Mt):null,s})}function ct(A){return mt(A)||function(A){return A[ZA]||null}(A)}function Mt(A){return function(A){return A[TA]||null}(A)}const lt={};function ut(A){const t={type:A.type,bootstrap:A.bootstrap||ot,declarations:A.declarations||ot,imports:A.imports||ot,exports:A.exports||ot,transitiveCompileScopes:null,schemas:A.schemas||null,id:A.id||null};return null!=A.id&&_(()=>{lt[A.id]=A.type}),t}function ht(A,t){if(null==A)return it;const e={};for(const n in A)if(A.hasOwnProperty(n)){let s=A[n],i=s;Array.isArray(s)&&(i=s[1],s=s[0]),e[s]=n,t&&(t[s]=i)}return e}const gt=at;function mt(A){return A[QA]||null}function pt(A,t){return A.hasOwnProperty(zA)?A[zA]:null}function wt(A,t){const e=A[kA]||null;if(!e&&!0===t)throw new Error(`Type ${wA(A)} does not have '\u0275mod' property.`);return e}function Yt(A){return Array.isArray(A)&&"object"==typeof A[1]}function dt(A){return Array.isArray(A)&&!0===A[1]}function Bt(A){return 0!=(8&A.flags)}function Dt(A){return 2==(2&A.flags)}function Gt(A){return 1==(1&A.flags)}function Ct(A){return null!==A.template}function Et(A){return 0!=(512&A[2])}let It=void 0;function yt(A){return!!A.listen}const Qt={createRenderer:(A,t)=>void 0!==It?It:"undefined"!=typeof document?document:void 0};function Zt(A){for(;Array.isArray(A);)A=A[0];return A}function Tt(A,t){return Zt(t[A+20])}function kt(A,t){return Zt(t[A.index])}function St(A,t){return A.data[t+20]}function zt(A,t){const e=t[A];return Yt(e)?e:e[0]}function Ut(A){const t=function(A){return A.__ngContext__||null}(A);return t?Array.isArray(t)?t:t.lView:null}function bt(A){return 4==(4&A[2])}function jt(A){return 128==(128&A[2])}function Nt(A,t){return null===A||null==t?null:A[t]}function xt(A){A[18]=0}function Kt(A,t){A[5]+=t;let e=A,n=A[3];for(;null!==n&&(1===t&&1===e[5]||-1===t&&0===e[5]);)n[5]+=t,e=n,n=n[3]}const Jt={lFrame:ne(null),bindingsEnabled:!0,checkNoChangesMode:!1};function Rt(){return Jt.bindingsEnabled}function Wt(){return Jt.lFrame.lView}function Ot(){return Jt.lFrame.tView}function qt(){return Jt.lFrame.previousOrParentTNode}function Ft(A,t){Jt.lFrame.previousOrParentTNode=A,Jt.lFrame.isParent=t}function ft(){return Jt.lFrame.isParent}function Vt(){Jt.lFrame.isParent=!1}function Lt(){return Jt.checkNoChangesMode}function Ht(A){Jt.checkNoChangesMode=A}function vt(){return Jt.lFrame.bindingIndex++}function Pt(A,t){const e=Jt.lFrame;e.bindingIndex=e.bindingRootIndex=A,Xt(t)}function Xt(A){Jt.lFrame.currentDirectiveIndex=A}function _t(){return Jt.lFrame.currentQueryIndex}function $t(A){Jt.lFrame.currentQueryIndex=A}function Ae(A,t){const e=ee();Jt.lFrame=e,e.previousOrParentTNode=t,e.lView=A}function te(A,t){const e=ee(),n=A[1];Jt.lFrame=e,e.previousOrParentTNode=t,e.lView=A,e.tView=n,e.contextLView=A,e.bindingIndex=n.bindingStartIndex}function ee(){const A=Jt.lFrame,t=null===A?null:A.child;return null===t?ne(A):t}function ne(A){const t={previousOrParentTNode:null,isParent:!0,lView:null,tView:null,selectedIndex:0,contextLView:null,elementDepthCount:0,currentNamespace:null,currentDirectiveIndex:-1,bindingRootIndex:-1,bindingIndex:-1,currentQueryIndex:0,parent:A,child:null};return null!==A&&(A.child=t),t}function se(){const A=Jt.lFrame;return Jt.lFrame=A.parent,A.previousOrParentTNode=null,A.lView=null,A}const ie=se;function oe(){const A=se();A.isParent=!0,A.tView=null,A.selectedIndex=0,A.contextLView=null,A.elementDepthCount=0,A.currentDirectiveIndex=-1,A.currentNamespace=null,A.bindingRootIndex=-1,A.bindingIndex=-1,A.currentQueryIndex=0}function re(){return Jt.lFrame.selectedIndex}function ae(A){Jt.lFrame.selectedIndex=A}function ce(){const A=Jt.lFrame;return St(A.tView,A.selectedIndex)}function Me(A,t){for(let e=t.directiveStart,n=t.directiveEnd;e<n;e++){const t=A.data[e];t.afterContentInit&&(A.contentHooks||(A.contentHooks=[])).push(-e,t.afterContentInit),t.afterContentChecked&&((A.contentHooks||(A.contentHooks=[])).push(e,t.afterContentChecked),(A.contentCheckHooks||(A.contentCheckHooks=[])).push(e,t.afterContentChecked)),t.afterViewInit&&(A.viewHooks||(A.viewHooks=[])).push(-e,t.afterViewInit),t.afterViewChecked&&((A.viewHooks||(A.viewHooks=[])).push(e,t.afterViewChecked),(A.viewCheckHooks||(A.viewCheckHooks=[])).push(e,t.afterViewChecked)),null!=t.onDestroy&&(A.destroyHooks||(A.destroyHooks=[])).push(e,t.onDestroy)}}function le(A,t,e){ge(A,t,3,e)}function ue(A,t,e,n){(3&A[2])===e&&ge(A,t,e,n)}function he(A,t){let e=A[2];(3&e)===t&&(e&=2047,e+=1,A[2]=e)}function ge(A,t,e,n){const s=null!=n?n:-1;let i=0;for(let o=void 0!==n?65535&A[18]:0;o<t.length;o++)if("number"==typeof t[o+1]){if(i=t[o],null!=n&&i>=n)break}else t[o]<0&&(A[18]+=65536),(i<s||-1==s)&&(me(A,e,t,o),A[18]=(4294901760&A[18])+o+2),o++}function me(A,t,e,n){const s=e[n]<0,i=e[n+1],o=A[s?-e[n]:e[n]];s?A[2]>>11<A[18]>>16&&(3&A[2])===t&&(A[2]+=2048,i.call(o)):i.call(o)}class pe{constructor(A,t,e){this.factory=A,this.resolving=!1,this.canSeeViewProviders=t,this.injectImpl=e}}function we(A,t,e){const n=yt(A);let s=0;for(;s<e.length;){const i=e[s];if("number"==typeof i){if(0!==i)break;s++;const o=e[s++],r=e[s++],a=e[s++];n?A.setAttribute(t,r,a,o):t.setAttributeNS(o,r,a)}else{const o=i,r=e[++s];de(o)?n&&A.setProperty(t,o,r):n?A.setAttribute(t,o,r):t.setAttribute(o,r),s++}}return s}function Ye(A){return 3===A||4===A||6===A}function de(A){return 64===A.charCodeAt(0)}function Be(A,t){if(null===t||0===t.length);else if(null===A||0===A.length)A=t.slice();else{let e=-1;for(let n=0;n<t.length;n++){const s=t[n];"number"==typeof s?e=s:0===e||De(A,e,s,null,-1===e||2===e?t[++n]:null)}}return A}function De(A,t,e,n,s){let i=0,o=A.length;if(-1===t)o=-1;else for(;i<A.length;){const e=A[i++];if("number"==typeof e){if(e===t){o=-1;break}if(e>t){o=i-1;break}}}for(;i<A.length;){const t=A[i];if("number"==typeof t)break;if(t===e){if(null===n)return void(null!==s&&(A[i+1]=s));if(n===A[i+1])return void(A[i+2]=s)}i++,null!==n&&i++,null!==s&&i++}-1!==o&&(A.splice(o,0,t),i=o+1),A.splice(i++,0,e),null!==n&&A.splice(i++,0,n),null!==s&&A.splice(i++,0,s)}function Ge(A){return-1!==A}function Ce(A){return 32767&A}function Ee(A){return A>>16}function Ie(A,t){let e=Ee(A),n=t;for(;e>0;)n=n[15],e--;return n}function ye(A){return"string"==typeof A?A:null==A?"":""+A}function Qe(A){return"function"==typeof A?A.name||A.toString():"object"==typeof A&&null!=A&&"function"==typeof A.type?A.type.name||A.type.toString():ye(A)}const Ze=(()=>("undefined"!=typeof requestAnimationFrame&&requestAnimationFrame||setTimeout).bind(yA))();function Te(A){return A instanceof Function?A():A}let ke=!0;function Se(A){const t=ke;return ke=A,t}let ze=0;function Ue(A,t){const e=je(A,t);if(-1!==e)return e;const n=t[1];n.firstCreatePass&&(A.injectorIndex=t.length,be(n.data,A),be(t,null),be(n.blueprint,null));const s=Ne(A,t),i=A.injectorIndex;if(Ge(s)){const A=Ce(s),e=Ie(s,t),n=e[1].data;for(let s=0;s<8;s++)t[i+s]=e[A+s]|n[A+s]}return t[i+8]=s,i}function be(A,t){A.push(0,0,0,0,0,0,0,0,t)}function je(A,t){return-1===A.injectorIndex||A.parent&&A.parent.injectorIndex===A.injectorIndex||null==t[A.injectorIndex+8]?-1:A.injectorIndex}function Ne(A,t){if(A.parent&&-1!==A.parent.injectorIndex)return A.parent.injectorIndex;let e=t[6],n=1;for(;e&&-1===e.injectorIndex;)e=(t=t[15])?t[6]:null,n++;return e?e.injectorIndex|n<<16:-1}function xe(A,t,e){!function(A,t,e){let n;"string"==typeof e?n=e.charCodeAt(0)||0:e.hasOwnProperty(UA)&&(n=e[UA]),null==n&&(n=e[UA]=ze++);const s=255&n,i=1<<s,o=64&s,r=32&s,a=t.data;128&s?o?r?a[A+7]|=i:a[A+6]|=i:r?a[A+5]|=i:a[A+4]|=i:o?r?a[A+3]|=i:a[A+2]|=i:r?a[A+1]|=i:a[A]|=i}(A,t,e)}function Ke(A,t,e,n=sA.Default,s){if(null!==A){const s=function(A){if("string"==typeof A)return A.charCodeAt(0)||0;const t=A.hasOwnProperty(UA)?A[UA]:void 0;return"number"==typeof t&&t>0?255&t:t}(e);if("function"==typeof s){Ae(t,A);try{const A=s();if(null!=A||n&sA.Optional)return A;throw new Error(`No provider for ${Qe(e)}!`)}finally{ie()}}else if("number"==typeof s){if(-1===s)return new fe(A,t);let i=null,o=je(A,t),r=-1,a=n&sA.Host?t[16][6]:null;for((-1===o||n&sA.SkipSelf)&&(r=-1===o?Ne(A,t):t[o+8],Fe(n,!1)?(i=t[1],o=Ce(r),t=Ie(r,t)):o=-1);-1!==o;){r=t[o+8];const A=t[1];if(qe(s,o,A.data)){const A=Re(o,t,e,i,n,a);if(A!==Je)return A}Fe(n,t[1].data[o+8]===a)&&qe(s,o,t)?(i=A,o=Ce(r),t=Ie(r,t)):o=-1}}}if(n&sA.Optional&&void 0===s&&(s=null),0==(n&(sA.Self|sA.Host))){const A=t[9],i=OA(void 0);try{return A?A.get(e,s,n&sA.Optional):VA(e,s,n&sA.Optional)}finally{OA(i)}}if(n&sA.Optional)return s;throw new Error(`NodeInjector: NOT_FOUND [${Qe(e)}]`)}const Je={};function Re(A,t,e,n,s,i){const o=t[1],r=o.data[A+8],a=We(r,o,e,null==n?Dt(r)&&ke:n!=o&&3===r.type,s&sA.Host&&i===r);return null!==a?Oe(t,o,a,r):Je}function We(A,t,e,n,s){const i=A.providerIndexes,o=t.data,r=65535&i,a=A.directiveStart,c=i>>16,M=s?r+c:A.directiveEnd;for(let l=n?r:r+c;l<M;l++){const A=o[l];if(l<a&&e===A||l>=a&&A.type===e)return l}if(s){const A=o[a];if(A&&Ct(A)&&A.type===e)return a}return null}function Oe(A,t,e,n){let s=A[e];const i=t.data;if(s instanceof pe){const o=s;if(o.resolving)throw new Error("Circular dep for "+Qe(i[e]));const r=Se(o.canSeeViewProviders);let a;o.resolving=!0,o.injectImpl&&(a=OA(o.injectImpl)),Ae(A,n);try{s=A[e]=o.factory(void 0,i,A,n),t.firstCreatePass&&e>=n.directiveStart&&function(A,t,e){const{onChanges:n,onInit:s,doCheck:i}=t;n&&((e.preOrderHooks||(e.preOrderHooks=[])).push(A,n),(e.preOrderCheckHooks||(e.preOrderCheckHooks=[])).push(A,n)),s&&(e.preOrderHooks||(e.preOrderHooks=[])).push(-A,s),i&&((e.preOrderHooks||(e.preOrderHooks=[])).push(A,i),(e.preOrderCheckHooks||(e.preOrderCheckHooks=[])).push(A,i))}(e,i[e],t)}finally{o.injectImpl&&OA(a),Se(r),o.resolving=!1,ie()}}return s}function qe(A,t,e){const n=64&A,s=32&A;let i;return i=128&A?n?s?e[t+7]:e[t+6]:s?e[t+5]:e[t+4]:n?s?e[t+3]:e[t+2]:s?e[t+1]:e[t],!!(i&1<<A)}function Fe(A,t){return!(A&sA.Self||A&sA.Host&&t)}class fe{constructor(A,t){this._tNode=A,this._lView=t}get(A,t){return Ke(this._tNode,this._lView,A,void 0,t)}}function Ve(A){return A.ngDebugContext}function Le(A){return A.ngOriginalError}function He(A,...t){A.error(...t)}class ve{constructor(){this._console=console}handleError(A){const t=this._findOriginalError(A),e=this._findContext(A),n=function(A){return A.ngErrorLogger||He}(A);n(this._console,"ERROR",A),t&&n(this._console,"ORIGINAL ERROR",t),e&&n(this._console,"ERROR CONTEXT",e)}_findContext(A){return A?Ve(A)?Ve(A):this._findContext(Le(A)):null}_findOriginalError(A){let t=Le(A);for(;t&&Le(t);)t=Le(t);return t}}let Pe=!0,Xe=!1;function _e(){return Xe=!0,Pe}function $e(A,t){A.__ngContext__=t}function An(A){throw new Error("Multiple components match node with tagname "+A.tagName)}function tn(){throw new Error("Cannot mix multi providers and regular providers")}function en(A,t,e){let n=A.length;for(;;){const s=A.indexOf(t,e);if(-1===s)return s;if(0===s||A.charCodeAt(s-1)<=32){const e=t.length;if(s+e===n||A.charCodeAt(s+e)<=32)return s}e=s+1}}function nn(A,t,e){let n=0;for(;n<A.length;){let s=A[n++];if(e&&"class"===s){if(s=A[n],-1!==en(s.toLowerCase(),t,0))return!0}else if(1===s){for(;n<A.length&&"string"==typeof(s=A[n++]);)if(s.toLowerCase()===t)return!0;return!1}}return!1}function sn(A){return 0===A.type&&"ng-template"!==A.tagName}function on(A,t,e){return t===(0!==A.type||e?A.tagName:"ng-template")}function rn(A,t,e){let n=4;const s=A.attrs||[],i=function(A){for(let t=0;t<A.length;t++)if(Ye(A[t]))return t;return A.length}(s);let o=!1;for(let r=0;r<t.length;r++){const a=t[r];if("number"!=typeof a){if(!o)if(4&n){if(n=2|1&n,""!==a&&!on(A,a,e)||""===a&&1===t.length){if(an(n))return!1;o=!0}}else{const c=8&n?a:t[++r];if(8&n&&null!==A.attrs){if(!nn(A.attrs,c,e)){if(an(n))return!1;o=!0}continue}const M=cn(8&n?"class":a,s,sn(A),e);if(-1===M){if(an(n))return!1;o=!0;continue}if(""!==c){let A;A=M>i?"":s[M+1].toLowerCase();const t=8&n?A:null;if(t&&-1!==en(t,c,0)||2&n&&c!==A){if(an(n))return!1;o=!0}}}}else{if(!o&&!an(n)&&!an(a))return!1;if(o&&an(a))continue;o=!1,n=a|1&n}}return an(n)||o}function an(A){return 0==(1&A)}function cn(A,t,e,n){if(null===t)return-1;let s=0;if(n||!e){let e=!1;for(;s<t.length;){const n=t[s];if(n===A)return s;if(3===n||6===n)e=!0;else{if(1===n||2===n){let A=t[++s];for(;"string"==typeof A;)A=t[++s];continue}if(4===n)break;if(0===n){s+=4;continue}}s+=e?1:2}return-1}return function(A,t){let e=A.indexOf(4);if(e>-1)for(e++;e<A.length;){const n=A[e];if("number"==typeof n)return-1;if(n===t)return e;e++}return-1}(t,A)}function Mn(A,t,e=!1){for(let n=0;n<t.length;n++)if(rn(A,t[n],e))return!0;return!1}function ln(A,t){return A?":not("+t.trim()+")":t}function un(A){let t=A[0],e=1,n=2,s="",i=!1;for(;e<A.length;){let o=A[e];if("string"==typeof o)if(2&n){const t=A[++e];s+="["+o+(t.length>0?'="'+t+'"':"")+"]"}else 8&n?s+="."+o:4&n&&(s+=" "+o);else""===s||an(o)||(t+=ln(i,s),s=""),n=o,i=i||!an(n);e++}return""!==s&&(t+=ln(i,s)),t}const hn={};function gn(A){const t=A[3];return dt(t)?t[3]:t}function mn(A){return wn(A[13])}function pn(A){return wn(A[4])}function wn(A){for(;null!==A&&!dt(A);)A=A[4];return A}function Yn(A){dn(Ot(),Wt(),re()+A,Lt())}function dn(A,t,e,n){if(!n)if(3==(3&t[2])){const n=A.preOrderCheckHooks;null!==n&&le(t,n,e)}else{const n=A.preOrderHooks;null!==n&&ue(t,n,0,e)}ae(e)}function Bn(A,t){return A<<17|t<<2}function Dn(A){return A>>17&32767}function Gn(A){return 2|A}function Cn(A){return(131068&A)>>2}function En(A,t){return-131069&A|t<<2}function In(A){return 1|A}function yn(A,t){const e=A.contentQueries;if(null!==e)for(let n=0;n<e.length;n+=2){const s=e[n],i=e[n+1];if(-1!==i){const e=A.data[i];$t(s),e.contentQueries(2,t[i],i)}}}function Qn(A,t,e){return yt(t)?t.createElement(A,e):null===e?t.createElement(A):t.createElementNS(e,A)}function Zn(A,t,e,n,s,i,o,r,a,c){const M=t.blueprint.slice();return M[0]=s,M[2]=140|n,xt(M),M[3]=M[15]=A,M[8]=e,M[10]=o||A&&A[10],M[11]=r||A&&A[11],M[12]=a||A&&A[12]||null,M[9]=c||A&&A[9]||null,M[6]=i,M[16]=2==t.type?A[16]:M,M}function Tn(A,t,e,n,s,i){const o=e+20,r=A.data[o]||function(A,t,e,n,s,i){const o=qt(),r=ft(),a=r?o:o&&o.parent,c=A.data[e]=xn(0,a&&a!==t?a:null,n,e,s,i);return null===A.firstChild&&(A.firstChild=c),o&&(!r||null!=o.child||null===c.parent&&2!==o.type?r||(o.next=c):o.child=c),c}(A,t,o,n,s,i);return Ft(r,!0),r}function kn(A,t,e){te(t,t[6]);try{const n=A.viewQuery;null!==n&&es(1,n,e);const s=A.template;null!==s&&Un(A,t,s,1,e),A.firstCreatePass&&(A.firstCreatePass=!1),A.staticContentQueries&&yn(A,t),A.staticViewQueries&&es(2,A.viewQuery,e);const i=A.components;null!==i&&function(A,t){for(let e=0;e<t.length;e++)Xn(A,t[e])}(t,i)}catch(n){throw A.firstCreatePass&&(A.incompleteFirstPass=!0),n}finally{t[2]&=-5,oe()}}function Sn(A,t,e,n){const s=t[2];if(256==(256&s))return;te(t,t[6]);const i=Lt();try{xt(t),Jt.lFrame.bindingIndex=A.bindingStartIndex,null!==e&&Un(A,t,e,2,n);const o=3==(3&s);if(!i)if(o){const e=A.preOrderCheckHooks;null!==e&&le(t,e,null)}else{const e=A.preOrderHooks;null!==e&&ue(t,e,0,null),he(t,0)}if(function(A){for(let t=mn(A);null!==t;t=pn(t)){if(!t[2])continue;const A=t[9];for(let t=0;t<A.length;t++){const e=A[t],n=e[3];0==(1024&e[2])&&Kt(n,1),e[2]|=1024}}}(t),function(A){for(let t=mn(A);null!==t;t=pn(t))for(let A=10;A<t.length;A++){const e=t[A],n=e[1];jt(e)&&Sn(n,e,n.template,e[8])}}(t),null!==A.contentQueries&&yn(A,t),!i)if(o){const e=A.contentCheckHooks;null!==e&&le(t,e)}else{const e=A.contentHooks;null!==e&&ue(t,e,1),he(t,1)}!function(A,t){try{const e=A.expandoInstructions;if(null!==e){let n=A.expandoStartIndex,s=-1,i=-1;for(let A=0;A<e.length;A++){const o=e[A];"number"==typeof o?o<=0?(i=0-o,ae(i),n+=9+e[++A],s=n):n+=o:(null!==o&&(Pt(n,s),o(2,t[s])),s++)}}}finally{ae(-1)}}(A,t);const r=A.components;null!==r&&function(A,t){for(let e=0;e<t.length;e++)Pn(A,t[e])}(t,r);const a=A.viewQuery;if(null!==a&&es(2,a,n),!i)if(o){const e=A.viewCheckHooks;null!==e&&le(t,e)}else{const e=A.viewHooks;null!==e&&ue(t,e,2),he(t,2)}!0===A.firstUpdatePass&&(A.firstUpdatePass=!1),i||(t[2]&=-73),1024&t[2]&&(t[2]&=-1025,Kt(t[3],-1))}finally{oe()}}function zn(A,t,e,n){const s=t[10],i=!Lt(),o=bt(t);try{i&&!o&&s.begin&&s.begin(),o&&kn(A,t,n),Sn(A,t,e,n)}finally{i&&!o&&s.end&&s.end()}}function Un(A,t,e,n,s){const i=re();try{ae(-1),2&n&&t.length>20&&dn(A,t,0,Lt()),e(n,s)}finally{ae(i)}}function bn(A){const t=A.tView;return null===t||t.incompleteFirstPass?A.tView=jn(1,-1,A.template,A.decls,A.vars,A.directiveDefs,A.pipeDefs,A.viewQuery,A.schemas,A.consts):t}function jn(A,t,e,n,s,i,o,r,a,c){const M=20+n,l=M+s,u=function(A,t){const e=[];for(let n=0;n<t;n++)e.push(n<A?null:hn);return e}(M,l);return u[1]={type:A,id:t,blueprint:u,template:e,queries:null,viewQuery:r,node:null,data:u.slice().fill(null,M),bindingStartIndex:M,expandoStartIndex:l,expandoInstructions:null,firstCreatePass:!0,firstUpdatePass:!0,staticViewQueries:!1,staticContentQueries:!1,preOrderHooks:null,preOrderCheckHooks:null,contentHooks:null,contentCheckHooks:null,viewHooks:null,viewCheckHooks:null,destroyHooks:null,cleanup:null,contentQueries:null,components:null,directiveRegistry:"function"==typeof i?i():i,pipeRegistry:"function"==typeof o?o():o,firstChild:null,schemas:a,consts:c,incompleteFirstPass:!1}}function Nn(A,t,e,n){const s=ss(t);s.push(e),A.firstCreatePass&&function(A){return A.cleanup||(A.cleanup=[])}(A).push(n,s.length-1)}function xn(A,t,e,n,s,i){return{type:e,index:n,injectorIndex:t?t.injectorIndex:-1,directiveStart:-1,directiveEnd:-1,directiveStylingLast:-1,propertyBindings:null,flags:0,providerIndexes:0,tagName:s,attrs:i,mergedAttrs:null,localNames:null,initialInputs:void 0,inputs:null,outputs:null,tViews:null,next:null,projectionNext:null,child:null,parent:t,projection:null,styles:null,stylesWithoutHost:null,residualStyles:void 0,classes:null,classesWithoutHost:null,residualClasses:void 0,classBindings:0,styleBindings:0}}function Kn(A,t,e){for(let n in A)if(A.hasOwnProperty(n)){const s=A[n];(e=null===e?{}:e).hasOwnProperty(n)?e[n].push(t,s):e[n]=[t,s]}return e}function Jn(A,t){const e=A.expandoInstructions;e.push(t.hostBindings),0!==t.hostVars&&e.push(t.hostVars)}function Rn(A,t,e){for(let n=0;n<e;n++)t.push(hn),A.blueprint.push(hn),A.data.push(null)}function Wn(A,t){null!==A.hostBindings&&A.hostBindings(1,t)}function On(A,t,e){const n=20-t.index,s=A.data.length-(65535&t.providerIndexes);(A.expandoInstructions||(A.expandoInstructions=[])).push(n,s,e)}function qn(A,t){t.flags|=2,(A.components||(A.components=[])).push(t.index)}function Fn(A,t,e){if(e){if(t.exportAs)for(let n=0;n<t.exportAs.length;n++)e[t.exportAs[n]]=A;Ct(t)&&(e[""]=A)}}function fn(A,t,e){A.flags|=1,A.directiveStart=t,A.directiveEnd=t+e,A.providerIndexes=t}function Vn(A,t,e){A.data.push(e);const n=e.factory||(e.factory=pt(e.type)),s=new pe(n,Ct(e),null);A.blueprint.push(s),t.push(s)}function Ln(A,t,e){const n=kt(t,A),s=bn(e),i=A[10],o=_n(A,Zn(A,s,null,e.onPush?64:16,n,t,i,i.createRenderer(n,e)));A[t.index]=o}function Hn(A,t,e,n,s,i){const o=i[t];if(null!==o){const A=n.setInput;for(let t=0;t<o.length;){const s=o[t++],i=o[t++],r=o[t++];null!==A?n.setInput(e,r,s,i):e[i]=r}}}function vn(A,t){let e=null,n=0;for(;n<t.length;){const s=t[n];if(0!==s)if(5!==s){if("number"==typeof s)break;A.hasOwnProperty(s)&&(null===e&&(e=[]),e.push(s,A[s],t[n+1])),n+=2}else n+=2;else n+=4}return e}function Pn(A,t){const e=zt(t,A);if(jt(e)){const A=e[1];80&e[2]?Sn(A,e,A.template,e[8]):e[5]>0&&function A(t){for(let n=mn(t);null!==n;n=pn(n))for(let t=10;t<n.length;t++){const e=n[t];if(1024&e[2]){const A=e[1];Sn(A,e,A.template,e[8])}else e[5]>0&&A(e)}const e=t[1].components;if(null!==e)for(let n=0;n<e.length;n++){const s=zt(e[n],t);jt(s)&&s[5]>0&&A(s)}}(e)}}function Xn(A,t){const e=zt(t,A),n=e[1];!function(A,t){for(let e=t.length;e<A.blueprint.length;e++)t.push(A.blueprint[e])}(n,e),kn(n,e,e[8])}function _n(A,t){return A[13]?A[14][4]=t:A[13]=t,A[14]=t,t}function $n(A){for(;A;){A[2]|=64;const t=gn(A);if(Et(A)&&!t)return A;A=t}return null}function As(A,t,e){const n=t[10];n.begin&&n.begin();try{Sn(A,t,A.template,e)}catch(s){throw is(t,s),s}finally{n.end&&n.end()}}function ts(A){!function(A){for(let t=0;t<A.components.length;t++){const e=A.components[t],n=Ut(e),s=n[1];zn(s,n,s.template,e)}}(A[8])}function es(A,t,e){$t(0),t(A,e)}const ns=(()=>Promise.resolve(null))();function ss(A){return A[7]||(A[7]=[])}function is(A,t){const e=A[9],n=e?e.get(ve,null):null;n&&n.handleError(t)}function os(A,t,e,n,s){for(let i=0;i<e.length;){const o=e[i++],r=e[i++],a=t[o],c=A.data[o];null!==c.setInput?c.setInput(a,s,n,r):a[r]=s}}function rs(A,t){const e=t[3];return-1===A.index?dt(e)?e:null:e}function as(A,t){const e=rs(A,t);return e?Bs(t[11],e[7]):null}function cs(A,t,e,n,s){if(null!=n){let i,o=!1;dt(n)?i=n:Yt(n)&&(o=!0,n=n[0]);const r=Zt(n);0===A&&null!==e?null==s?Ys(t,e,r):ws(t,e,r,s||null):1===A&&null!==e?ws(t,e,r,s||null):2===A?function(A,t,e){const n=Bs(A,t);n&&function(A,t,e,n){yt(A)?A.removeChild(t,e,n):t.removeChild(e)}(A,n,t,e)}(t,r,o):3===A&&t.destroyNode(r),null!=i&&function(A,t,e,n,s){const i=e[7];i!==Zt(e)&&cs(t,A,n,i,s);for(let o=10;o<e.length;o++){const s=e[o];Is(s[1],s,A,t,n,i)}}(t,A,i,e,s)}}function Ms(A,t,e,n){const s=as(A.node,t);s&&Is(A,t,t[11],e?1:2,s,n)}function ls(A,t){const e=A[9],n=e.indexOf(t);1024&t[2]&&Kt(t[3],-1),e.splice(n,1)}function us(A,t){if(A.length<=10)return;const e=10+t,n=A[e];if(n){const s=n[17];null!==s&&s!==A&&ls(s,n),t>0&&(A[e-1][4]=n[4]);const i=_A(A,10+t);Ms(n[1],n,!1,null);const o=i[19];null!==o&&o.detachView(i[1]),n[3]=null,n[4]=null,n[2]&=-129}return n}function hs(A,t){if(!(256&t[2])){const e=t[11];yt(e)&&e.destroyNode&&Is(A,t,e,3,null,null),function(A){let t=A[13];if(!t)return ms(A[1],A);for(;t;){let e=null;if(Yt(t))e=t[13];else{const A=t[10];A&&(e=A)}if(!e){for(;t&&!t[4]&&t!==A;)Yt(t)&&ms(t[1],t),t=gs(t,A);null===t&&(t=A),Yt(t)&&ms(t[1],t),e=t&&t[4]}t=e}}(t)}}function gs(A,t){let e;return Yt(A)&&(e=A[6])&&2===e.type?rs(e,A):A[3]===t?null:A[3]}function ms(A,t){if(!(256&t[2])){t[2]&=-129,t[2]|=256,function(A,t){let e;if(null!=A&&null!=(e=A.destroyHooks))for(let n=0;n<e.length;n+=2){const A=t[e[n]];if(!(A instanceof pe)){const t=e[n+1];if(Array.isArray(t))for(let e=0;e<t.length;e+=2)t[e+1].call(A[t[e]]);else t.call(A)}}}(A,t),function(A,t){const e=A.cleanup;if(null!==e){const A=t[7];for(let n=0;n<e.length-1;n+=2)if("string"==typeof e[n]){const s=e[n+1],i="function"==typeof s?s(t):Zt(t[s]),o=A[e[n+2]],r=e[n+3];"boolean"==typeof r?i.removeEventListener(e[n],o,r):r>=0?A[r]():A[-r].unsubscribe(),n+=2}else e[n].call(A[e[n+1]]);t[7]=null}}(A,t);const e=t[6];e&&3===e.type&&yt(t[11])&&t[11].destroy();const n=t[17];if(null!==n&&dt(t[3])){n!==t[3]&&ls(n,t);const e=t[19];null!==e&&e.detachView(A)}}}function ps(A,t,e){let n=t.parent;for(;null!=n&&(4===n.type||5===n.type);)n=(t=n).parent;if(null==n){const A=e[6];return 2===A.type?as(A,e):e[0]}if(t&&5===t.type&&4&t.flags)return kt(t,e).parentNode;if(2&n.flags){const t=A.data,e=t[t[n.index].directiveStart].encapsulation;if(e!==st.ShadowDom&&e!==st.Native)return null}return kt(n,e)}function ws(A,t,e,n){yt(A)?A.insertBefore(t,e,n):t.insertBefore(e,n,!0)}function Ys(A,t,e){yt(A)?A.appendChild(t,e):t.appendChild(e)}function ds(A,t,e,n){null!==n?ws(A,t,e,n):Ys(A,t,e)}function Bs(A,t){return yt(A)?A.parentNode(t):t.parentNode}function Ds(A,t){if(2===A.type){const e=rs(A,t);return null===e?null:Cs(e.indexOf(t,10)-10,e)}return 4===A.type||5===A.type?kt(A,t):null}function Gs(A,t,e,n){const s=ps(A,n,t);if(null!=s){const A=t[11],i=Ds(n.parent||t[6],t);if(Array.isArray(e))for(let t=0;t<e.length;t++)ds(A,s,e[t],i);else ds(A,s,e,i)}}function Cs(A,t){const e=10+A+1;if(e<t.length){const A=t[e],n=A[1].firstChild;if(null!==n)return function A(t,e){if(null!==e){const n=e.type;if(3===n)return kt(e,t);if(0===n)return Cs(-1,t[e.index]);if(4===n||5===n){const n=e.child;if(null!==n)return A(t,n);{const A=t[e.index];return dt(A)?Cs(-1,A):Zt(A)}}{const n=t[16],s=n[6],i=gn(n),o=s.projection[e.projection];return null!=o?A(i,o):A(t,e.next)}}return null}(A,n)}return t[7]}function Es(A,t,e,n,s,i,o){for(;null!=e;){const r=n[e.index],a=e.type;o&&0===t&&(r&&$e(Zt(r),n),e.flags|=4),64!=(64&e.flags)&&(4===a||5===a?(Es(A,t,e.child,n,s,i,!1),cs(t,A,s,r,i)):1===a?ys(A,t,n,e,s,i):cs(t,A,s,r,i)),e=o?e.projectionNext:e.next}}function Is(A,t,e,n,s,i){Es(e,n,A.node.child,t,s,i,!1)}function ys(A,t,e,n,s,i){const o=e[16],r=o[6].projection[n.projection];if(Array.isArray(r))for(let a=0;a<r.length;a++)cs(t,A,s,r[a],i);else Es(A,t,r,o[3],s,i,!0)}function Qs(A,t,e){yt(A)?A.setAttribute(t,"style",e):t.style.cssText=e}function Zs(A,t,e){yt(A)?""===e?A.removeAttribute(t,"class"):A.setAttribute(t,"class",e):t.className=e}class Ts{constructor(A,t){this._lView=A,this._cdRefInjectingView=t,this._appRef=null,this._viewContainerRef=null}get rootNodes(){const A=this._lView;return null==A[0]?function A(t,e,n,s,i=!1){for(;null!==n;){const o=e[n.index];if(null!==o&&s.push(Zt(o)),dt(o))for(let t=10;t<o.length;t++){const e=o[t],n=e[1].firstChild;null!==n&&A(e[1],e,n,s)}const r=n.type;if(4===r||5===r)A(t,e,n.child,s);else if(1===r){const t=e[16],i=t[6].projection[n.projection];if(Array.isArray(i))s.push(...i);else{const e=gn(t);A(e[1],e,i,s,!0)}}n=i?n.projectionNext:n.next}return s}(A[1],A,A[6].child,[]):[]}get context(){return this._lView[8]}get destroyed(){return 256==(256&this._lView[2])}destroy(){if(this._appRef)this._appRef.detachView(this);else if(this._viewContainerRef){const A=this._viewContainerRef.indexOf(this);A>-1&&this._viewContainerRef.detach(A),this._viewContainerRef=null}hs(this._lView[1],this._lView)}onDestroy(A){Nn(this._lView[1],this._lView,null,A)}markForCheck(){$n(this._cdRefInjectingView||this._lView)}detach(){this._lView[2]&=-129}reattach(){this._lView[2]|=128}detectChanges(){As(this._lView[1],this._lView,this.context)}checkNoChanges(){!function(A,t,e){Ht(!0);try{As(A,t,e)}finally{Ht(!1)}}(this._lView[1],this._lView,this.context)}attachToViewContainerRef(A){if(this._appRef)throw new Error("This view is already attached directly to the ApplicationRef!");this._viewContainerRef=A}detachFromAppRef(){var A;this._appRef=null,Is(this._lView[1],A=this._lView,A[11],2,null,null)}attachToAppRef(A){if(this._viewContainerRef)throw new Error("This view is already attached to a ViewContainer!");this._appRef=A}}class ks extends Ts{constructor(A){super(A),this._view=A}detectChanges(){ts(this._view)}checkNoChanges(){!function(A){Ht(!0);try{ts(A)}finally{Ht(!1)}}(this._view)}get context(){return null}}let Ss,zs,Us;function bs(A,t,e){return Ss||(Ss=class extends A{}),new Ss(kt(t,e))}function js(A,t,e,n){return zs||(zs=class extends A{constructor(A,t,e){super(),this._declarationView=A,this._declarationTContainer=t,this.elementRef=e}createEmbeddedView(A){const t=this._declarationTContainer.tViews,e=Zn(this._declarationView,t,A,16,null,t.node);e[17]=this._declarationView[this._declarationTContainer.index];const n=this._declarationView[19];return null!==n&&(e[19]=n.createEmbeddedView(t)),kn(t,e,A),new Ts(e)}}),0===e.type?new zs(n,e,bs(t,e,n)):null}function Ns(A,t,e,n){let s;Us||(Us=class extends A{constructor(A,t,e){super(),this._lContainer=A,this._hostTNode=t,this._hostView=e}get element(){return bs(t,this._hostTNode,this._hostView)}get injector(){return new fe(this._hostTNode,this._hostView)}get parentInjector(){const A=Ne(this._hostTNode,this._hostView),t=Ie(A,this._hostView),e=function(A,t,e){if(e.parent&&-1!==e.parent.injectorIndex){const A=e.parent.injectorIndex;let t=e.parent;for(;null!=t.parent&&A==t.parent.injectorIndex;)t=t.parent;return t}let n=Ee(A),s=t,i=t[6];for(;n>1;)s=s[15],i=s[6],n--;return i}(A,this._hostView,this._hostTNode);return Ge(A)&&null!=e?new fe(e,t):new fe(null,this._hostView)}clear(){for(;this.length>0;)this.remove(this.length-1)}get(A){return null!==this._lContainer[8]&&this._lContainer[8][A]||null}get length(){return this._lContainer.length-10}createEmbeddedView(A,t,e){const n=A.createEmbeddedView(t||{});return this.insert(n,e),n}createComponent(A,t,e,n,s){const i=e||this.parentInjector;if(!s&&null==A.ngModule&&i){const A=i.get(vA,null);A&&(s=A)}const o=A.create(i,n,void 0,s);return this.insert(o.hostView,t),o}insert(A,t){const e=A._lView,n=e[1];if(A.destroyed)throw new Error("Cannot insert a destroyed View in a ViewContainer!");if(this.allocateContainerIfNeeded(),dt(e[3])){const t=this.indexOf(A);if(-1!==t)this.detach(t);else{const t=e[3],n=new Us(t,t[6],t[3]);n.detach(n.indexOf(A))}}const s=this._adjustIndex(t);return function(A,t,e,n){const s=10+n,i=e.length;n>0&&(e[s-1][4]=t),n<i-10?(t[4]=e[s],XA(e,10+n,t)):(e.push(t),t[4]=null),t[3]=e;const o=t[17];null!==o&&e!==o&&function(A,t){const e=A[9];t[16]!==t[3][3][16]&&(A[2]=!0),null===e?A[9]=[t]:e.push(t)}(o,t);const r=t[19];null!==r&&r.insertView(A),t[2]|=128}(n,e,this._lContainer,s),Ms(n,e,!0,Cs(s,this._lContainer)),A.attachToViewContainerRef(this),XA(this._lContainer[8],s,A),A}move(A,t){if(A.destroyed)throw new Error("Cannot move a destroyed View in a ViewContainer!");return this.insert(A,t)}indexOf(A){const t=this._lContainer[8];return null!==t?t.indexOf(A):-1}remove(A){this.allocateContainerIfNeeded();const t=this._adjustIndex(A,-1);!function(A,t){const e=us(A,t);e&&hs(e[1],e)}(this._lContainer,t),_A(this._lContainer[8],t)}detach(A){this.allocateContainerIfNeeded();const t=this._adjustIndex(A,-1),e=us(this._lContainer,t);return e&&null!=_A(this._lContainer[8],t)?new Ts(e):null}_adjustIndex(A,t=0){return null==A?this.length+t:A}allocateContainerIfNeeded(){null===this._lContainer[8]&&(this._lContainer[8]=[])}});const i=n[e.index];if(dt(i))s=i;else{let A;if(4===e.type)A=Zt(i);else if(A=n[11].createComment(""),Et(n)){const t=n[11],s=kt(e,n);ws(t,Bs(t,s),A,function(A,t){return yt(A)?A.nextSibling(t):t.nextSibling}(t,s))}else Gs(n[1],n,A,e);n[e.index]=s=new Array(i,!0,!1,n,null,0,e,A,null,null),_n(n,s)}return new Us(s,e,n)}let xs=(()=>{class A{}return A.__NG_ELEMENT_ID__=()=>Ks(),A})();const Ks=function(A=!1){return function(A,t,e){if(!e&&Dt(A)){const e=zt(A.index,t);return new Ts(e,e)}return 3===A.type||0===A.type||4===A.type||5===A.type?new Ts(t[16],t):null}(qt(),Wt(),A)},Js=new bA("Set Injector scope."),Rs={},Ws={},Os=[];let qs=void 0;function Fs(){return void 0===qs&&(qs=new HA),qs}function fs(A,t=null,e=null,n){return new Vs(A,e,t||Fs(),n)}class Vs{constructor(A,t,e,n=null){this.parent=e,this.records=new Map,this.injectorDefTypes=new Set,this.onDestroy=new Set,this._destroyed=!1;const s=[];t&&PA(t,e=>this.processProvider(e,A,t)),PA([A],A=>this.processInjectorType(A,[],s)),this.records.set(jA,vs(void 0,this));const i=this.records.get(Js);this.scope=null!=i?i.value:null,this.source=n||("object"==typeof A?null:wA(A))}get destroyed(){return this._destroyed}destroy(){this.assertNotDestroyed(),this._destroyed=!0;try{this.onDestroy.forEach(A=>A.ngOnDestroy())}finally{this.records.clear(),this.onDestroy.clear(),this.injectorDefTypes.clear()}}get(A,t=NA,e=sA.Default){this.assertNotDestroyed();const n=WA(this);try{if(!(e&sA.SkipSelf)){let t=this.records.get(A);if(void 0===t){const e=("function"==typeof(s=A)||"object"==typeof s&&s instanceof bA)&&cA(A);t=e&&this.injectableDefInScope(e)?vs(Ls(A),Rs):null,this.records.set(A,t)}if(null!=t)return this.hydrate(A,t)}return(e&sA.Self?Fs():this.parent).get(A,t=e&sA.Optional&&t===NA?null:t)}catch(i){if("NullInjectorError"===i.name){if((i.ngTempTokenPath=i.ngTempTokenPath||[]).unshift(wA(A)),n)throw i;return function(A,t,e,n){const s=A.ngTempTokenPath;throw t.__source&&s.unshift(t.__source),A.message=function(A,t,e,n=null){A=A&&"\n"===A.charAt(0)&&"\u0275"==A.charAt(1)?A.substr(2):A;let s=wA(t);if(Array.isArray(t))s=t.map(wA).join(" -> ");else if("object"==typeof t){let A=[];for(let e in t)if(t.hasOwnProperty(e)){let n=t[e];A.push(e+":"+("string"==typeof n?JSON.stringify(n):wA(n)))}s=`{${A.join(", ")}}`}return`${e}${n?"("+n+")":""}[${s}]: ${A.replace(xA,"\n  ")}`}("\n"+A.message,s,e,n),A.ngTokenPath=s,A.ngTempTokenPath=null,A}(i,A,"R3InjectorError",this.source)}throw i}finally{WA(n)}var s}_resolveInjectorDefTypes(){this.injectorDefTypes.forEach(A=>this.get(A))}toString(){const A=[];return this.records.forEach((t,e)=>A.push(wA(e))),`R3Injector[${A.join(", ")}]`}assertNotDestroyed(){if(this._destroyed)throw new Error("Injector has already been destroyed.")}processInjectorType(A,t,e){if(!(A=DA(A)))return!1;let n=lA(A);const s=null==n&&A.ngModule||void 0,i=void 0===s?A:s,o=-1!==e.indexOf(i);if(void 0!==s&&(n=lA(s)),null==n)return!1;if(null!=n.imports&&!o){let A;e.push(i);try{PA(n.imports,n=>{this.processInjectorType(n,t,e)&&(void 0===A&&(A=[]),A.push(n))})}finally{}if(void 0!==A)for(let t=0;t<A.length;t++){const{ngModule:e,providers:n}=A[t];PA(n,A=>this.processProvider(A,e,n||Os))}}this.injectorDefTypes.add(i),this.records.set(i,vs(n.factory,Rs));const r=n.providers;if(null!=r&&!o){const t=A;PA(r,A=>this.processProvider(A,t,r))}return void 0!==s&&void 0!==A.providers}processProvider(A,t,e){let n=Xs(A=DA(A))?A:DA(A&&A.provide);const s=function(A,t,e){return Ps(A)?vs(void 0,A.useValue):vs(Hs(A,t,e),Rs)}(A,t,e);if(Xs(A)||!0!==A.multi){const A=this.records.get(n);A&&void 0!==A.multi&&tn()}else{let t=this.records.get(n);t?void 0===t.multi&&tn():(t=vs(void 0,Rs,!0),t.factory=()=>LA(t.multi),this.records.set(n,t)),n=A,t.multi.push(A)}this.records.set(n,s)}hydrate(A,t){var e;return t.value===Ws?function(A){throw new Error("Cannot instantiate cyclic dependency! "+A)}(wA(A)):t.value===Rs&&(t.value=Ws,t.value=t.factory()),"object"==typeof t.value&&t.value&&null!==(e=t.value)&&"object"==typeof e&&"function"==typeof e.ngOnDestroy&&this.onDestroy.add(t.value),t.value}injectableDefInScope(A){return!!A.providedIn&&("string"==typeof A.providedIn?"any"===A.providedIn||A.providedIn===this.scope:this.injectorDefTypes.has(A.providedIn))}}function Ls(A){const t=cA(A),e=null!==t?t.factory:pt(A);if(null!==e)return e;const n=lA(A);if(null!==n)return n.factory;if(A instanceof bA)throw new Error(`Token ${wA(A)} is missing a \u0275prov definition.`);if(A instanceof Function)return function(A){const t=A.length;if(t>0){const e=$A(t,"?");throw new Error(`Can't resolve all parameters for ${wA(A)}: (${e.join(", ")}).`)}const e=function(A){const t=A&&(A[uA]||A[mA]||A[gA]&&A[gA]());if(t){const e=function(A){if(A.hasOwnProperty("name"))return A.name;const t=(""+A).match(/^function\s*([^\s(]+)/);return null===t?"":t[1]}(A);return console.warn(`DEPRECATED: DI is instantiating a token "${e}" that inherits its @Injectable decorator but does not provide one itself.\nThis will become an error in a future version of Angular. Please add @Injectable() to the "${e}" class.`),t}return null}(A);return null!==e?()=>e.factory(A):()=>new A}(A);throw new Error("unreachable")}function Hs(A,t,e){let n=void 0;if(Xs(A)){const t=DA(A);return pt(t)||Ls(t)}if(Ps(A))n=()=>DA(A.useValue);else if((s=A)&&s.useFactory)n=()=>A.useFactory(...LA(A.deps||[]));else if(function(A){return!(!A||!A.useExisting)}(A))n=()=>FA(DA(A.useExisting));else{const s=DA(A&&(A.useClass||A.provide));if(s||function(A,t,e){let n="";throw A&&t&&(n=` - only instances of Provider and Type are allowed, got: [${t.map(A=>A==e?"?"+e+"?":"...").join(", ")}]`),new Error(`Invalid provider for the NgModule '${wA(A)}'`+n)}(t,e,A),!function(A){return!!A.deps}(A))return pt(s)||Ls(s);n=()=>new s(...LA(A.deps))}var s;return n}function vs(A,t,e=!1){return{factory:A,value:t,multi:e?[]:void 0}}function Ps(A){return null!==A&&"object"==typeof A&&KA in A}function Xs(A){return"function"==typeof A}const _s=function(A,t,e){return function(A,t=null,e=null,n){const s=fs(A,t,e,n);return s._resolveInjectorDefTypes(),s}({name:e},t,A,e)};let $s=(()=>{class A{static create(A,t){return Array.isArray(A)?_s(A,t,""):_s(A.providers,A.parent,A.name||"")}}return A.THROW_IF_NOT_FOUND=NA,A.NULL=new HA,A.\u0275prov=rA({token:A,providedIn:"any",factory:()=>FA(jA)}),A.__NG_ELEMENT_ID__=-1,A})();function Ai(A,t,e){let n=e?A.styles:null,s=e?A.classes:null,i=0;if(null!==t)for(let o=0;o<t.length;o++){const A=t[o];"number"==typeof A?i=A:1==i?s=YA(s,A):2==i&&(n=YA(n,A+": "+t[++o]+";"))}e?A.styles=n:A.stylesWithoutHost=n,e?A.classes=s:A.classesWithoutHost=s}let ti=null;function ei(){if(!ti){const A=yA.Symbol;if(A&&A.iterator)ti=A.iterator;else{const A=Object.getOwnPropertyNames(Map.prototype);for(let t=0;t<A.length;++t){const e=A[t];"entries"!==e&&"size"!==e&&Map.prototype[e]===Map.prototype.entries&&(ti=e)}}}return ti}function ni(A){return!!si(A)&&(Array.isArray(A)||!(A instanceof Map)&&ei()in A)}function si(A){return null!==A&&("function"==typeof A||"object"==typeof A)}function ii(A,t,e){return!Object.is(A[t],e)&&(A[t]=e,!0)}function oi(A,t,e,n){const s=Wt();return ii(s,vt(),t)&&(Ot(),function(A,t,e,n,s,i){const o=kt(A,t),r=t[11];if(null==n)yt(r)?r.removeAttribute(o,e,i):o.removeAttribute(e);else{const t=null==s?ye(n):s(n,A.tagName||"",e);yt(r)?r.setAttribute(o,e,t,i):i?o.setAttributeNS(i,e,t):o.setAttribute(e,t)}}(ce(),s,A,t,e,n)),oi}function ri(A,t=sA.Default){const e=Wt();return null==e?FA(A,t):Ke(qt(),e,DA(A),t)}function ai(A,t,e){const n=Wt();return ii(n,vt(),t)&&function(A,t,e,n,s,i,o,r){const a=kt(t,e);let c,M=t.inputs;var l;null!=M&&(c=M[n])?(os(A,e,c,n,s),Dt(t)&&function(A,t){const e=zt(t,A);16&e[2]||(e[2]|=64)}(e,t.index)):3===t.type&&(n="class"===(l=n)?"className":"for"===l?"htmlFor":"formaction"===l?"formAction":"innerHtml"===l?"innerHTML":"readonly"===l?"readOnly":"tabindex"===l?"tabIndex":l,s=null!=o?o(s,t.tagName||"",n):s,yt(i)?i.setProperty(a,n,s):de(n)||(a.setProperty?a.setProperty(n,s):a[n]=s))}(Ot(),ce(),n,A,t,n[11],e),ai}function ci(A,t,e,n,s){const i=s?"class":"style";os(A,e,t.inputs[i],i,n)}function Mi(A,t,e,n){const s=Wt(),i=Ot(),o=20+A,r=s[11],a=s[o]=Qn(t,r,Jt.lFrame.currentNamespace),c=i.firstCreatePass?function(A,t,e,n,s,i,o){const r=t.consts,a=Nt(r,i),c=Tn(t,e[6],A,3,s,a);return function(A,t,e,n){let s=!1;if(Rt()){const i=function(A,t,e){const n=A.directiveRegistry;let s=null;if(n)for(let i=0;i<n.length;i++){const o=n[i];Mn(e,o.selectors,!1)&&(s||(s=[]),xe(Ue(e,t),A,o.type),Ct(o)?(2&e.flags&&An(e),qn(A,e),s.unshift(o)):s.push(o))}return s}(A,t,e),o=null===n?null:{"":-1};if(null!==i){let n=0;s=!0,fn(e,A.data.length,i.length);for(let A=0;A<i.length;A++){const t=i[A];t.providersResolver&&t.providersResolver(t)}On(A,e,i.length);let r=!1,a=!1;for(let s=0;s<i.length;s++){const c=i[s];e.mergedAttrs=Be(e.mergedAttrs,c.hostAttrs),Vn(A,t,c),Fn(A.data.length-1,c,o),null!==c.contentQueries&&(e.flags|=8),null===c.hostBindings&&null===c.hostAttrs&&0===c.hostVars||(e.flags|=128),!r&&(c.onChanges||c.onInit||c.doCheck)&&((A.preOrderHooks||(A.preOrderHooks=[])).push(e.index-20),r=!0),a||!c.onChanges&&!c.doCheck||((A.preOrderCheckHooks||(A.preOrderCheckHooks=[])).push(e.index-20),a=!0),Jn(A,c),n+=c.hostVars}!function(A,t){const e=t.directiveEnd,n=A.data,s=t.attrs,i=[];let o=null,r=null;for(let a=t.directiveStart;a<e;a++){const A=n[a],e=A.inputs,c=null===s||sn(t)?null:vn(e,s);i.push(c),o=Kn(e,a,o),r=Kn(A.outputs,a,r)}null!==o&&(o.hasOwnProperty("class")&&(t.flags|=16),o.hasOwnProperty("style")&&(t.flags|=32)),t.initialInputs=i,t.inputs=o,t.outputs=r}(A,e),Rn(A,t,n)}o&&function(A,t,e){if(t){const n=A.localNames=[];for(let A=0;A<t.length;A+=2){const s=e[t[A+1]];if(null==s)throw new Error(`Export of name '${t[A+1]}' not found!`);n.push(t[A],s)}}}(e,n,o)}e.mergedAttrs=Be(e.mergedAttrs,e.attrs)}(t,e,c,Nt(r,o)),null!==c.attrs&&Ai(c,c.attrs,!1),null!==c.mergedAttrs&&Ai(c,c.mergedAttrs,!0),null!==t.queries&&t.queries.elementStart(t,c),c}(A,i,s,0,t,e,n):i.data[o];Ft(c,!0);const M=c.mergedAttrs;null!==M&&we(r,a,M);const l=c.classes;null!==l&&Zs(r,a,l);const u=c.styles;null!==u&&Qs(r,a,u),Gs(i,s,a,c),0===Jt.lFrame.elementDepthCount&&$e(a,s),Jt.lFrame.elementDepthCount++,Gt(c)&&(function(A,t,e){Rt()&&(function(A,t,e,n){const s=e.directiveStart,i=e.directiveEnd;A.firstCreatePass||Ue(e,t),$e(n,t);const o=e.initialInputs;for(let r=s;r<i;r++){const n=A.data[r],i=Ct(n);i&&Ln(t,e,n);const a=Oe(t,A,r,e);$e(a,t),null!==o&&Hn(0,r-s,a,n,0,o),i&&(zt(e.index,t)[8]=a)}}(A,t,e,kt(e,t)),128==(128&e.flags)&&function(A,t,e){const n=e.directiveStart,s=e.directiveEnd,i=A.expandoInstructions,o=A.firstCreatePass,r=e.index-20,a=Jt.lFrame.currentDirectiveIndex;try{ae(r);for(let e=n;e<s;e++){const n=A.data[e],s=t[e];Xt(e),null!==n.hostBindings||0!==n.hostVars||null!==n.hostAttrs?Wn(n,s):o&&i.push(null)}}finally{ae(-1),Xt(a)}}(A,t,e))}(i,s,c),function(A,t,e){if(Bt(t)){const n=t.directiveEnd;for(let s=t.directiveStart;s<n;s++){const t=A.data[s];t.contentQueries&&t.contentQueries(1,e[s],s)}}}(i,c,s)),null!==n&&function(A,t,e=kt){const n=t.localNames;if(null!==n){let s=t.index+1;for(let i=0;i<n.length;i+=2){const o=n[i+1],r=-1===o?e(t,A):A[o];A[s++]=r}}}(s,c)}function li(){let A=qt();ft()?Vt():(A=A.parent,Ft(A,!1));const t=A;Jt.lFrame.elementDepthCount--;const e=Ot();e.firstCreatePass&&(Me(e,A),Bt(A)&&e.queries.elementEnd(A)),null!=t.classesWithoutHost&&function(A){return 0!=(16&A.flags)}(t)&&ci(e,t,Wt(),t.classesWithoutHost,!0),null!=t.stylesWithoutHost&&function(A){return 0!=(32&A.flags)}(t)&&ci(e,t,Wt(),t.stylesWithoutHost,!1)}function ui(A,t,e,n){Mi(A,t,e,n),li()}function hi(A){return!!A&&"function"==typeof A.then}function gi(A,t,e=!1,n){const s=Wt(),i=Ot(),o=qt();return function(A,t,e,n,s,i,o=!1,r){const a=Gt(n),c=A.firstCreatePass&&(A.cleanup||(A.cleanup=[])),M=ss(t);let l=!0;if(3===n.type){const u=kt(n,t),h=r?r(u):it,g=h.target||u,m=M.length,p=r?A=>r(Zt(A[n.index])).target:n.index;if(yt(e)){let o=null;if(!r&&a&&(o=function(A,t,e,n){const s=A.cleanup;if(null!=s)for(let i=0;i<s.length-1;i+=2){const A=s[i];if(A===e&&s[i+1]===n){const A=t[7],e=s[i+2];return A.length>e?A[e]:null}"string"==typeof A&&(i+=2)}return null}(A,t,s,n.index)),null!==o)(o.__ngLastListenerFn__||o).__ngNextListenerFn__=i,o.__ngLastListenerFn__=i,l=!1;else{i=pi(n,t,i,!1);const A=e.listen(h.name||g,s,i);M.push(i,A),c&&c.push(s,p,m,m+1)}}else i=pi(n,t,i,!0),g.addEventListener(s,i,o),M.push(i),c&&c.push(s,p,m,o)}const u=n.outputs;let h;if(l&&null!==u&&(h=u[s])){const A=h.length;if(A)for(let e=0;e<A;e+=2){const A=t[h[e]][h[e+1]].subscribe(i),o=M.length;M.push(i,A),c&&c.push(s,n.index,o,-(o+1))}}}(i,s,s[11],o,A,t,e,n),gi}function mi(A,t,e){try{return!1!==t(e)}catch(n){return is(A,n),!1}}function pi(A,t,e,n){return function s(i){if(i===Function)return e;const o=2&A.flags?zt(A.index,t):t;0==(32&t[2])&&$n(o);let r=mi(t,e,i),a=s.__ngNextListenerFn__;for(;a;)r=mi(t,a,i)&&r,a=a.__ngNextListenerFn__;return n&&!1===r&&(i.preventDefault(),i.returnValue=!1),r}}const wi=[];function Yi(A,t,e,n,s){const i=A[e+1],o=null===t;let r=n?Dn(i):Cn(i),a=!1;for(;0!==r&&(!1===a||o);){const e=A[r+1];di(A[r],t)&&(a=!0,A[r+1]=n?In(e):Gn(e)),r=n?Dn(e):Cn(e)}a&&(A[e+1]=n?Gn(i):In(i))}function di(A,t){return null===A||null==t||(Array.isArray(A)?A[1]:A)===t||!(!Array.isArray(A)||"string"!=typeof t)&&et(A,t)>=0}function Bi(A,t){return function(A,t,e,n){const s=Wt(),i=Ot(),o=function(A){const t=Jt.lFrame,e=t.bindingIndex;return t.bindingIndex=t.bindingIndex+2,e}();i.firstUpdatePass&&function(A,t,e,n){const s=A.data;if(null===s[e+1]){const n=s[re()+20],i=function(A,t){return t>=A.expandoStartIndex}(A,e);(function(A,t){return 0!=(16&A.flags)})(n)&&null===t&&!i&&(t=!1),t=function(A,t,e,n){const s=function(A){const t=Jt.lFrame.currentDirectiveIndex;return-1===t?null:A[t]}(A);let i=t.residualClasses;if(null===s)0===t.classBindings&&(e=Gi(e=Di(null,A,t,e,!0),t.attrs,!0),i=null);else{const n=t.directiveStylingLast;if(-1===n||A[n]!==s)if(e=Di(s,A,t,e,!0),null===i){let e=function(A,t,e){const n=t.classBindings;if(0!==Cn(n))return A[Dn(n)]}(A,t);void 0!==e&&Array.isArray(e)&&(e=Di(null,A,t,e[1],!0),e=Gi(e,t.attrs,!0),function(A,t,e,n){A[Dn(t.classBindings)]=n}(A,t,0,e))}else i=function(A,t,e){let n=void 0;const s=t.directiveEnd;for(let i=1+t.directiveStylingLast;i<s;i++)n=Gi(n,A[i].hostAttrs,!0);return Gi(n,t.attrs,!0)}(A,t)}return void 0!==i&&(t.residualClasses=i),e}(s,n,t),function(A,t,e,n,s,i){let o=t.classBindings,r=Dn(o),a=Cn(o);A[n]=e;let c,M=!1;if(Array.isArray(e)){const A=e;c=A[1],(null===c||et(A,c)>0)&&(M=!0)}else c=e;if(s)if(0!==a){const t=Dn(A[r+1]);A[n+1]=Bn(t,r),0!==t&&(A[t+1]=En(A[t+1],n)),A[r+1]=131071&A[r+1]|n<<17}else A[n+1]=Bn(r,0),0!==r&&(A[r+1]=En(A[r+1],n)),r=n;else A[n+1]=Bn(a,0),0===r?r=n:A[a+1]=En(A[a+1],n),a=n;M&&(A[n+1]=Gn(A[n+1])),Yi(A,c,n,!0),Yi(A,c,n,!1),function(A,t,e,n,s){const i=A.residualClasses;null!=i&&"string"==typeof t&&et(i,t)>=0&&(e[n+1]=In(e[n+1]))}(t,c,A,n),o=Bn(r,a),t.classBindings=o}(s,n,t,e,i)}}(i,A,o),t!==hn&&ii(s,o,t)&&function(A,t,e,n,s,i,o,r){if(3!==t.type)return;const a=A.data,c=a[r+1];Ei(1==(1&c)?Ci(a,t,e,s,Cn(c),!0):void 0)||(Ei(i)||function(A){return 2==(2&A)}(c)&&(i=Ci(a,null,e,s,r,!0)),function(A,t,e,n,s){const i=yt(A);s?i?A.addClass(e,n):e.classList.add(n):i?A.removeClass(e,n):e.classList.remove(n)}(n,0,Tt(re(),e),s,i))}(i,i.data[re()+20],s,s[11],A,s[o+1]=function(A,t){return null==A||"object"==typeof A&&(A=wA(function(A){return A instanceof class{constructor(A){this.changingThisBreaksApplicationSecurity=A}toString(){return"SafeValue must use [property]=binding: "+this.changingThisBreaksApplicationSecurity+" (see http://g.co/ng/security#xss)"}}?A.changingThisBreaksApplicationSecurity:A}(A))),A}(t),0,o)}(A,t),Bi}function Di(A,t,e,n,s){let i=null;const o=e.directiveEnd;let r=e.directiveStylingLast;for(-1===r?r=e.directiveStart:r++;r<o&&(i=t[r],n=Gi(n,i.hostAttrs,s),i!==A);)r++;return null!==A&&(e.directiveStylingLast=r),n}function Gi(A,t,e){const n=e?1:2;let s=-1;if(null!==t)for(let i=0;i<t.length;i++){const o=t[i];"number"==typeof o?s=o:s===n&&(Array.isArray(A)||(A=void 0===A?[]:["",A]),At(A,o,!!e||t[++i]))}return void 0===A?null:A}function Ci(A,t,e,n,s,i){const o=null===t;let r=void 0;for(;s>0;){const t=A[s],i=Array.isArray(t),a=i?t[1]:t,c=null===a;let M=e[s+1];M===hn&&(M=c?wi:void 0);let l=c?tt(M,n):a===n?M:void 0;if(i&&!Ei(l)&&(l=tt(t,n)),Ei(l)&&(r=l,o))return r;const u=A[s+1];s=o?Dn(u):Cn(u)}if(null!==t){let A=i?t.residualClasses:t.residualStyles;null!=A&&(r=tt(A,n))}return r}function Ei(A){return void 0!==A}function Ii(A,t=""){const e=Wt(),n=Ot(),s=A+20,i=n.firstCreatePass?Tn(n,e[6],A,3,null,null):n.data[s],o=e[s]=function(A,t){return yt(t)?t.createText(A):t.createTextNode(A)}(t,e[11]);Gs(n,e,o,i),Ft(i,!1)}function yi(A,t,e){const n=Wt(),s=function(A,t,e,n){return ii(A,vt(),e)?t+ye(e)+n:hn}(n,A,t,e);return s!==hn&&function(A,t,e){const n=Tt(t,A),s=A[11];yt(s)?s.setValue(n,e):n.textContent=e}(n,re(),s),yi}function Qi(A,t){const e=Ut(A)[1],n=e.data.length-1;Me(e,{directiveStart:n,directiveEnd:n+1})}function Zi(A){let t=Object.getPrototypeOf(A.type.prototype).constructor,e=!0;const n=[A];for(;t;){let s=void 0;if(Ct(A))s=t.\u0275cmp||t.\u0275dir;else{if(t.\u0275cmp)throw new Error("Directives cannot inherit Components");s=t.\u0275dir}if(s){if(e){n.push(s);const t=A;t.inputs=Ti(A.inputs),t.declaredInputs=Ti(A.declaredInputs),t.outputs=Ti(A.outputs);const e=s.hostBindings;e&&zi(A,e);const i=s.viewQuery,o=s.contentQueries;if(i&&ki(A,i),o&&Si(A,o),oA(A.inputs,s.inputs),oA(A.declaredInputs,s.declaredInputs),oA(A.outputs,s.outputs),Ct(s)&&s.data.animation){const t=A.data;t.animation=(t.animation||[]).concat(s.data.animation)}t.afterContentChecked=t.afterContentChecked||s.afterContentChecked,t.afterContentInit=A.afterContentInit||s.afterContentInit,t.afterViewChecked=A.afterViewChecked||s.afterViewChecked,t.afterViewInit=A.afterViewInit||s.afterViewInit,t.doCheck=A.doCheck||s.doCheck,t.onDestroy=A.onDestroy||s.onDestroy,t.onInit=A.onInit||s.onInit}const t=s.features;if(t)for(let n=0;n<t.length;n++){const s=t[n];s&&s.ngInherit&&s(A),s===Zi&&(e=!1)}}t=Object.getPrototypeOf(t)}!function(A){let t=0,e=null;for(let n=A.length-1;n>=0;n--){const s=A[n];s.hostVars=t+=s.hostVars,s.hostAttrs=Be(s.hostAttrs,e=Be(e,s.hostAttrs))}}(n)}function Ti(A){return A===it?{}:A===ot?[]:A}function ki(A,t){const e=A.viewQuery;A.viewQuery=e?(A,n)=>{t(A,n),e(A,n)}:t}function Si(A,t){const e=A.contentQueries;A.contentQueries=e?(A,n,s)=>{t(A,n,s),e(A,n,s)}:t}function zi(A,t){const e=A.hostBindings;A.hostBindings=e?(A,n)=>{t(A,n),e(A,n)}:t}class Ui{constructor(A,t,e){this.previousValue=A,this.currentValue=t,this.firstChange=e}isFirstChange(){return this.firstChange}}function bi(A){A.type.prototype.ngOnChanges&&(A.setInput=ji,A.onChanges=function(){const A=Ni(this),t=A&&A.current;if(t){const e=A.previous;if(e===it)A.previous=t;else for(let A in t)e[A]=t[A];A.current=null,this.ngOnChanges(t)}})}function ji(A,t,e,n){const s=Ni(A)||function(A,t){return A.__ngSimpleChanges__=t}(A,{previous:it,current:null}),i=s.current||(s.current={}),o=s.previous,r=this.declaredInputs[e],a=o[r];i[r]=new Ui(a&&a.currentValue,t,o===it),A[n]=t}function Ni(A){return A.__ngSimpleChanges__||null}function xi(A,t,e,n,s){if(A=DA(A),Array.isArray(A))for(let i=0;i<A.length;i++)xi(A[i],t,e,n,s);else{const i=Ot(),o=Wt();let r=Xs(A)?A:DA(A.provide),a=Hs(A);const c=qt(),M=65535&c.providerIndexes,l=c.directiveStart,u=c.providerIndexes>>16;if(Xs(A)||!A.multi){const n=new pe(a,s,ri),h=Ri(r,t,s?M:M+u,l);-1===h?(xe(Ue(c,o),i,r),Ki(i,A,t.length),t.push(r),c.directiveStart++,c.directiveEnd++,s&&(c.providerIndexes+=65536),e.push(n),o.push(n)):(e[h]=n,o[h]=n)}else{const h=Ri(r,t,M+u,l),g=Ri(r,t,M,M+u),m=h>=0&&e[h],p=g>=0&&e[g];if(s&&!p||!s&&!m){xe(Ue(c,o),i,r);const M=function(A,t,e,n,s){const i=new pe(A,e,ri);return i.multi=[],i.index=t,i.componentProviders=0,Ji(i,s,n&&!e),i}(s?Oi:Wi,e.length,s,n,a);!s&&p&&(e[g].providerFactory=M),Ki(i,A,t.length,0),t.push(r),c.directiveStart++,c.directiveEnd++,s&&(c.providerIndexes+=65536),e.push(M),o.push(M)}else Ki(i,A,h>-1?h:g,Ji(e[s?g:h],a,!s&&n));!s&&n&&p&&e[g].componentProviders++}}}function Ki(A,t,e,n){const s=Xs(t);if(s||t.useClass){const i=(t.useClass||t).prototype.ngOnDestroy;if(i){const o=A.destroyHooks||(A.destroyHooks=[]);if(!s&&t.multi){const A=o.indexOf(e);-1===A?o.push(e,[n,i]):o[A+1].push(n,i)}else o.push(e,i)}}}function Ji(A,t,e){return e&&A.componentProviders++,A.multi.push(t)-1}function Ri(A,t,e,n){for(let s=e;s<n;s++)if(t[s]===A)return s;return-1}function Wi(A,t,e,n){return qi(this.multi,[])}function Oi(A,t,e,n){const s=this.multi;let i;if(this.providerFactory){const A=this.providerFactory.componentProviders,t=Oe(e,e[1],this.providerFactory.index,n);i=t.slice(0,A),qi(s,i);for(let e=A;e<t.length;e++)i.push(t[e])}else i=[],qi(s,i);return i}function qi(A,t){for(let e=0;e<A.length;e++)t.push((0,A[e])());return t}function Fi(A,t=[]){return e=>{e.providersResolver=(e,n)=>function(A,t,e){const n=Ot();if(n.firstCreatePass){const s=Ct(A);xi(e,n.data,n.blueprint,s,!0),xi(t,n.data,n.blueprint,s,!1)}}(e,n?n(A):A,t)}}bi.ngInherit=!0;class fi{}class Vi{resolveComponentFactory(A){throw function(A){const t=Error(`No component factory found for ${wA(A)}. Did you add it to @NgModule.entryComponents?`);return t.ngComponent=A,t}(A)}}let Li=(()=>{class A{}return A.NULL=new Vi,A})(),Hi=(()=>{class A{constructor(A){this.nativeElement=A}}return A.__NG_ELEMENT_ID__=()=>vi(A),A})();const vi=function(A){return bs(A,qt(),Wt())};class Pi{}var Xi=function(A){return A[A.Important=1]="Important",A[A.DashCase=2]="DashCase",A}({});let _i=(()=>{class A{}return A.__NG_ELEMENT_ID__=()=>$i(),A})();const $i=function(){const A=Wt(),t=zt(qt().index,A);return function(A){const t=A[11];if(yt(t))return t;throw new Error("Cannot inject Renderer2 when the application uses Renderer3!")}(Yt(t)?t:A)};let Ao=(()=>{class A{}return A.\u0275prov=rA({token:A,providedIn:"root",factory:()=>null}),A})();class to{constructor(A){this.full=A,this.major=A.split(".")[0],this.minor=A.split(".")[1],this.patch=A.split(".").slice(2).join(".")}}const eo=new to("10.0.2");class no{constructor(){}supports(A){return ni(A)}create(A){return new io(A)}}const so=(A,t)=>t;class io{constructor(A){this.length=0,this._linkedRecords=null,this._unlinkedRecords=null,this._previousItHead=null,this._itHead=null,this._itTail=null,this._additionsHead=null,this._additionsTail=null,this._movesHead=null,this._movesTail=null,this._removalsHead=null,this._removalsTail=null,this._identityChangesHead=null,this._identityChangesTail=null,this._trackByFn=A||so}forEachItem(A){let t;for(t=this._itHead;null!==t;t=t._next)A(t)}forEachOperation(A){let t=this._itHead,e=this._removalsHead,n=0,s=null;for(;t||e;){const i=!e||t&&t.currentIndex<co(e,n,s)?t:e,o=co(i,n,s),r=i.currentIndex;if(i===e)n--,e=e._nextRemoved;else if(t=t._next,null==i.previousIndex)n++;else{s||(s=[]);const A=o-n,t=r-n;if(A!=t){for(let e=0;e<A;e++){const n=e<s.length?s[e]:s[e]=0,i=n+e;t<=i&&i<A&&(s[e]=n+1)}s[i.previousIndex]=t-A}}o!==r&&A(i,o,r)}}forEachPreviousItem(A){let t;for(t=this._previousItHead;null!==t;t=t._nextPrevious)A(t)}forEachAddedItem(A){let t;for(t=this._additionsHead;null!==t;t=t._nextAdded)A(t)}forEachMovedItem(A){let t;for(t=this._movesHead;null!==t;t=t._nextMoved)A(t)}forEachRemovedItem(A){let t;for(t=this._removalsHead;null!==t;t=t._nextRemoved)A(t)}forEachIdentityChange(A){let t;for(t=this._identityChangesHead;null!==t;t=t._nextIdentityChange)A(t)}diff(A){if(null==A&&(A=[]),!ni(A))throw new Error(`Error trying to diff '${wA(A)}'. Only arrays and iterables are allowed`);return this.check(A)?this:null}onDestroy(){}check(A){this._reset();let t,e,n,s=this._itHead,i=!1;if(Array.isArray(A)){this.length=A.length;for(let t=0;t<this.length;t++)e=A[t],n=this._trackByFn(t,e),null!==s&&Object.is(s.trackById,n)?(i&&(s=this._verifyReinsertion(s,e,n,t)),Object.is(s.item,e)||this._addIdentityChange(s,e)):(s=this._mismatch(s,e,n,t),i=!0),s=s._next}else t=0,function(A,t){if(Array.isArray(A))for(let e=0;e<A.length;e++)t(A[e]);else{const e=A[ei()]();let n;for(;!(n=e.next()).done;)t(n.value)}}(A,A=>{n=this._trackByFn(t,A),null!==s&&Object.is(s.trackById,n)?(i&&(s=this._verifyReinsertion(s,A,n,t)),Object.is(s.item,A)||this._addIdentityChange(s,A)):(s=this._mismatch(s,A,n,t),i=!0),s=s._next,t++}),this.length=t;return this._truncate(s),this.collection=A,this.isDirty}get isDirty(){return null!==this._additionsHead||null!==this._movesHead||null!==this._removalsHead||null!==this._identityChangesHead}_reset(){if(this.isDirty){let A,t;for(A=this._previousItHead=this._itHead;null!==A;A=A._next)A._nextPrevious=A._next;for(A=this._additionsHead;null!==A;A=A._nextAdded)A.previousIndex=A.currentIndex;for(this._additionsHead=this._additionsTail=null,A=this._movesHead;null!==A;A=t)A.previousIndex=A.currentIndex,t=A._nextMoved;this._movesHead=this._movesTail=null,this._removalsHead=this._removalsTail=null,this._identityChangesHead=this._identityChangesTail=null}}_mismatch(A,t,e,n){let s;return null===A?s=this._itTail:(s=A._prev,this._remove(A)),null!==(A=null===this._linkedRecords?null:this._linkedRecords.get(e,n))?(Object.is(A.item,t)||this._addIdentityChange(A,t),this._moveAfter(A,s,n)):null!==(A=null===this._unlinkedRecords?null:this._unlinkedRecords.get(e,null))?(Object.is(A.item,t)||this._addIdentityChange(A,t),this._reinsertAfter(A,s,n)):A=this._addAfter(new oo(t,e),s,n),A}_verifyReinsertion(A,t,e,n){let s=null===this._unlinkedRecords?null:this._unlinkedRecords.get(e,null);return null!==s?A=this._reinsertAfter(s,A._prev,n):A.currentIndex!=n&&(A.currentIndex=n,this._addToMoves(A,n)),A}_truncate(A){for(;null!==A;){const t=A._next;this._addToRemovals(this._unlink(A)),A=t}null!==this._unlinkedRecords&&this._unlinkedRecords.clear(),null!==this._additionsTail&&(this._additionsTail._nextAdded=null),null!==this._movesTail&&(this._movesTail._nextMoved=null),null!==this._itTail&&(this._itTail._next=null),null!==this._removalsTail&&(this._removalsTail._nextRemoved=null),null!==this._identityChangesTail&&(this._identityChangesTail._nextIdentityChange=null)}_reinsertAfter(A,t,e){null!==this._unlinkedRecords&&this._unlinkedRecords.remove(A);const n=A._prevRemoved,s=A._nextRemoved;return null===n?this._removalsHead=s:n._nextRemoved=s,null===s?this._removalsTail=n:s._prevRemoved=n,this._insertAfter(A,t,e),this._addToMoves(A,e),A}_moveAfter(A,t,e){return this._unlink(A),this._insertAfter(A,t,e),this._addToMoves(A,e),A}_addAfter(A,t,e){return this._insertAfter(A,t,e),this._additionsTail=null===this._additionsTail?this._additionsHead=A:this._additionsTail._nextAdded=A,A}_insertAfter(A,t,e){const n=null===t?this._itHead:t._next;return A._next=n,A._prev=t,null===n?this._itTail=A:n._prev=A,null===t?this._itHead=A:t._next=A,null===this._linkedRecords&&(this._linkedRecords=new ao),this._linkedRecords.put(A),A.currentIndex=e,A}_remove(A){return this._addToRemovals(this._unlink(A))}_unlink(A){null!==this._linkedRecords&&this._linkedRecords.remove(A);const t=A._prev,e=A._next;return null===t?this._itHead=e:t._next=e,null===e?this._itTail=t:e._prev=t,A}_addToMoves(A,t){return A.previousIndex===t||(this._movesTail=null===this._movesTail?this._movesHead=A:this._movesTail._nextMoved=A),A}_addToRemovals(A){return null===this._unlinkedRecords&&(this._unlinkedRecords=new ao),this._unlinkedRecords.put(A),A.currentIndex=null,A._nextRemoved=null,null===this._removalsTail?(this._removalsTail=this._removalsHead=A,A._prevRemoved=null):(A._prevRemoved=this._removalsTail,this._removalsTail=this._removalsTail._nextRemoved=A),A}_addIdentityChange(A,t){return A.item=t,this._identityChangesTail=null===this._identityChangesTail?this._identityChangesHead=A:this._identityChangesTail._nextIdentityChange=A,A}}class oo{constructor(A,t){this.item=A,this.trackById=t,this.currentIndex=null,this.previousIndex=null,this._nextPrevious=null,this._prev=null,this._next=null,this._prevDup=null,this._nextDup=null,this._prevRemoved=null,this._nextRemoved=null,this._nextAdded=null,this._nextMoved=null,this._nextIdentityChange=null}}class ro{constructor(){this._head=null,this._tail=null}add(A){null===this._head?(this._head=this._tail=A,A._nextDup=null,A._prevDup=null):(this._tail._nextDup=A,A._prevDup=this._tail,A._nextDup=null,this._tail=A)}get(A,t){let e;for(e=this._head;null!==e;e=e._nextDup)if((null===t||t<=e.currentIndex)&&Object.is(e.trackById,A))return e;return null}remove(A){const t=A._prevDup,e=A._nextDup;return null===t?this._head=e:t._nextDup=e,null===e?this._tail=t:e._prevDup=t,null===this._head}}class ao{constructor(){this.map=new Map}put(A){const t=A.trackById;let e=this.map.get(t);e||(e=new ro,this.map.set(t,e)),e.add(A)}get(A,t){const e=this.map.get(A);return e?e.get(A,t):null}remove(A){const t=A.trackById;return this.map.get(t).remove(A)&&this.map.delete(t),A}get isEmpty(){return 0===this.map.size}clear(){this.map.clear()}}function co(A,t,e){const n=A.previousIndex;if(null===n)return n;let s=0;return e&&n<e.length&&(s=e[n]),n+t+s}class Mo{constructor(){}supports(A){return A instanceof Map||si(A)}create(){return new lo}}class lo{constructor(){this._records=new Map,this._mapHead=null,this._appendAfter=null,this._previousMapHead=null,this._changesHead=null,this._changesTail=null,this._additionsHead=null,this._additionsTail=null,this._removalsHead=null,this._removalsTail=null}get isDirty(){return null!==this._additionsHead||null!==this._changesHead||null!==this._removalsHead}forEachItem(A){let t;for(t=this._mapHead;null!==t;t=t._next)A(t)}forEachPreviousItem(A){let t;for(t=this._previousMapHead;null!==t;t=t._nextPrevious)A(t)}forEachChangedItem(A){let t;for(t=this._changesHead;null!==t;t=t._nextChanged)A(t)}forEachAddedItem(A){let t;for(t=this._additionsHead;null!==t;t=t._nextAdded)A(t)}forEachRemovedItem(A){let t;for(t=this._removalsHead;null!==t;t=t._nextRemoved)A(t)}diff(A){if(A){if(!(A instanceof Map||si(A)))throw new Error(`Error trying to diff '${wA(A)}'. Only maps and objects are allowed`)}else A=new Map;return this.check(A)?this:null}onDestroy(){}check(A){this._reset();let t=this._mapHead;if(this._appendAfter=null,this._forEach(A,(A,e)=>{if(t&&t.key===e)this._maybeAddToChanges(t,A),this._appendAfter=t,t=t._next;else{const n=this._getOrCreateRecordForKey(e,A);t=this._insertBeforeOrAppend(t,n)}}),t){t._prev&&(t._prev._next=null),this._removalsHead=t;for(let A=t;null!==A;A=A._nextRemoved)A===this._mapHead&&(this._mapHead=null),this._records.delete(A.key),A._nextRemoved=A._next,A.previousValue=A.currentValue,A.currentValue=null,A._prev=null,A._next=null}return this._changesTail&&(this._changesTail._nextChanged=null),this._additionsTail&&(this._additionsTail._nextAdded=null),this.isDirty}_insertBeforeOrAppend(A,t){if(A){const e=A._prev;return t._next=A,t._prev=e,A._prev=t,e&&(e._next=t),A===this._mapHead&&(this._mapHead=t),this._appendAfter=A,A}return this._appendAfter?(this._appendAfter._next=t,t._prev=this._appendAfter):this._mapHead=t,this._appendAfter=t,null}_getOrCreateRecordForKey(A,t){if(this._records.has(A)){const e=this._records.get(A);this._maybeAddToChanges(e,t);const n=e._prev,s=e._next;return n&&(n._next=s),s&&(s._prev=n),e._next=null,e._prev=null,e}const e=new uo(A);return this._records.set(A,e),e.currentValue=t,this._addToAdditions(e),e}_reset(){if(this.isDirty){let A;for(this._previousMapHead=this._mapHead,A=this._previousMapHead;null!==A;A=A._next)A._nextPrevious=A._next;for(A=this._changesHead;null!==A;A=A._nextChanged)A.previousValue=A.currentValue;for(A=this._additionsHead;null!=A;A=A._nextAdded)A.previousValue=A.currentValue;this._changesHead=this._changesTail=null,this._additionsHead=this._additionsTail=null,this._removalsHead=null}}_maybeAddToChanges(A,t){Object.is(t,A.currentValue)||(A.previousValue=A.currentValue,A.currentValue=t,this._addToChanges(A))}_addToAdditions(A){null===this._additionsHead?this._additionsHead=this._additionsTail=A:(this._additionsTail._nextAdded=A,this._additionsTail=A)}_addToChanges(A){null===this._changesHead?this._changesHead=this._changesTail=A:(this._changesTail._nextChanged=A,this._changesTail=A)}_forEach(A,t){A instanceof Map?A.forEach(t):Object.keys(A).forEach(e=>t(A[e],e))}}class uo{constructor(A){this.key=A,this.previousValue=null,this.currentValue=null,this._nextPrevious=null,this._next=null,this._prev=null,this._nextAdded=null,this._nextRemoved=null,this._nextChanged=null}}let ho=(()=>{class A{constructor(A){this.factories=A}static create(t,e){if(null!=e){const A=e.factories.slice();t=t.concat(A)}return new A(t)}static extend(t){return{provide:A,useFactory:e=>{if(!e)throw new Error("Cannot extend IterableDiffers without a parent injector");return A.create(t,e)},deps:[[A,new nA,new tA]]}}find(A){const t=this.factories.find(t=>t.supports(A));if(null!=t)return t;throw new Error(`Cannot find a differ supporting object '${A}' of type '${e=A,e.name||typeof e}'`);var e}}return A.\u0275prov=rA({token:A,providedIn:"root",factory:()=>new A([new no])}),A})(),go=(()=>{class A{constructor(A){this.factories=A}static create(t,e){if(e){const A=e.factories.slice();t=t.concat(A)}return new A(t)}static extend(t){return{provide:A,useFactory:e=>{if(!e)throw new Error("Cannot extend KeyValueDiffers without a parent injector");return A.create(t,e)},deps:[[A,new nA,new tA]]}}find(A){const t=this.factories.find(t=>t.supports(A));if(t)return t;throw new Error(`Cannot find a differ supporting object '${A}'`)}}return A.\u0275prov=rA({token:A,providedIn:"root",factory:()=>new A([new Mo])}),A})();const mo=[new Mo],po=new ho([new no]),wo=new go(mo);let Yo=(()=>{class A{}return A.__NG_ELEMENT_ID__=()=>Bo(A,Hi),A})();const Bo=function(A,t){return js(A,t,qt(),Wt())};let Do=(()=>{class A{}return A.__NG_ELEMENT_ID__=()=>Go(A,Hi),A})();const Go=function(A,t){return Ns(A,t,qt(),Wt())},Co={};class Eo extends Li{constructor(A){super(),this.ngModule=A}resolveComponentFactory(A){const t=mt(A);return new Qo(t,this.ngModule)}}function Io(A){const t=[];for(let e in A)A.hasOwnProperty(e)&&t.push({propName:A[e],templateName:e});return t}const yo=new bA("SCHEDULER_TOKEN",{providedIn:"root",factory:()=>Ze});class Qo extends fi{constructor(A,t){super(),this.componentDef=A,this.ngModule=t,this.componentType=A.type,this.selector=A.selectors.map(un).join(","),this.ngContentSelectors=A.ngContentSelectors?A.ngContentSelectors:[],this.isBoundToModule=!!t}get inputs(){return Io(this.componentDef.inputs)}get outputs(){return Io(this.componentDef.outputs)}create(A,t,e,n){const s=(n=n||this.ngModule)?function(A,t){return{get:(e,n,s)=>{const i=A.get(e,Co,s);return i!==Co||n===Co?i:t.get(e,n,s)}}}(A,n.injector):A,i=s.get(Pi,Qt),o=s.get(Ao,null),r=i.createRenderer(null,this.componentDef),a=this.componentDef.selectors[0][0]||"div",c=e?function(A,t,e){if(yt(A))return A.selectRootElement(t,e===st.ShadowDom);let n="string"==typeof t?A.querySelector(t):t;return n.textContent="",n}(r,e,this.componentDef.encapsulation):Qn(a,i.createRenderer(null,this.componentDef),function(A){const t=A.toLowerCase();return"svg"===t?"http://www.w3.org/2000/svg":"math"===t?"http://www.w3.org/1998/MathML/":null}(a)),M=this.componentDef.onPush?576:528,l={components:[],scheduler:Ze,clean:ns,playerHandler:null,flags:0},u=jn(0,-1,null,1,0,null,null,null,null,null),h=Zn(null,u,l,M,null,null,i,r,o,s);let g,m;te(h,null);try{const A=function(A,t,e,n,s,i){const o=e[1];e[20]=A;const r=Tn(o,null,0,3,null,null),a=r.mergedAttrs=t.hostAttrs;null!==a&&(Ai(r,a,!0),null!==A&&(we(s,A,a),null!==r.classes&&Zs(s,A,r.classes),null!==r.styles&&Qs(s,A,r.styles)));const c=n.createRenderer(A,t),M=Zn(e,bn(t),null,t.onPush?64:16,e[20],r,n,c,void 0);return o.firstCreatePass&&(xe(Ue(r,e),o,t.type),qn(o,r),fn(r,e.length,1)),_n(e,M),e[20]=M}(c,this.componentDef,h,i,r);if(c)if(e)we(r,c,["ng-version",eo.full]);else{const{attrs:A,classes:t}=function(A){const t=[],e=[];let n=1,s=2;for(;n<A.length;){let i=A[n];if("string"==typeof i)2===s?""!==i&&t.push(i,A[++n]):8===s&&e.push(i);else{if(!an(s))break;s=i}n++}return{attrs:t,classes:e}}(this.componentDef.selectors[0]);A&&we(r,c,A),t&&t.length>0&&Zs(r,c,t.join(" "))}if(m=St(u,0),void 0!==t){const A=m.projection=[];for(let e=0;e<this.ngContentSelectors.length;e++){const n=t[e];A.push(null!=n?Array.from(n):null)}}g=function(A,t,e,n,s){const i=e[1],o=function(A,t,e){const n=qt();A.firstCreatePass&&(e.providersResolver&&e.providersResolver(e),On(A,n,1),Vn(A,t,e));const s=Oe(t,A,t.length-1,n);$e(s,t);const i=kt(n,t);return i&&$e(i,t),s}(i,e,t);n.components.push(o),A[8]=o,s&&s.forEach(A=>A(o,t)),t.contentQueries&&t.contentQueries(1,o,e.length-1);const r=qt();if(i.firstCreatePass&&(null!==t.hostBindings||null!==t.hostAttrs)){ae(r.index-20);const A=e[1];Jn(A,t),Rn(A,e,t.hostVars),Wn(t,o)}return o}(A,this.componentDef,h,l,[Qi]),kn(u,h,null)}finally{oe()}const p=new Zo(this.componentType,g,bs(Hi,m,h),h,m);return u.node.child=m,p}}class Zo extends class{}{constructor(A,t,e,n,s){super(),this.location=e,this._rootLView=n,this._tNode=s,this.destroyCbs=[],this.instance=t,this.hostView=this.changeDetectorRef=new ks(n),function(A,t,e,n){let s=A.node;null==s&&(A.node=s=xn(0,null,2,-1,null,null)),n[6]=s}(n[1],0,0,n),this.componentType=A}get injector(){return new fe(this._tNode,this._rootLView)}destroy(){this.destroyCbs&&(this.destroyCbs.forEach(A=>A()),this.destroyCbs=null,!this.hostView.destroyed&&this.hostView.destroy())}onDestroy(A){this.destroyCbs&&this.destroyCbs.push(A)}}const To=void 0;var ko=["en",[["a","p"],["AM","PM"],To],[["AM","PM"],To,To],[["S","M","T","W","T","F","S"],["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],["Su","Mo","Tu","We","Th","Fr","Sa"]],To,[["J","F","M","A","M","J","J","A","S","O","N","D"],["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],["January","February","March","April","May","June","July","August","September","October","November","December"]],To,[["B","A"],["BC","AD"],["Before Christ","Anno Domini"]],0,[6,0],["M/d/yy","MMM d, y","MMMM d, y","EEEE, MMMM d, y"],["h:mm a","h:mm:ss a","h:mm:ss a z","h:mm:ss a zzzz"],["{1}, {0}",To,"{1} 'at' {0}",To],[".",",",";","%","+","-","E","\xd7","\u2030","\u221e","NaN",":"],["#,##0.###","#,##0%","\xa4#,##0.00","#E0"],"USD","$","US Dollar",{},"ltr",function(A){let t=Math.floor(Math.abs(A)),e=A.toString().replace(/^[^.]*\.?/,"").length;return 1===t&&0===e?1:5}];let So={};function zo(A){return A in So||(So[A]=yA.ng&&yA.ng.common&&yA.ng.common.locales&&yA.ng.common.locales[A]),So[A]}var Uo=function(A){return A[A.LocaleId=0]="LocaleId",A[A.DayPeriodsFormat=1]="DayPeriodsFormat",A[A.DayPeriodsStandalone=2]="DayPeriodsStandalone",A[A.DaysFormat=3]="DaysFormat",A[A.DaysStandalone=4]="DaysStandalone",A[A.MonthsFormat=5]="MonthsFormat",A[A.MonthsStandalone=6]="MonthsStandalone",A[A.Eras=7]="Eras",A[A.FirstDayOfWeek=8]="FirstDayOfWeek",A[A.WeekendRange=9]="WeekendRange",A[A.DateFormat=10]="DateFormat",A[A.TimeFormat=11]="TimeFormat",A[A.DateTimeFormat=12]="DateTimeFormat",A[A.NumberSymbols=13]="NumberSymbols",A[A.NumberFormats=14]="NumberFormats",A[A.CurrencyCode=15]="CurrencyCode",A[A.CurrencySymbol=16]="CurrencySymbol",A[A.CurrencyName=17]="CurrencyName",A[A.Currencies=18]="Currencies",A[A.Directionality=19]="Directionality",A[A.PluralCase=20]="PluralCase",A[A.ExtraData=21]="ExtraData",A}({});let bo="en-US";function jo(A){var t,e;e="Expected localeId to be defined",null==(t=A)&&function(A,t,e,n){throw new Error("ASSERTION ERROR: "+A+` [Expected=> null != ${t} <=Actual]`)}(e,t),"string"==typeof A&&(bo=A.toLowerCase().replace(/_/g,"-"))}const No=new Map;class xo extends vA{constructor(A,t){super(),this._parent=t,this._bootstrapComponents=[],this.injector=this,this.destroyCbs=[],this.componentFactoryResolver=new Eo(this);const e=wt(A),n=A[SA]||null;n&&jo(n),this._bootstrapComponents=Te(e.bootstrap),this._r3Injector=fs(A,t,[{provide:vA,useValue:this},{provide:Li,useValue:this.componentFactoryResolver}],wA(A)),this._r3Injector._resolveInjectorDefTypes(),this.instance=this.get(A)}get(A,t=$s.THROW_IF_NOT_FOUND,e=sA.Default){return A===$s||A===vA||A===jA?this:this._r3Injector.get(A,t,e)}destroy(){const A=this._r3Injector;!A.destroyed&&A.destroy(),this.destroyCbs.forEach(A=>A()),this.destroyCbs=null}onDestroy(A){this.destroyCbs.push(A)}}class Ko extends class{}{constructor(A){super(),this.moduleType=A,null!==wt(A)&&function A(t){if(null!==t.\u0275mod.id){const A=t.\u0275mod.id;(function(A,t,e){if(t&&t!==e)throw new Error(`Duplicate module registered for ${A} - ${wA(t)} vs ${wA(t.name)}`)})(A,No.get(A),t),No.set(A,t)}let e=t.\u0275mod.imports;e instanceof Function&&(e=e()),e&&e.forEach(t=>A(t))}(A)}create(A){return new xo(this.moduleType,A)}}const Jo=class extends C{constructor(A=!1){super(),this.__isAsync=A}emit(A){super.next(A)}subscribe(A,t,e){let n,s=A=>null,i=()=>null;A&&"object"==typeof A?(n=this.__isAsync?t=>{setTimeout(()=>A.next(t))}:t=>{A.next(t)},A.error&&(s=this.__isAsync?t=>{setTimeout(()=>A.error(t))}:t=>{A.error(t)}),A.complete&&(i=this.__isAsync?()=>{setTimeout(()=>A.complete())}:()=>{A.complete()})):(n=this.__isAsync?t=>{setTimeout(()=>A(t))}:t=>{A(t)},t&&(s=this.__isAsync?A=>{setTimeout(()=>t(A))}:A=>{t(A)}),e&&(i=this.__isAsync?()=>{setTimeout(()=>e())}:()=>{e()}));const o=super.subscribe(n,s,i);return A instanceof l&&A.add(o),o}};function Ro(){return this._results[ei()]()}class Wo{constructor(){this.dirty=!0,this._results=[],this.changes=new Jo,this.length=0;const A=ei(),t=Wo.prototype;t[A]||(t[A]=Ro)}map(A){return this._results.map(A)}filter(A){return this._results.filter(A)}find(A){return this._results.find(A)}reduce(A,t){return this._results.reduce(A,t)}forEach(A){this._results.forEach(A)}some(A){return this._results.some(A)}toArray(){return this._results.slice()}toString(){return this._results.toString()}reset(A){this._results=function A(t,e){void 0===e&&(e=t);for(let n=0;n<t.length;n++){let s=t[n];Array.isArray(s)?(e===t&&(e=t.slice(0,n)),A(s,e)):e!==t&&e.push(s)}return e}(A),this.dirty=!1,this.length=this._results.length,this.last=this._results[this.length-1],this.first=this._results[0]}notifyOnChanges(){this.changes.emit(this)}setDirty(){this.dirty=!0}destroy(){this.changes.complete(),this.changes.unsubscribe()}}class Oo{constructor(A){this.queryList=A,this.matches=null}clone(){return new Oo(this.queryList)}setDirty(){this.queryList.setDirty()}}class qo{constructor(A=[]){this.queries=A}createEmbeddedView(A){const t=A.queries;if(null!==t){const e=null!==A.contentQueries?A.contentQueries[0]:t.length,n=[];for(let A=0;A<e;A++){const e=t.getByIndex(A);n.push(this.queries[e.indexInDeclarationView].clone())}return new qo(n)}return null}insertView(A){this.dirtyQueriesWithMatches(A)}detachView(A){this.dirtyQueriesWithMatches(A)}dirtyQueriesWithMatches(A){for(let t=0;t<this.queries.length;t++)null!==er(A,t).matches&&this.queries[t].setDirty()}}class Fo{constructor(A,t,e,n=null){this.predicate=A,this.descendants=t,this.isStatic=e,this.read=n}}class fo{constructor(A=[]){this.queries=A}elementStart(A,t){for(let e=0;e<this.queries.length;e++)this.queries[e].elementStart(A,t)}elementEnd(A){for(let t=0;t<this.queries.length;t++)this.queries[t].elementEnd(A)}embeddedTView(A){let t=null;for(let e=0;e<this.length;e++){const n=null!==t?t.length:0,s=this.getByIndex(e).embeddedTView(A,n);s&&(s.indexInDeclarationView=e,null!==t?t.push(s):t=[s])}return null!==t?new fo(t):null}template(A,t){for(let e=0;e<this.queries.length;e++)this.queries[e].template(A,t)}getByIndex(A){return this.queries[A]}get length(){return this.queries.length}track(A){this.queries.push(A)}}class Vo{constructor(A,t=-1){this.metadata=A,this.matches=null,this.indexInDeclarationView=-1,this.crossesNgTemplate=!1,this._appliesToNextNode=!0,this._declarationNodeIndex=t}elementStart(A,t){this.isApplyingToNode(t)&&this.matchTNode(A,t)}elementEnd(A){this._declarationNodeIndex===A.index&&(this._appliesToNextNode=!1)}template(A,t){this.elementStart(A,t)}embeddedTView(A,t){return this.isApplyingToNode(A)?(this.crossesNgTemplate=!0,this.addMatch(-A.index,t),new Vo(this.metadata)):null}isApplyingToNode(A){if(this._appliesToNextNode&&!1===this.metadata.descendants){const t=this._declarationNodeIndex;let e=A.parent;for(;null!==e&&4===e.type&&e.index!==t;)e=e.parent;return t===(null!==e?e.index:-1)}return this._appliesToNextNode}matchTNode(A,t){if(Array.isArray(this.metadata.predicate)){const e=this.metadata.predicate;for(let n=0;n<e.length;n++)this.matchTNodeWithReadOption(A,t,Lo(t,e[n]))}else{const e=this.metadata.predicate;e===Yo?0===t.type&&this.matchTNodeWithReadOption(A,t,-1):this.matchTNodeWithReadOption(A,t,We(t,A,e,!1,!1))}}matchTNodeWithReadOption(A,t,e){if(null!==e){const n=this.metadata.read;if(null!==n)if(n===Hi||n===Do||n===Yo&&0===t.type)this.addMatch(t.index,-2);else{const e=We(t,A,n,!1,!1);null!==e&&this.addMatch(t.index,e)}else this.addMatch(t.index,e)}}addMatch(A,t){null===this.matches?this.matches=[A,t]:this.matches.push(A,t)}}function Lo(A,t){const e=A.localNames;if(null!==e)for(let n=0;n<e.length;n+=2)if(e[n]===t)return e[n+1];return null}function Ho(A,t,e,n){return-1===e?function(A,t){return 3===A.type||4===A.type?bs(Hi,A,t):0===A.type?js(Yo,Hi,A,t):null}(t,A):-2===e?function(A,t,e){return e===Hi?bs(Hi,t,A):e===Yo?js(Yo,Hi,t,A):e===Do?Ns(Do,Hi,t,A):void 0}(A,t,n):Oe(A,A[1],e,t)}function vo(A,t,e,n){const s=t[19].queries[n];if(null===s.matches){const n=A.data,i=e.matches,o=[];for(let A=0;A<i.length;A+=2){const s=i[A];o.push(s<0?null:Ho(t,n[s],i[A+1],e.metadata.read))}s.matches=o}return s.matches}function Po(A){const t=Wt(),e=Ot(),n=_t();$t(n+1);const s=er(e,n);if(A.dirty&&bt(t)===s.metadata.isStatic){if(null===s.matches)A.reset([]);else{const i=s.crossesNgTemplate?function A(t,e,n,s){const i=t.queries.getByIndex(n),o=i.matches;if(null!==o){const r=vo(t,e,i,n);for(let t=0;t<o.length;t+=2){const n=o[t];if(n>0)s.push(r[t/2]);else{const i=o[t+1],r=e[-n];for(let t=10;t<r.length;t++){const e=r[t];e[17]===e[3]&&A(e[1],e,i,s)}if(null!==r[9]){const t=r[9];for(let e=0;e<t.length;e++){const n=t[e];A(n[1],n,i,s)}}}}}return s}(e,t,n,[]):vo(e,t,s,n);A.reset(i),A.notifyOnChanges()}return!0}return!1}function Xo(A,t,e){!function(A,t,e,n,s,i){A.firstCreatePass&&tr(A,new Fo(e,n,!1,s),-1),Ar(A,t)}(Ot(),Wt(),A,t,e)}function _o(A,t,e,n){!function(A,t,e,n,s,i,o,r){A.firstCreatePass&&(tr(A,new Fo(e,n,!1,s),o.index),function(A,t){const e=A.contentQueries||(A.contentQueries=[]);t!==(A.contentQueries.length?e[e.length-1]:-1)&&e.push(A.queries.length-1,t)}(A,r)),Ar(A,t)}(Ot(),Wt(),t,e,n,0,qt(),A)}function $o(){return A=Wt(),t=_t(),A[19].queries[t].queryList;var A,t}function Ar(A,t){const e=new Wo;Nn(A,t,e,e.destroy),null===t[19]&&(t[19]=new qo),t[19].queries.push(new Oo(e))}function tr(A,t,e){null===A.queries&&(A.queries=new fo),A.queries.track(new Vo(t,e))}function er(A,t){return A.queries.getByIndex(t)}const nr=new bA("Application Initializer");let sr=(()=>{class A{constructor(A){this.appInits=A,this.initialized=!1,this.done=!1,this.donePromise=new Promise((A,t)=>{this.resolve=A,this.reject=t})}runInitializers(){if(this.initialized)return;const A=[],t=()=>{this.done=!0,this.resolve()};if(this.appInits)for(let e=0;e<this.appInits.length;e++){const t=this.appInits[e]();hi(t)&&A.push(t)}Promise.all(A).then(()=>{t()}).catch(A=>{this.reject(A)}),0===A.length&&t(),this.initialized=!0}}return A.\u0275fac=function(t){return new(t||A)(FA(nr,8))},A.\u0275prov=rA({token:A,factory:A.\u0275fac}),A})();const ir=new bA("AppId"),or={provide:ir,useFactory:function(){return`${rr()}${rr()}${rr()}`},deps:[]};function rr(){return String.fromCharCode(97+Math.floor(25*Math.random()))}const ar=new bA("Platform Initializer"),cr=new bA("Platform ID"),Mr=new bA("appBootstrapListener");let lr=(()=>{class A{log(A){console.log(A)}warn(A){console.warn(A)}}return A.\u0275fac=function(t){return new(t||A)},A.\u0275prov=rA({token:A,factory:A.\u0275fac}),A})();const ur=new bA("LocaleId"),hr=new bA("DefaultCurrencyCode");class gr{constructor(A,t){this.ngModuleFactory=A,this.componentFactories=t}}const mr=function(A){return new Ko(A)},pr=mr,wr=function(A){return Promise.resolve(mr(A))},Yr=function(A){const t=mr(A),e=Te(wt(A).declarations).reduce((A,t)=>{const e=mt(t);return e&&A.push(new Qo(e)),A},[]);return new gr(t,e)},dr=Yr,Br=function(A){return Promise.resolve(Yr(A))};let Dr=(()=>{class A{constructor(){this.compileModuleSync=pr,this.compileModuleAsync=wr,this.compileModuleAndAllComponentsSync=dr,this.compileModuleAndAllComponentsAsync=Br}clearCache(){}clearCacheFor(A){}getModuleId(A){}}return A.\u0275fac=function(t){return new(t||A)},A.\u0275prov=rA({token:A,factory:A.\u0275fac}),A})();const Gr=(()=>Promise.resolve(0))();function Cr(A){"undefined"==typeof Zone?Gr.then(()=>{A&&A.apply(null,null)}):Zone.current.scheduleMicroTask("scheduleMicrotask",A)}class Er{constructor({enableLongStackTrace:A=!1,shouldCoalesceEventChangeDetection:t=!1}){if(this.hasPendingMacrotasks=!1,this.hasPendingMicrotasks=!1,this.isStable=!0,this.onUnstable=new Jo(!1),this.onMicrotaskEmpty=new Jo(!1),this.onStable=new Jo(!1),this.onError=new Jo(!1),"undefined"==typeof Zone)throw new Error("In this configuration Angular requires Zone.js");Zone.assertZonePatched(),this._nesting=0,this._outer=this._inner=Zone.current,Zone.wtfZoneSpec&&(this._inner=this._inner.fork(Zone.wtfZoneSpec)),Zone.TaskTrackingZoneSpec&&(this._inner=this._inner.fork(new Zone.TaskTrackingZoneSpec)),A&&Zone.longStackTraceZoneSpec&&(this._inner=this._inner.fork(Zone.longStackTraceZoneSpec)),this.shouldCoalesceEventChangeDetection=t,this.lastRequestAnimationFrameId=-1,this.nativeRequestAnimationFrame=function(){let A=yA.requestAnimationFrame,t=yA.cancelAnimationFrame;if("undefined"!=typeof Zone&&A&&t){const e=A[Zone.__symbol__("OriginalDelegate")];e&&(A=e);const n=t[Zone.__symbol__("OriginalDelegate")];n&&(t=n)}return{nativeRequestAnimationFrame:A,nativeCancelAnimationFrame:t}}().nativeRequestAnimationFrame,function(A){const t=!!A.shouldCoalesceEventChangeDetection&&A.nativeRequestAnimationFrame&&(()=>{!function(A){-1===A.lastRequestAnimationFrameId&&(A.lastRequestAnimationFrameId=A.nativeRequestAnimationFrame.call(yA,()=>{A.fakeTopEventTask||(A.fakeTopEventTask=Zone.root.scheduleEventTask("fakeTopEventTask",()=>{A.lastRequestAnimationFrameId=-1,Zr(A),Qr(A)},void 0,()=>{},()=>{})),A.fakeTopEventTask.invoke()}),Zr(A))}(A)});A._inner=A._inner.fork({name:"angular",properties:{isAngularZone:!0,maybeDelayChangeDetection:t},onInvokeTask:(e,n,s,i,o,r)=>{try{return Tr(A),e.invokeTask(s,i,o,r)}finally{t&&"eventTask"===i.type&&t(),kr(A)}},onInvoke:(t,e,n,s,i,o,r)=>{try{return Tr(A),t.invoke(n,s,i,o,r)}finally{kr(A)}},onHasTask:(t,e,n,s)=>{t.hasTask(n,s),e===n&&("microTask"==s.change?(A._hasPendingMicrotasks=s.microTask,Zr(A),Qr(A)):"macroTask"==s.change&&(A.hasPendingMacrotasks=s.macroTask))},onHandleError:(t,e,n,s)=>(t.handleError(n,s),A.runOutsideAngular(()=>A.onError.emit(s)),!1)})}(this)}static isInAngularZone(){return!0===Zone.current.get("isAngularZone")}static assertInAngularZone(){if(!Er.isInAngularZone())throw new Error("Expected to be in Angular Zone, but it is not!")}static assertNotInAngularZone(){if(Er.isInAngularZone())throw new Error("Expected to not be in Angular Zone, but it is!")}run(A,t,e){return this._inner.run(A,t,e)}runTask(A,t,e,n){const s=this._inner,i=s.scheduleEventTask("NgZoneEvent: "+n,A,yr,Ir,Ir);try{return s.runTask(i,t,e)}finally{s.cancelTask(i)}}runGuarded(A,t,e){return this._inner.runGuarded(A,t,e)}runOutsideAngular(A){return this._outer.run(A)}}function Ir(){}const yr={};function Qr(A){if(0==A._nesting&&!A.hasPendingMicrotasks&&!A.isStable)try{A._nesting++,A.onMicrotaskEmpty.emit(null)}finally{if(A._nesting--,!A.hasPendingMicrotasks)try{A.runOutsideAngular(()=>A.onStable.emit(null))}finally{A.isStable=!0}}}function Zr(A){A.hasPendingMicrotasks=!!(A._hasPendingMicrotasks||A.shouldCoalesceEventChangeDetection&&-1!==A.lastRequestAnimationFrameId)}function Tr(A){A._nesting++,A.isStable&&(A.isStable=!1,A.onUnstable.emit(null))}function kr(A){A._nesting--,Qr(A)}class Sr{constructor(){this.hasPendingMicrotasks=!1,this.hasPendingMacrotasks=!1,this.isStable=!0,this.onUnstable=new Jo,this.onMicrotaskEmpty=new Jo,this.onStable=new Jo,this.onError=new Jo}run(A,t,e){return A.apply(t,e)}runGuarded(A,t,e){return A.apply(t,e)}runOutsideAngular(A){return A()}runTask(A,t,e,n){return A.apply(t,e)}}let zr=(()=>{class A{constructor(A){this._ngZone=A,this._pendingCount=0,this._isZoneStable=!0,this._didWork=!1,this._callbacks=[],this.taskTrackingZone=null,this._watchAngularEvents(),A.run(()=>{this.taskTrackingZone="undefined"==typeof Zone?null:Zone.current.get("TaskTrackingZone")})}_watchAngularEvents(){this._ngZone.onUnstable.subscribe({next:()=>{this._didWork=!0,this._isZoneStable=!1}}),this._ngZone.runOutsideAngular(()=>{this._ngZone.onStable.subscribe({next:()=>{Er.assertNotInAngularZone(),Cr(()=>{this._isZoneStable=!0,this._runCallbacksIfReady()})}})})}increasePendingRequestCount(){return this._pendingCount+=1,this._didWork=!0,this._pendingCount}decreasePendingRequestCount(){if(this._pendingCount-=1,this._pendingCount<0)throw new Error("pending async requests below zero");return this._runCallbacksIfReady(),this._pendingCount}isStable(){return this._isZoneStable&&0===this._pendingCount&&!this._ngZone.hasPendingMacrotasks}_runCallbacksIfReady(){if(this.isStable())Cr(()=>{for(;0!==this._callbacks.length;){let A=this._callbacks.pop();clearTimeout(A.timeoutId),A.doneCb(this._didWork)}this._didWork=!1});else{let A=this.getPendingTasks();this._callbacks=this._callbacks.filter(t=>!t.updateCb||!t.updateCb(A)||(clearTimeout(t.timeoutId),!1)),this._didWork=!0}}getPendingTasks(){return this.taskTrackingZone?this.taskTrackingZone.macroTasks.map(A=>({source:A.source,creationLocation:A.creationLocation,data:A.data})):[]}addCallback(A,t,e){let n=-1;t&&t>0&&(n=setTimeout(()=>{this._callbacks=this._callbacks.filter(A=>A.timeoutId!==n),A(this._didWork,this.getPendingTasks())},t)),this._callbacks.push({doneCb:A,timeoutId:n,updateCb:e})}whenStable(A,t,e){if(e&&!this.taskTrackingZone)throw new Error('Task tracking zone is required when passing an update callback to whenStable(). Is "zone.js/dist/task-tracking.js" loaded?');this.addCallback(A,t,e),this._runCallbacksIfReady()}getPendingRequestCount(){return this._pendingCount}findProviders(A,t,e){return[]}}return A.\u0275fac=function(t){return new(t||A)(FA(Er))},A.\u0275prov=rA({token:A,factory:A.\u0275fac}),A})(),Ur=(()=>{class A{constructor(){this._applications=new Map,Nr.addToWindow(this)}registerApplication(A,t){this._applications.set(A,t)}unregisterApplication(A){this._applications.delete(A)}unregisterAllApplications(){this._applications.clear()}getTestability(A){return this._applications.get(A)||null}getAllTestabilities(){return Array.from(this._applications.values())}getAllRootElements(){return Array.from(this._applications.keys())}findTestabilityInTree(A,t=!0){return Nr.findTestabilityInTree(this,A,t)}}return A.\u0275fac=function(t){return new(t||A)},A.\u0275prov=rA({token:A,factory:A.\u0275fac}),A})();class br{addToWindow(A){}findTestabilityInTree(A,t,e){return null}}let jr,Nr=new br;const xr=new bA("AllowMultipleToken");function Kr(A,t,e=[]){const n="Platform: "+t,s=new bA(n);return(t=[])=>{let i=Jr();if(!i||i.injector.get(xr,!1))if(A)A(e.concat(t).concat({provide:s,useValue:!0}));else{const A=e.concat(t).concat({provide:s,useValue:!0},{provide:Js,useValue:"platform"});!function(A){if(jr&&!jr.destroyed&&!jr.injector.get(xr,!1))throw new Error("There can be only one platform. Destroy the previous one to create a new one.");jr=A.get(Rr);const t=A.get(ar,null);t&&t.forEach(A=>A())}($s.create({providers:A,name:n}))}return function(A){const t=Jr();if(!t)throw new Error("No platform exists!");if(!t.injector.get(A,null))throw new Error("A platform with a different configuration has been created. Please destroy it first.");return t}(s)}}function Jr(){return jr&&!jr.destroyed?jr:null}let Rr=(()=>{class A{constructor(A){this._injector=A,this._modules=[],this._destroyListeners=[],this._destroyed=!1}bootstrapModuleFactory(A,t){const e=function(A,t){let e;return e="noop"===A?new Sr:("zone.js"===A?void 0:A)||new Er({enableLongStackTrace:_e(),shouldCoalesceEventChangeDetection:t}),e}(t?t.ngZone:void 0,t&&t.ngZoneEventCoalescing||!1),n=[{provide:Er,useValue:e}];return e.run(()=>{const t=$s.create({providers:n,parent:this.injector,name:A.moduleType.name}),s=A.create(t),i=s.injector.get(ve,null);if(!i)throw new Error("No ErrorHandler. Is platform module (BrowserModule) included?");return s.onDestroy(()=>qr(this._modules,s)),e.runOutsideAngular(()=>e.onError.subscribe({next:A=>{i.handleError(A)}})),function(A,t,e){try{const n=e();return hi(n)?n.catch(e=>{throw t.runOutsideAngular(()=>A.handleError(e)),e}):n}catch(n){throw t.runOutsideAngular(()=>A.handleError(n)),n}}(i,e,()=>{const A=s.injector.get(sr);return A.runInitializers(),A.donePromise.then(()=>(jo(s.injector.get(ur,"en-US")||"en-US"),this._moduleDoBootstrap(s),s))})})}bootstrapModule(A,t=[]){const e=Wr({},t);return function(A,t,e){const n=new Ko(e);return Promise.resolve(n)}(0,0,A).then(A=>this.bootstrapModuleFactory(A,e))}_moduleDoBootstrap(A){const t=A.injector.get(Or);if(A._bootstrapComponents.length>0)A._bootstrapComponents.forEach(A=>t.bootstrap(A));else{if(!A.instance.ngDoBootstrap)throw new Error(`The module ${wA(A.instance.constructor)} was bootstrapped, but it does not declare "@NgModule.bootstrap" components nor a "ngDoBootstrap" method. Please define one of these.`);A.instance.ngDoBootstrap(t)}this._modules.push(A)}onDestroy(A){this._destroyListeners.push(A)}get injector(){return this._injector}destroy(){if(this._destroyed)throw new Error("The platform has already been destroyed!");this._modules.slice().forEach(A=>A.destroy()),this._destroyListeners.forEach(A=>A()),this._destroyed=!0}get destroyed(){return this._destroyed}}return A.\u0275fac=function(t){return new(t||A)(FA($s))},A.\u0275prov=rA({token:A,factory:A.\u0275fac}),A})();function Wr(A,t){return Array.isArray(t)?t.reduce(Wr,A):Object.assign(Object.assign({},A),t)}let Or=(()=>{class A{constructor(A,t,e,n,s,i){this._zone=A,this._console=t,this._injector=e,this._exceptionHandler=n,this._componentFactoryResolver=s,this._initStatus=i,this._bootstrapListeners=[],this._views=[],this._runningTick=!1,this._enforceNoNewChanges=!1,this._stable=!0,this.componentTypes=[],this.components=[],this._enforceNoNewChanges=_e(),this._zone.onMicrotaskEmpty.subscribe({next:()=>{this._zone.run(()=>{this.tick()})}});const o=new Y(A=>{this._stable=this._zone.isStable&&!this._zone.hasPendingMacrotasks&&!this._zone.hasPendingMicrotasks,this._zone.runOutsideAngular(()=>{A.next(this._stable),A.complete()})}),r=new Y(A=>{let t;this._zone.runOutsideAngular(()=>{t=this._zone.onStable.subscribe(()=>{Er.assertNotInAngularZone(),Cr(()=>{this._stable||this._zone.hasPendingMacrotasks||this._zone.hasPendingMicrotasks||(this._stable=!0,A.next(!0))})})});const e=this._zone.onUnstable.subscribe(()=>{Er.assertInAngularZone(),this._stable&&(this._stable=!1,this._zone.runOutsideAngular(()=>{A.next(!1)}))});return()=>{t.unsubscribe(),e.unsubscribe()}});this.isStable=F(o,r.pipe(A=>{return f()((t=X,function(A){let e;e="function"==typeof t?t:function(){return t};const n=Object.create(A,v);return n.source=A,n.subjectFactory=e,n})(A));var t}))}bootstrap(A,t){if(!this._initStatus.done)throw new Error("Cannot bootstrap as there are still asynchronous initializers running. Bootstrap components in the `ngDoBootstrap` method of the root module.");let e;e=A instanceof fi?A:this._componentFactoryResolver.resolveComponentFactory(A),this.componentTypes.push(e.componentType);const n=e.isBoundToModule?void 0:this._injector.get(vA),s=e.create($s.NULL,[],t||e.selector,n);s.onDestroy(()=>{this._unloadComponent(s)});const i=s.injector.get(zr,null);return i&&s.injector.get(Ur).registerApplication(s.location.nativeElement,i),this._loadComponent(s),_e()&&this._console.log("Angular is running in development mode. Call enableProdMode() to enable production mode."),s}tick(){if(this._runningTick)throw new Error("ApplicationRef.tick is called recursively");try{this._runningTick=!0;for(let A of this._views)A.detectChanges();if(this._enforceNoNewChanges)for(let A of this._views)A.checkNoChanges()}catch(A){this._zone.runOutsideAngular(()=>this._exceptionHandler.handleError(A))}finally{this._runningTick=!1}}attachView(A){const t=A;this._views.push(t),t.attachToAppRef(this)}detachView(A){const t=A;qr(this._views,t),t.detachFromAppRef()}_loadComponent(A){this.attachView(A.hostView),this.tick(),this.components.push(A),this._injector.get(Mr,[]).concat(this._bootstrapListeners).forEach(t=>t(A))}_unloadComponent(A){this.detachView(A.hostView),qr(this.components,A)}ngOnDestroy(){this._views.slice().forEach(A=>A.destroy())}get viewCount(){return this._views.length}}return A.\u0275fac=function(t){return new(t||A)(FA(Er),FA(lr),FA($s),FA(ve),FA(Li),FA(sr))},A.\u0275prov=rA({token:A,factory:A.\u0275fac}),A})();function qr(A,t){const e=A.indexOf(t);e>-1&&A.splice(e,1)}const Fr=Kr(null,"core",[{provide:cr,useValue:"unknown"},{provide:Rr,deps:[$s]},{provide:Ur,deps:[]},{provide:lr,deps:[]}]),fr=[{provide:Or,useClass:Or,deps:[Er,lr,$s,ve,Li,sr]},{provide:yo,deps:[Er],useFactory:function(A){let t=[];return A.onStable.subscribe(()=>{for(;t.length;)t.pop()()}),function(A){t.push(A)}}},{provide:sr,useClass:sr,deps:[[new tA,nr]]},{provide:Dr,useClass:Dr,deps:[]},or,{provide:ho,useFactory:function(){return po},deps:[]},{provide:go,useFactory:function(){return wo},deps:[]},{provide:ur,useFactory:function(A){return jo(A=A||"undefined"!=typeof $localize&&$localize.locale||"en-US"),A},deps:[[new AA(ur),new tA,new nA]]},{provide:hr,useValue:"USD"}];let Vr=(()=>{class A{constructor(A){}}return A.\u0275mod=ut({type:A}),A.\u0275inj=aA({factory:function(t){return new(t||A)(FA(Or))},providers:fr}),A})(),Lr=null;function Hr(){return Lr}const vr=new bA("DocumentToken");var Pr=function(A){return A[A.Zero=0]="Zero",A[A.One=1]="One",A[A.Two=2]="Two",A[A.Few=3]="Few",A[A.Many=4]="Many",A[A.Other=5]="Other",A}({});class Xr{}let _r=(()=>{class A extends Xr{constructor(A){super(),this.locale=A}getPluralCategory(A,t){switch(function(A){return function(A){const t=function(A){return A.toLowerCase().replace(/_/g,"-")}(A);let e=zo(t);if(e)return e;const n=t.split("-")[0];if(e=zo(n),e)return e;if("en"===n)return ko;throw new Error(`Missing locale data for the locale "${A}".`)}(A)[Uo.PluralCase]}(t||this.locale)(A)){case Pr.Zero:return"zero";case Pr.One:return"one";case Pr.Two:return"two";case Pr.Few:return"few";case Pr.Many:return"many";default:return"other"}}}return A.\u0275fac=function(t){return new(t||A)(FA(ur))},A.\u0275prov=rA({token:A,factory:A.\u0275fac}),A})(),$r=(()=>{class A{constructor(A,t,e){this._ngEl=A,this._differs=t,this._renderer=e,this._ngStyle=null,this._differ=null}set ngStyle(A){this._ngStyle=A,!this._differ&&A&&(this._differ=this._differs.find(A).create())}ngDoCheck(){if(this._differ){const A=this._differ.diff(this._ngStyle);A&&this._applyChanges(A)}}_setStyle(A,t){const[e,n]=A.split(".");null!=(t=null!=t&&n?`${t}${n}`:t)?this._renderer.setStyle(this._ngEl.nativeElement,e,t):this._renderer.removeStyle(this._ngEl.nativeElement,e)}_applyChanges(A){A.forEachRemovedItem(A=>this._setStyle(A.key,null)),A.forEachAddedItem(A=>this._setStyle(A.key,A.currentValue)),A.forEachChangedItem(A=>this._setStyle(A.key,A.currentValue))}}return A.\u0275fac=function(t){return new(t||A)(ri(Hi),ri(go),ri(_i))},A.\u0275dir=gt({type:A,selectors:[["","ngStyle",""]],inputs:{ngStyle:"ngStyle"}}),A})(),Aa=(()=>{class A{}return A.\u0275mod=ut({type:A}),A.\u0275inj=aA({factory:function(t){return new(t||A)},providers:[{provide:Xr,useClass:_r}]}),A})();class ta extends class extends class{}{constructor(){super()}supportsDOMEvents(){return!0}}{static makeCurrent(){var A;A=new ta,Lr||(Lr=A)}getProperty(A,t){return A[t]}log(A){window.console&&window.console.log&&window.console.log(A)}logGroup(A){window.console&&window.console.group&&window.console.group(A)}logGroupEnd(){window.console&&window.console.groupEnd&&window.console.groupEnd()}onAndCancel(A,t,e){return A.addEventListener(t,e,!1),()=>{A.removeEventListener(t,e,!1)}}dispatchEvent(A,t){A.dispatchEvent(t)}remove(A){return A.parentNode&&A.parentNode.removeChild(A),A}getValue(A){return A.value}createElement(A,t){return(t=t||this.getDefaultDocument()).createElement(A)}createHtmlDocument(){return document.implementation.createHTMLDocument("fakeTitle")}getDefaultDocument(){return document}isElementNode(A){return A.nodeType===Node.ELEMENT_NODE}isShadowRoot(A){return A instanceof DocumentFragment}getGlobalEventTarget(A,t){return"window"===t?window:"document"===t?A:"body"===t?A.body:null}getHistory(){return window.history}getLocation(){return window.location}getBaseHref(A){const t=na||(na=document.querySelector("base"),na)?na.getAttribute("href"):null;return null==t?null:(e=t,ea||(ea=document.createElement("a")),ea.setAttribute("href",e),"/"===ea.pathname.charAt(0)?ea.pathname:"/"+ea.pathname);var e}resetBaseElement(){na=null}getUserAgent(){return window.navigator.userAgent}performanceNow(){return window.performance&&window.performance.now?window.performance.now():(new Date).getTime()}supportsCookies(){return!0}getCookie(A){return function(A,t){t=encodeURIComponent(t);for(const e of A.split(";")){const A=e.indexOf("="),[n,s]=-1==A?[e,""]:[e.slice(0,A),e.slice(A+1)];if(n.trim()===t)return decodeURIComponent(s)}return null}(document.cookie,A)}}let ea,na=null;const sa=new bA("TRANSITION_ID"),ia=[{provide:nr,useFactory:function(A,t,e){return()=>{e.get(sr).donePromise.then(()=>{const e=Hr();Array.prototype.slice.apply(t.querySelectorAll("style[ng-transition]")).filter(t=>t.getAttribute("ng-transition")===A).forEach(A=>e.remove(A))})}},deps:[sa,vr,$s],multi:!0}];class oa{static init(){var A;A=new oa,Nr=A}addToWindow(A){yA.getAngularTestability=(t,e=!0)=>{const n=A.findTestabilityInTree(t,e);if(null==n)throw new Error("Could not find testability for element.");return n},yA.getAllAngularTestabilities=()=>A.getAllTestabilities(),yA.getAllAngularRootElements=()=>A.getAllRootElements(),yA.frameworkStabilizers||(yA.frameworkStabilizers=[]),yA.frameworkStabilizers.push(A=>{const t=yA.getAllAngularTestabilities();let e=t.length,n=!1;const s=function(t){n=n||t,e--,0==e&&A(n)};t.forEach((function(A){A.whenStable(s)}))})}findTestabilityInTree(A,t,e){if(null==t)return null;const n=A.getTestability(t);return null!=n?n:e?Hr().isShadowRoot(t)?this.findTestabilityInTree(A,t.host,!0):this.findTestabilityInTree(A,t.parentElement,!0):null}}const ra=new bA("EventManagerPlugins");let aa=(()=>{class A{constructor(A,t){this._zone=t,this._eventNameToPlugin=new Map,A.forEach(A=>A.manager=this),this._plugins=A.slice().reverse()}addEventListener(A,t,e){return this._findPluginFor(t).addEventListener(A,t,e)}addGlobalEventListener(A,t,e){return this._findPluginFor(t).addGlobalEventListener(A,t,e)}getZone(){return this._zone}_findPluginFor(A){const t=this._eventNameToPlugin.get(A);if(t)return t;const e=this._plugins;for(let n=0;n<e.length;n++){const t=e[n];if(t.supports(A))return this._eventNameToPlugin.set(A,t),t}throw new Error("No event manager plugin found for event "+A)}}return A.\u0275fac=function(t){return new(t||A)(FA(ra),FA(Er))},A.\u0275prov=rA({token:A,factory:A.\u0275fac}),A})();class ca{constructor(A){this._doc=A}addGlobalEventListener(A,t,e){const n=Hr().getGlobalEventTarget(this._doc,A);if(!n)throw new Error(`Unsupported event target ${n} for event ${t}`);return this.addEventListener(n,t,e)}}let Ma=(()=>{class A{constructor(){this._stylesSet=new Set}addStyles(A){const t=new Set;A.forEach(A=>{this._stylesSet.has(A)||(this._stylesSet.add(A),t.add(A))}),this.onStylesAdded(t)}onStylesAdded(A){}getAllStyles(){return Array.from(this._stylesSet)}}return A.\u0275fac=function(t){return new(t||A)},A.\u0275prov=rA({token:A,factory:A.\u0275fac}),A})(),la=(()=>{class A extends Ma{constructor(A){super(),this._doc=A,this._hostNodes=new Set,this._styleNodes=new Set,this._hostNodes.add(A.head)}_addStylesToHost(A,t){A.forEach(A=>{const e=this._doc.createElement("style");e.textContent=A,this._styleNodes.add(t.appendChild(e))})}addHost(A){this._addStylesToHost(this._stylesSet,A),this._hostNodes.add(A)}removeHost(A){this._hostNodes.delete(A)}onStylesAdded(A){this._hostNodes.forEach(t=>this._addStylesToHost(A,t))}ngOnDestroy(){this._styleNodes.forEach(A=>Hr().remove(A))}}return A.\u0275fac=function(t){return new(t||A)(FA(vr))},A.\u0275prov=rA({token:A,factory:A.\u0275fac}),A})();const ua={svg:"http://www.w3.org/2000/svg",xhtml:"http://www.w3.org/1999/xhtml",xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"},ha=/%COMP%/g;function ga(A,t,e){for(let n=0;n<t.length;n++){let s=t[n];Array.isArray(s)?ga(A,s,e):(s=s.replace(ha,A),e.push(s))}return e}function ma(A){return t=>{if("__ngUnwrap__"===t)return A;!1===A(t)&&(t.preventDefault(),t.returnValue=!1)}}let pa=(()=>{class A{constructor(A,t,e){this.eventManager=A,this.sharedStylesHost=t,this.appId=e,this.rendererByCompId=new Map,this.defaultRenderer=new wa(A)}createRenderer(A,t){if(!A||!t)return this.defaultRenderer;switch(t.encapsulation){case st.Emulated:{let e=this.rendererByCompId.get(t.id);return e||(e=new Ya(this.eventManager,this.sharedStylesHost,t,this.appId),this.rendererByCompId.set(t.id,e)),e.applyToHost(A),e}case st.Native:case st.ShadowDom:return new da(this.eventManager,this.sharedStylesHost,A,t);default:if(!this.rendererByCompId.has(t.id)){const A=ga(t.id,t.styles,[]);this.sharedStylesHost.addStyles(A),this.rendererByCompId.set(t.id,this.defaultRenderer)}return this.defaultRenderer}}begin(){}end(){}}return A.\u0275fac=function(t){return new(t||A)(FA(aa),FA(la),FA(ir))},A.\u0275prov=rA({token:A,factory:A.\u0275fac}),A})();class wa{constructor(A){this.eventManager=A,this.data=Object.create(null)}destroy(){}createElement(A,t){return t?document.createElementNS(ua[t]||t,A):document.createElement(A)}createComment(A){return document.createComment(A)}createText(A){return document.createTextNode(A)}appendChild(A,t){A.appendChild(t)}insertBefore(A,t,e){A&&A.insertBefore(t,e)}removeChild(A,t){A&&A.removeChild(t)}selectRootElement(A,t){let e="string"==typeof A?document.querySelector(A):A;if(!e)throw new Error(`The selector "${A}" did not match any elements`);return t||(e.textContent=""),e}parentNode(A){return A.parentNode}nextSibling(A){return A.nextSibling}setAttribute(A,t,e,n){if(n){t=n+":"+t;const s=ua[n];s?A.setAttributeNS(s,t,e):A.setAttribute(t,e)}else A.setAttribute(t,e)}removeAttribute(A,t,e){if(e){const n=ua[e];n?A.removeAttributeNS(n,t):A.removeAttribute(`${e}:${t}`)}else A.removeAttribute(t)}addClass(A,t){A.classList.add(t)}removeClass(A,t){A.classList.remove(t)}setStyle(A,t,e,n){n&Xi.DashCase?A.style.setProperty(t,e,n&Xi.Important?"important":""):A.style[t]=e}removeStyle(A,t,e){e&Xi.DashCase?A.style.removeProperty(t):A.style[t]=""}setProperty(A,t,e){A[t]=e}setValue(A,t){A.nodeValue=t}listen(A,t,e){return"string"==typeof A?this.eventManager.addGlobalEventListener(A,t,ma(e)):this.eventManager.addEventListener(A,t,ma(e))}}class Ya extends wa{constructor(A,t,e,n){super(A),this.component=e;const s=ga(n+"-"+e.id,e.styles,[]);t.addStyles(s),this.contentAttr="_ngcontent-%COMP%".replace(ha,n+"-"+e.id),this.hostAttr=function(A){return"_nghost-%COMP%".replace(ha,A)}(n+"-"+e.id)}applyToHost(A){super.setAttribute(A,this.hostAttr,"")}createElement(A,t){const e=super.createElement(A,t);return super.setAttribute(e,this.contentAttr,""),e}}class da extends wa{constructor(A,t,e,n){super(A),this.sharedStylesHost=t,this.hostEl=e,this.component=n,this.shadowRoot=n.encapsulation===st.ShadowDom?e.attachShadow({mode:"open"}):e.createShadowRoot(),this.sharedStylesHost.addHost(this.shadowRoot);const s=ga(n.id,n.styles,[]);for(let i=0;i<s.length;i++){const A=document.createElement("style");A.textContent=s[i],this.shadowRoot.appendChild(A)}}nodeOrShadowRoot(A){return A===this.hostEl?this.shadowRoot:A}destroy(){this.sharedStylesHost.removeHost(this.shadowRoot)}appendChild(A,t){return super.appendChild(this.nodeOrShadowRoot(A),t)}insertBefore(A,t,e){return super.insertBefore(this.nodeOrShadowRoot(A),t,e)}removeChild(A,t){return super.removeChild(this.nodeOrShadowRoot(A),t)}parentNode(A){return this.nodeOrShadowRoot(super.parentNode(this.nodeOrShadowRoot(A)))}}let Ba=(()=>{class A extends ca{constructor(A){super(A)}supports(A){return!0}addEventListener(A,t,e){return A.addEventListener(t,e,!1),()=>this.removeEventListener(A,t,e)}removeEventListener(A,t,e){return A.removeEventListener(t,e)}}return A.\u0275fac=function(t){return new(t||A)(FA(vr))},A.\u0275prov=rA({token:A,factory:A.\u0275fac}),A})();const Da=["alt","control","meta","shift"],Ga={"\b":"Backspace","\t":"Tab","\x7f":"Delete","\x1b":"Escape",Del:"Delete",Esc:"Escape",Left:"ArrowLeft",Right:"ArrowRight",Up:"ArrowUp",Down:"ArrowDown",Menu:"ContextMenu",Scroll:"ScrollLock",Win:"OS"},Ca={A:"1",B:"2",C:"3",D:"4",E:"5",F:"6",G:"7",H:"8",I:"9",J:"*",K:"+",M:"-",N:".",O:"/","`":"0","\x90":"NumLock"},Ea={alt:A=>A.altKey,control:A=>A.ctrlKey,meta:A=>A.metaKey,shift:A=>A.shiftKey};let Ia=(()=>{class A extends ca{constructor(A){super(A)}supports(t){return null!=A.parseEventName(t)}addEventListener(t,e,n){const s=A.parseEventName(e),i=A.eventCallback(s.fullKey,n,this.manager.getZone());return this.manager.getZone().runOutsideAngular(()=>Hr().onAndCancel(t,s.domEventName,i))}static parseEventName(t){const e=t.toLowerCase().split("."),n=e.shift();if(0===e.length||"keydown"!==n&&"keyup"!==n)return null;const s=A._normalizeKey(e.pop());let i="";if(Da.forEach(A=>{const t=e.indexOf(A);t>-1&&(e.splice(t,1),i+=A+".")}),i+=s,0!=e.length||0===s.length)return null;const o={};return o.domEventName=n,o.fullKey=i,o}static getEventFullKey(A){let t="",e=function(A){let t=A.key;if(null==t){if(t=A.keyIdentifier,null==t)return"Unidentified";t.startsWith("U+")&&(t=String.fromCharCode(parseInt(t.substring(2),16)),3===A.location&&Ca.hasOwnProperty(t)&&(t=Ca[t]))}return Ga[t]||t}(A);return e=e.toLowerCase()," "===e?e="space":"."===e&&(e="dot"),Da.forEach(n=>{n!=e&&(0,Ea[n])(A)&&(t+=n+".")}),t+=e,t}static eventCallback(t,e,n){return s=>{A.getEventFullKey(s)===t&&n.runGuarded(()=>e(s))}}static _normalizeKey(A){switch(A){case"esc":return"escape";default:return A}}}return A.\u0275fac=function(t){return new(t||A)(FA(vr))},A.\u0275prov=rA({token:A,factory:A.\u0275fac}),A})();const ya=Kr(Fr,"browser",[{provide:cr,useValue:"browser"},{provide:ar,useValue:function(){ta.makeCurrent(),oa.init()},multi:!0},{provide:vr,useFactory:function(){return function(A){It=A}(document),document},deps:[]}]),Qa=[[],{provide:Js,useValue:"root"},{provide:ve,useFactory:function(){return new ve},deps:[]},{provide:ra,useClass:Ba,multi:!0,deps:[vr,Er,cr]},{provide:ra,useClass:Ia,multi:!0,deps:[vr]},[],{provide:pa,useClass:pa,deps:[aa,la,ir]},{provide:Pi,useExisting:pa},{provide:Ma,useExisting:la},{provide:la,useClass:la,deps:[vr]},{provide:zr,useClass:zr,deps:[Er]},{provide:aa,useClass:aa,deps:[ra,Er]},[]];let Za=(()=>{class A{constructor(A){if(A)throw new Error("BrowserModule has already been loaded. If you need access to common directives such as NgIf and NgFor from a lazy loaded module, import CommonModule instead.")}static withServerTransition(t){return{ngModule:A,providers:[{provide:ir,useValue:t.appId},{provide:sa,useExisting:ir},ia]}}}return A.\u0275mod=ut({type:A}),A.\u0275inj=aA({factory:function(t){return new(t||A)(FA(A,12))},providers:Qa,imports:[Aa,Vr]}),A})();"undefined"!=typeof window&&window;class Ta{}let ka=(()=>{class A{constructor(){this.myPadSubject=new C}updateCursorPositionInPad(A){this.pad=A,this.emitCursorPositionInPad()}emitCursorPositionInPad(){this.myPadSubject.next(this.pad)}}return A.\u0275fac=function(t){return new(t||A)},A.\u0275prov=rA({token:A,factory:A.\u0275fac,providedIn:"root"}),A})();function Sa(A){return null!=A&&""+A!="false"}function za(A){return A instanceof Hi?A.nativeElement:A}function Ua(...A){let t=A[A.length-1];return I(t)?(A.pop(),K(A,t)):q(A)}function ba(A,t,e,s){return n(e)&&(s=e,e=void 0),s?ba(A,t,e).pipe(j(A=>a(A)?s(...A):s(A))):new Y(n=>{!function A(t,e,n,s,i){let o;if(function(A){return A&&"function"==typeof A.addEventListener&&"function"==typeof A.removeEventListener}(t)){const A=t;t.addEventListener(e,n,i),o=()=>A.removeEventListener(e,n,i)}else if(function(A){return A&&"function"==typeof A.on&&"function"==typeof A.off}(t)){const A=t;t.on(e,n),o=()=>A.off(e,n)}else if(function(A){return A&&"function"==typeof A.addListener&&"function"==typeof A.removeListener}(t)){const A=t;t.addListener(e,n),o=()=>A.removeListener(e,n)}else{if(!t||!t.length)throw new TypeError("Invalid event target");for(let o=0,r=t.length;o<r;o++)A(t[o],e,n,s,i)}s.add(o)}(A,t,(function(A){n.next(arguments.length>1?Array.prototype.slice.call(arguments):A)}),n,e)})}class ja extends l{constructor(A,t){super()}schedule(A,t=0){return this}}class Na extends ja{constructor(A,t){super(A,t),this.scheduler=A,this.work=t,this.pending=!1}schedule(A,t=0){if(this.closed)return this;this.state=A;const e=this.id,n=this.scheduler;return null!=e&&(this.id=this.recycleAsyncId(n,e,t)),this.pending=!0,this.delay=t,this.id=this.id||this.requestAsyncId(n,this.id,t),this}requestAsyncId(A,t,e=0){return setInterval(A.flush.bind(A,this),e)}recycleAsyncId(A,t,e=0){if(null!==e&&this.delay===e&&!1===this.pending)return t;clearInterval(t)}execute(A,t){if(this.closed)return new Error("executing a cancelled action");this.pending=!1;const e=this._execute(A,t);if(e)return e;!1===this.pending&&null!=this.id&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))}_execute(A,t){let e=!1,n=void 0;try{this.work(A)}catch(s){e=!0,n=!!s&&s||new Error(s)}if(e)return this.unsubscribe(),n}_unsubscribe(){const A=this.id,t=this.scheduler,e=t.actions,n=e.indexOf(this);this.work=null,this.state=null,this.pending=!1,this.scheduler=null,-1!==n&&e.splice(n,1),null!=A&&(this.id=this.recycleAsyncId(t,A,null)),this.delay=null}}class xa extends Na{constructor(A,t){super(A,t),this.scheduler=A,this.work=t}requestAsyncId(A,t,e=0){return null!==e&&e>0?super.requestAsyncId(A,t,e):(A.actions.push(this),A.scheduled||(A.scheduled=requestAnimationFrame(()=>A.flush(null))))}recycleAsyncId(A,t,e=0){if(null!==e&&e>0||null===e&&this.delay>0)return super.recycleAsyncId(A,t,e);0===A.actions.length&&(cancelAnimationFrame(t),A.scheduled=void 0)}}let Ka=(()=>{class A{constructor(t,e=A.now){this.SchedulerAction=t,this.now=e}schedule(A,t=0,e){return new this.SchedulerAction(this,A).schedule(e,t)}}return A.now=()=>Date.now(),A})();class Ja extends Ka{constructor(A,t=Ka.now){super(A,()=>Ja.delegate&&Ja.delegate!==this?Ja.delegate.now():t()),this.actions=[],this.active=!1,this.scheduled=void 0}schedule(A,t=0,e){return Ja.delegate&&Ja.delegate!==this?Ja.delegate.schedule(A,t,e):super.schedule(A,t,e)}flush(A){const{actions:t}=this;if(this.active)return void t.push(A);let e;this.active=!0;do{if(e=A.execute(A.state,A.delay))break}while(A=t.shift());if(this.active=!1,e){for(;A=t.shift();)A.unsubscribe();throw e}}}class Ra extends Ja{flush(A){this.active=!0,this.scheduled=void 0;const{actions:t}=this;let e,n=-1,s=t.length;A=A||t.shift();do{if(e=A.execute(A.state,A.delay))break}while(++n<s&&(A=t.shift()));if(this.active=!1,e){for(;++n<s&&(A=t.shift());)A.unsubscribe();throw e}}}const Wa=new Ra(xa),Oa=new Ja(Na);class qa{constructor(A){this.durationSelector=A}call(A,t){return t.subscribe(new Fa(A,this.durationSelector))}}class Fa extends b{constructor(A,t){super(A),this.durationSelector=t,this.hasValue=!1}_next(A){if(this.value=A,this.hasValue=!0,!this.throttled){let e;try{const{durationSelector:t}=this;e=t(A)}catch(t){return this.destination.error(t)}const n=U(this,e);!n||n.closed?this.clearThrottle():this.add(this.throttled=n)}}clearThrottle(){const{value:A,hasValue:t,throttled:e}=this;e&&(this.remove(e),this.throttled=null,e.unsubscribe()),t&&(this.value=null,this.hasValue=!1,this.destination.next(A))}notifyNext(A,t,e,n){this.clearThrottle()}notifyComplete(){this.clearThrottle()}}function fa(A){return!a(A)&&A-parseFloat(A)+1>=0}function Va(A){const{index:t,period:e,subscriber:n}=A;if(n.next(t),!n.closed){if(-1===e)return n.complete();A.index=t+1,this.schedule(A,e)}}function La(A){return t=>t.lift(new Ha(A))}class Ha{constructor(A){this.notifier=A}call(A,t){const e=new va(A),n=U(e,this.notifier);return n&&!e.seenValue?(e.add(n),t.subscribe(e)):e}}class va extends b{constructor(A){super(A),this.seenValue=!1}notifyNext(A,t,e,n,s){this.seenValue=!0,this.complete()}notifyComplete(){}}function Pa(...A){return O(1)(Ua(...A))}function Xa(...A){const t=A[A.length-1];return I(t)?(A.pop(),e=>Pa(A,e,t)):t=>Pa(A,t)}class _a{constructor(A){this.project=A}call(A,t){return t.subscribe(new $a(A,this.project))}}class $a extends b{constructor(A,t){super(A),this.project=t,this.index=0}_next(A){let t;const e=this.index++;try{t=this.project(A,e)}catch(n){return void this.destination.error(n)}this._innerSub(t,A,e)}_innerSub(A,t,e){const n=this.innerSubscription;n&&n.unsubscribe();const s=new y(this,t,e),i=this.destination;i.add(s),this.innerSubscription=U(this,A,void 0,void 0,s),this.innerSubscription!==s&&i.add(this.innerSubscription)}_complete(){const{innerSubscription:A}=this;A&&!A.closed||super._complete(),this.unsubscribe()}_unsubscribe(){this.innerSubscription=null}notifyComplete(A){this.destination.remove(A),this.innerSubscription=null,this.isStopped&&super._complete()}notifyNext(A,t,e,n,s){this.destination.next(t)}}const Ac=new Y(A=>A.complete());let tc;try{tc="undefined"!=typeof Intl&&Intl.v8BreakIterator}catch(Sh){tc=!1}let ec,nc,sc=(()=>{class A{constructor(A){this._platformId=A,this.isBrowser=this._platformId?"browser"===this._platformId:"object"==typeof document&&!!document,this.EDGE=this.isBrowser&&/(edge)/i.test(navigator.userAgent),this.TRIDENT=this.isBrowser&&/(msie|trident)/i.test(navigator.userAgent),this.BLINK=this.isBrowser&&!(!window.chrome&&!tc)&&"undefined"!=typeof CSS&&!this.EDGE&&!this.TRIDENT,this.WEBKIT=this.isBrowser&&/AppleWebKit/i.test(navigator.userAgent)&&!this.BLINK&&!this.EDGE&&!this.TRIDENT,this.IOS=this.isBrowser&&/iPad|iPhone|iPod/.test(navigator.userAgent)&&!("MSStream"in window),this.FIREFOX=this.isBrowser&&/(firefox|minefield)/i.test(navigator.userAgent),this.ANDROID=this.isBrowser&&/android/i.test(navigator.userAgent)&&!this.TRIDENT,this.SAFARI=this.isBrowser&&/safari/i.test(navigator.userAgent)&&this.WEBKIT}}return A.\u0275fac=function(t){return new(t||A)(FA(cr))},A.\u0275prov=rA({factory:function(){return new A(FA(cr))},token:A,providedIn:"root"}),A})(),ic=(()=>{class A{}return A.\u0275mod=ut({type:A}),A.\u0275inj=aA({factory:function(t){return new(t||A)}}),A})();function oc(A){return function(){if(null==ec&&"undefined"!=typeof window)try{window.addEventListener("test",null,Object.defineProperty({},"passive",{get:()=>ec=!0}))}finally{ec=ec||!1}return ec}()?A:!!A.capture}function rc(A){if(function(){if(null==nc){const A="undefined"!=typeof document?document.head:null;nc=!(!A||!A.createShadowRoot&&!A.attachShadow)}return nc}()){const t=A.getRootNode?A.getRootNode():null;if("undefined"!=typeof ShadowRoot&&ShadowRoot&&t instanceof ShadowRoot)return t}return null}const ac=new bA("cdk-dir-doc",{providedIn:"root",factory:function(){return fA(vr)}});let cc=(()=>{class A{constructor(A){if(this.value="ltr",this.change=new Jo,A){const t=A.documentElement?A.documentElement.dir:null,e=(A.body?A.body.dir:null)||t;this.value="ltr"===e||"rtl"===e?e:"ltr"}}ngOnDestroy(){this.change.complete()}}return A.\u0275fac=function(t){return new(t||A)(FA(ac,8))},A.\u0275prov=rA({factory:function(){return new A(FA(ac,8))},token:A,providedIn:"root"}),A})(),Mc=(()=>{class A{}return A.\u0275mod=ut({type:A}),A.\u0275inj=aA({factory:function(t){return new(t||A)}}),A})();class lc{constructor(A=!1,t,e=!0){this._multiple=A,this._emitChanges=e,this._selection=new Set,this._deselectedToEmit=[],this._selectedToEmit=[],this.changed=new C,t&&t.length&&(A?t.forEach(A=>this._markSelected(A)):this._markSelected(t[0]),this._selectedToEmit.length=0)}get selected(){return this._selected||(this._selected=Array.from(this._selection.values())),this._selected}select(...A){this._verifyValueAssignment(A),A.forEach(A=>this._markSelected(A)),this._emitChangeEvent()}deselect(...A){this._verifyValueAssignment(A),A.forEach(A=>this._unmarkSelected(A)),this._emitChangeEvent()}toggle(A){this.isSelected(A)?this.deselect(A):this.select(A)}clear(){this._unmarkAll(),this._emitChangeEvent()}isSelected(A){return this._selection.has(A)}isEmpty(){return 0===this._selection.size}hasValue(){return!this.isEmpty()}sort(A){this._multiple&&this.selected&&this._selected.sort(A)}isMultipleSelection(){return this._multiple}_emitChangeEvent(){this._selected=null,(this._selectedToEmit.length||this._deselectedToEmit.length)&&(this.changed.next({source:this,added:this._selectedToEmit,removed:this._deselectedToEmit}),this._deselectedToEmit=[],this._selectedToEmit=[])}_markSelected(A){this.isSelected(A)||(this._multiple||this._unmarkAll(),this._selection.add(A),this._emitChanges&&this._selectedToEmit.push(A))}_unmarkSelected(A){this.isSelected(A)&&(this._selection.delete(A),this._emitChanges&&this._deselectedToEmit.push(A))}_unmarkAll(){this.isEmpty()||this._selection.forEach(A=>this._unmarkSelected(A))}_verifyValueAssignment(A){if(A.length>1&&!this._multiple)throw Error("Cannot pass multiple values into SelectionModel with single-value mode.")}}let uc=(()=>{class A{constructor(A,t,e){this._platform=A,this._document=e,t.runOutsideAngular(()=>{const t=this._getWindow();this._change=A.isBrowser?F(ba(t,"resize"),ba(t,"orientationchange")):Ua(),this._invalidateCache=this.change().subscribe(()=>this._updateViewportSize())})}ngOnDestroy(){this._invalidateCache.unsubscribe()}getViewportSize(){this._viewportSize||this._updateViewportSize();const A={width:this._viewportSize.width,height:this._viewportSize.height};return this._platform.isBrowser||(this._viewportSize=null),A}getViewportRect(){const A=this.getViewportScrollPosition(),{width:t,height:e}=this.getViewportSize();return{top:A.top,left:A.left,bottom:A.top+e,right:A.left+t,height:e,width:t}}getViewportScrollPosition(){if(!this._platform.isBrowser)return{top:0,left:0};const A=this._getDocument(),t=this._getWindow(),e=A.documentElement,n=e.getBoundingClientRect();return{top:-n.top||A.body.scrollTop||t.scrollY||e.scrollTop||0,left:-n.left||A.body.scrollLeft||t.scrollX||e.scrollLeft||0}}change(A=20){return A>0?this._change.pipe(function(A,t=Oa){return e=()=>function(A=0,t,e){let n=-1;return fa(t)?n=Number(t)<1?1:Number(t):I(t)&&(e=t),I(e)||(e=Oa),new Y(t=>{const s=fa(A)?A:+A-e.now();return e.schedule(Va,s,{index:0,period:n,subscriber:t})})}(A,t),function(A){return A.lift(new qa(e))};var e}(A)):this._change}_getDocument(){return this._document||document}_getWindow(){return this._getDocument().defaultView||window}_updateViewportSize(){const A=this._getWindow();this._viewportSize=this._platform.isBrowser?{width:A.innerWidth,height:A.innerHeight}:{width:0,height:0}}}return A.\u0275fac=function(t){return new(t||A)(FA(sc),FA(Er),FA(vr,8))},A.\u0275prov=rA({factory:function(){return new A(FA(sc),FA(Er),FA(vr,8))},token:A,providedIn:"root"}),A})(),hc=(()=>{class A{}return A.\u0275mod=ut({type:A}),A.\u0275inj=aA({factory:function(t){return new(t||A)}}),A})();function gc(A){const{subscriber:t,counter:e,period:n}=A;t.next(e),this.schedule({subscriber:t,counter:e+1,period:n},n)}const mc=(()=>{function A(){return Error.call(this),this.message="argument out of range",this.name="ArgumentOutOfRangeError",this}return A.prototype=Object.create(Error.prototype),A})();class pc{constructor(A){if(this.total=A,this.total<0)throw new mc}call(A,t){return t.subscribe(new wc(A,this.total))}}class wc extends g{constructor(A,t){super(A),this.total=t,this.count=0}_next(A){const t=this.total,e=++this.count;e<=t&&(this.destination.next(A),e===t&&(this.destination.complete(),this.unsubscribe()))}}function Yc(){}class dc{constructor(A,t,e){this.nextOrObserver=A,this.error=t,this.complete=e}call(A,t){return t.subscribe(new Bc(A,this.nextOrObserver,this.error,this.complete))}}class Bc extends g{constructor(A,t,e,s){super(A),this._tapNext=Yc,this._tapError=Yc,this._tapComplete=Yc,this._tapError=e||Yc,this._tapComplete=s||Yc,n(t)?(this._context=this,this._tapNext=t):t&&(this._context=t,this._tapNext=t.next||Yc,this._tapError=t.error||Yc,this._tapComplete=t.complete||Yc)}_next(A){try{this._tapNext.call(this._context,A)}catch(t){return void this.destination.error(t)}this.destination.next(A)}_error(A){try{this._tapError.call(this._context,A)}catch(A){return void this.destination.error(A)}this.destination.error(A)}_complete(){try{this._tapComplete.call(this._context)}catch(A){return void this.destination.error(A)}return this.destination.complete()}}function Dc(A,t){for(let e in t)t.hasOwnProperty(e)&&(A[e]=t[e]);return A}function Gc(A,t){const e=t?"":"none";Dc(A.style,{touchAction:t?"":"none",webkitUserDrag:t?"":"none",webkitTapHighlightColor:t?"":"transparent",userSelect:e,msUserSelect:e,webkitUserSelect:e,MozUserSelect:e})}function Cc(A){const t=A.toLowerCase().indexOf("ms")>-1?1:1e3;return parseFloat(A)*t}function Ec(A,t){return A.getPropertyValue(t).split(",").map(A=>A.trim())}function Ic(A){const t=A.getBoundingClientRect();return{top:t.top,right:t.right,bottom:t.bottom,left:t.left,width:t.width,height:t.height}}function yc(A,t,e){const{top:n,bottom:s,left:i,right:o}=A;return e>=n&&e<=s&&t>=i&&t<=o}function Qc(A,t,e){A.top+=t,A.bottom=A.top+A.height,A.left+=e,A.right=A.left+A.width}function Zc(A,t,e,n){const{top:s,right:i,bottom:o,left:r,width:a,height:c}=A,M=a*t,l=c*t;return n>s-l&&n<o+l&&e>r-M&&e<i+M}class Tc{constructor(A,t){this._document=A,this._viewportRuler=t,this.positions=new Map}clear(){this.positions.clear()}cache(A){this.clear(),this.positions.set(this._document,{scrollPosition:this._viewportRuler.getViewportScrollPosition()}),A.forEach(A=>{this.positions.set(A,{scrollPosition:{top:A.scrollTop,left:A.scrollLeft},clientRect:Ic(A)})})}handleScroll(A){const t=A.target,e=this.positions.get(t);if(!e)return null;const n=t===this._document?t.documentElement:t,s=e.scrollPosition;let i,o;if(t===this._document){const A=this._viewportRuler.getViewportScrollPosition();i=A.top,o=A.left}else i=t.scrollTop,o=t.scrollLeft;const r=s.top-i,a=s.left-o;return this.positions.forEach((A,e)=>{A.clientRect&&t!==e&&n.contains(e)&&Qc(A.clientRect,r,a)}),s.top=i,s.left=o,{top:r,left:a}}}const kc=oc({passive:!0}),Sc=oc({passive:!1});class zc{constructor(A,t,e,n,s,i){this._config=t,this._document=e,this._ngZone=n,this._viewportRuler=s,this._dragDropRegistry=i,this._passiveTransform={x:0,y:0},this._activeTransform={x:0,y:0},this._moveEvents=new C,this._pointerMoveSubscription=l.EMPTY,this._pointerUpSubscription=l.EMPTY,this._scrollSubscription=l.EMPTY,this._resizeSubscription=l.EMPTY,this._boundaryElement=null,this._nativeInteractionsEnabled=!0,this._handles=[],this._disabledHandles=new Set,this._direction="ltr",this.dragStartDelay=0,this._disabled=!1,this.beforeStarted=new C,this.started=new C,this.released=new C,this.ended=new C,this.entered=new C,this.exited=new C,this.dropped=new C,this.moved=this._moveEvents.asObservable(),this._pointerDown=A=>{if(this.beforeStarted.next(),this._handles.length){const t=this._handles.find(t=>{const e=A.target;return!!e&&(e===t||t.contains(e))});!t||this._disabledHandles.has(t)||this.disabled||this._initializeDragSequence(t,A)}else this.disabled||this._initializeDragSequence(this._rootElement,A)},this._pointerMove=A=>{A.preventDefault();const t=this._getPointerPositionOnPage(A);if(!this._hasStartedDragging){if(Math.abs(t.x-this._pickupPositionOnPage.x)+Math.abs(t.y-this._pickupPositionOnPage.y)>=this._config.dragStartThreshold){if(!(Date.now()>=this._dragStartTime+this._getDragStartDelay(A)))return void this._endDragSequence(A);this._dropContainer&&this._dropContainer.isDragging()||(this._hasStartedDragging=!0,this._ngZone.run(()=>this._startDragSequence(A)))}return}this._boundaryElement&&(this._previewRect&&(this._previewRect.width||this._previewRect.height)||(this._previewRect=(this._preview||this._rootElement).getBoundingClientRect()));const e=this._getConstrainedPointerPosition(t);if(this._hasMoved=!0,this._updatePointerDirectionDelta(e),this._dropContainer)this._updateActiveDropContainer(e);else{const A=this._activeTransform;A.x=e.x-this._pickupPositionOnPage.x+this._passiveTransform.x,A.y=e.y-this._pickupPositionOnPage.y+this._passiveTransform.y,this._applyRootElementTransform(A.x,A.y),"undefined"!=typeof SVGElement&&this._rootElement instanceof SVGElement&&this._rootElement.setAttribute("transform",`translate(${A.x} ${A.y})`)}this._moveEvents.observers.length&&this._ngZone.run(()=>{this._moveEvents.next({source:this,pointerPosition:e,event:A,distance:this._getDragDistance(e),delta:this._pointerDirectionDelta})})},this._pointerUp=A=>{this._endDragSequence(A)},this.withRootElement(A),this._parentPositions=new Tc(e,s),i.registerDragItem(this)}get disabled(){return this._disabled||!(!this._dropContainer||!this._dropContainer.disabled)}set disabled(A){const t=Sa(A);t!==this._disabled&&(this._disabled=t,this._toggleNativeDragInteractions())}getPlaceholderElement(){return this._placeholder}getRootElement(){return this._rootElement}getVisibleElement(){return this.isDragging()?this.getPlaceholderElement():this.getRootElement()}withHandles(A){return this._handles=A.map(A=>za(A)),this._handles.forEach(A=>Gc(A,!1)),this._toggleNativeDragInteractions(),this}withPreviewTemplate(A){return this._previewTemplate=A,this}withPlaceholderTemplate(A){return this._placeholderTemplate=A,this}withRootElement(A){const t=za(A);return t!==this._rootElement&&(this._rootElement&&this._removeRootElementListeners(this._rootElement),this._ngZone.runOutsideAngular(()=>{t.addEventListener("mousedown",this._pointerDown,Sc),t.addEventListener("touchstart",this._pointerDown,kc)}),this._initialTransform=void 0,this._rootElement=t),this}withBoundaryElement(A){return this._boundaryElement=A?za(A):null,this._resizeSubscription.unsubscribe(),A&&(this._resizeSubscription=this._viewportRuler.change(10).subscribe(()=>this._containInsideBoundaryOnResize())),this}dispose(){this._removeRootElementListeners(this._rootElement),this.isDragging()&&Nc(this._rootElement),Nc(this._anchor),this._destroyPreview(),this._destroyPlaceholder(),this._dragDropRegistry.removeDragItem(this),this._removeSubscriptions(),this.beforeStarted.complete(),this.started.complete(),this.released.complete(),this.ended.complete(),this.entered.complete(),this.exited.complete(),this.dropped.complete(),this._moveEvents.complete(),this._handles=[],this._disabledHandles.clear(),this._dropContainer=void 0,this._resizeSubscription.unsubscribe(),this._parentPositions.clear(),this._boundaryElement=this._rootElement=this._placeholderTemplate=this._previewTemplate=this._anchor=null}isDragging(){return this._hasStartedDragging&&this._dragDropRegistry.isDragging(this)}reset(){this._rootElement.style.transform=this._initialTransform||"",this._activeTransform={x:0,y:0},this._passiveTransform={x:0,y:0}}disableHandle(A){this._handles.indexOf(A)>-1&&this._disabledHandles.add(A)}enableHandle(A){this._disabledHandles.delete(A)}withDirection(A){return this._direction=A,this}_withDropContainer(A){this._dropContainer=A}getFreeDragPosition(){const A=this.isDragging()?this._activeTransform:this._passiveTransform;return{x:A.x,y:A.y}}setFreeDragPosition(A){return this._activeTransform={x:0,y:0},this._passiveTransform.x=A.x,this._passiveTransform.y=A.y,this._dropContainer||this._applyRootElementTransform(A.x,A.y),this}_sortFromLastPointerPosition(){const A=this._pointerPositionAtLastDirectionChange;A&&this._dropContainer&&this._updateActiveDropContainer(this._getConstrainedPointerPosition(A))}_removeSubscriptions(){this._pointerMoveSubscription.unsubscribe(),this._pointerUpSubscription.unsubscribe(),this._scrollSubscription.unsubscribe()}_destroyPreview(){this._preview&&Nc(this._preview),this._previewRef&&this._previewRef.destroy(),this._preview=this._previewRef=null}_destroyPlaceholder(){this._placeholder&&Nc(this._placeholder),this._placeholderRef&&this._placeholderRef.destroy(),this._placeholder=this._placeholderRef=null}_endDragSequence(A){this._dragDropRegistry.isDragging(this)&&(this._removeSubscriptions(),this._dragDropRegistry.stopDragging(this),this._toggleNativeDragInteractions(),this._handles&&(this._rootElement.style.webkitTapHighlightColor=this._rootElementTapHighlight),this._hasStartedDragging&&(this.released.next({source:this}),this._dropContainer?(this._dropContainer._stopScrolling(),this._animatePreviewToPlaceholder().then(()=>{this._cleanupDragArtifacts(A),this._cleanupCachedDimensions(),this._dragDropRegistry.stopDragging(this)})):(this._passiveTransform.x=this._activeTransform.x,this._passiveTransform.y=this._activeTransform.y,this._ngZone.run(()=>{this.ended.next({source:this,distance:this._getDragDistance(this._getPointerPositionOnPage(A))})}),this._cleanupCachedDimensions(),this._dragDropRegistry.stopDragging(this))))}_startDragSequence(A){xc(A)&&(this._lastTouchEventTime=Date.now()),this._toggleNativeDragInteractions();const t=this._dropContainer;if(t){const A=this._rootElement,n=A.parentNode,s=this._preview=this._createPreviewElement(),i=this._placeholder=this._createPlaceholderElement(),o=this._anchor=this._anchor||this._document.createComment("");n.insertBefore(o,A),A.style.display="none",this._document.body.appendChild(n.replaceChild(i,A)),(e=this._document,e.fullscreenElement||e.webkitFullscreenElement||e.mozFullScreenElement||e.msFullscreenElement||e.body).appendChild(s),this.started.next({source:this}),t.start(),this._initialContainer=t,this._initialIndex=t.getItemIndex(this)}else this.started.next({source:this}),this._initialContainer=this._initialIndex=void 0;var e;this._parentPositions.cache(t?t.getScrollableParents():[])}_initializeDragSequence(A,t){t.stopPropagation();const e=this.isDragging(),n=xc(t),s=!n&&0!==t.button,i=this._rootElement,o=!n&&this._lastTouchEventTime&&this._lastTouchEventTime+800>Date.now();if(t.target&&t.target.draggable&&"mousedown"===t.type&&t.preventDefault(),e||s||o)return;this._handles.length&&(this._rootElementTapHighlight=i.style.webkitTapHighlightColor||"",i.style.webkitTapHighlightColor="transparent"),this._hasStartedDragging=this._hasMoved=!1,this._removeSubscriptions(),this._pointerMoveSubscription=this._dragDropRegistry.pointerMove.subscribe(this._pointerMove),this._pointerUpSubscription=this._dragDropRegistry.pointerUp.subscribe(this._pointerUp),this._scrollSubscription=this._dragDropRegistry.scroll.subscribe(A=>{this._updateOnScroll(A)}),this._boundaryElement&&(this._boundaryRect=Ic(this._boundaryElement));const r=this._previewTemplate;this._pickupPositionInElement=r&&r.template&&!r.matchSize?{x:0,y:0}:this._getPointerPositionInElement(A,t);const a=this._pickupPositionOnPage=this._getPointerPositionOnPage(t);this._pointerDirectionDelta={x:0,y:0},this._pointerPositionAtLastDirectionChange={x:a.x,y:a.y},this._dragStartTime=Date.now(),this._dragDropRegistry.startDragging(this,t)}_cleanupDragArtifacts(A){this._rootElement.style.display="",this._anchor.parentNode.replaceChild(this._rootElement,this._anchor),this._destroyPreview(),this._destroyPlaceholder(),this._boundaryRect=this._previewRect=void 0,this._ngZone.run(()=>{const t=this._dropContainer,e=t.getItemIndex(this),n=this._getPointerPositionOnPage(A),s=this._getDragDistance(this._getPointerPositionOnPage(A)),i=t._isOverContainer(n.x,n.y);this.ended.next({source:this,distance:s}),this.dropped.next({item:this,currentIndex:e,previousIndex:this._initialIndex,container:t,previousContainer:this._initialContainer,isPointerOverContainer:i,distance:s}),t.drop(this,e,this._initialContainer,i,s,this._initialIndex),this._dropContainer=this._initialContainer})}_updateActiveDropContainer({x:A,y:t}){let e=this._initialContainer._getSiblingContainerFromPosition(this,A,t);!e&&this._dropContainer!==this._initialContainer&&this._initialContainer._isOverContainer(A,t)&&(e=this._initialContainer),e&&e!==this._dropContainer&&this._ngZone.run(()=>{this.exited.next({item:this,container:this._dropContainer}),this._dropContainer.exit(this),this._dropContainer=e,this._dropContainer.enter(this,A,t,e===this._initialContainer&&e.sortingDisabled?this._initialIndex:void 0),this.entered.next({item:this,container:e,currentIndex:e.getItemIndex(this)})}),this._dropContainer._startScrollingIfNecessary(A,t),this._dropContainer._sortItem(this,A,t,this._pointerDirectionDelta),this._preview.style.transform=Uc(A-this._pickupPositionInElement.x,t-this._pickupPositionInElement.y)}_createPreviewElement(){const A=this._previewTemplate,t=this.previewClass,e=A?A.template:null;let n;if(e&&A){const t=A.matchSize?this._rootElement.getBoundingClientRect():null,s=A.viewContainer.createEmbeddedView(e,A.context);s.detectChanges(),n=Kc(s,this._document),this._previewRef=s,A.matchSize?Jc(n,t):n.style.transform=Uc(this._pickupPositionOnPage.x,this._pickupPositionOnPage.y)}else{const A=this._rootElement;n=bc(A),Jc(n,A.getBoundingClientRect())}return Dc(n.style,{pointerEvents:"none",margin:"0",position:"fixed",top:"0",left:"0",zIndex:""+(this._config.zIndex||1e3)}),Gc(n,!1),n.classList.add("cdk-drag-preview"),n.setAttribute("dir",this._direction),t&&(Array.isArray(t)?t.forEach(A=>n.classList.add(A)):n.classList.add(t)),n}_animatePreviewToPlaceholder(){if(!this._hasMoved)return Promise.resolve();const A=this._placeholder.getBoundingClientRect();this._preview.classList.add("cdk-drag-animating"),this._preview.style.transform=Uc(A.left,A.top);const t=function(A){const t=getComputedStyle(A),e=Ec(t,"transition-property"),n=e.find(A=>"transform"===A||"all"===A);if(!n)return 0;const s=e.indexOf(n),i=Ec(t,"transition-duration"),o=Ec(t,"transition-delay");return Cc(i[s])+Cc(o[s])}(this._preview);return 0===t?Promise.resolve():this._ngZone.runOutsideAngular(()=>new Promise(A=>{const e=t=>{(!t||t.target===this._preview&&"transform"===t.propertyName)&&(this._preview.removeEventListener("transitionend",e),A(),clearTimeout(n))},n=setTimeout(e,1.5*t);this._preview.addEventListener("transitionend",e)}))}_createPlaceholderElement(){const A=this._placeholderTemplate,t=A?A.template:null;let e;return t?(this._placeholderRef=A.viewContainer.createEmbeddedView(t,A.context),this._placeholderRef.detectChanges(),e=Kc(this._placeholderRef,this._document)):e=bc(this._rootElement),e.classList.add("cdk-drag-placeholder"),e}_getPointerPositionInElement(A,t){const e=this._rootElement.getBoundingClientRect(),n=A===this._rootElement?null:A,s=n?n.getBoundingClientRect():e,i=xc(t)?t.targetTouches[0]:t,o=this._getViewportScrollPosition();return{x:s.left-e.left+(i.pageX-s.left-o.left),y:s.top-e.top+(i.pageY-s.top-o.top)}}_getPointerPositionOnPage(A){const t=this._getViewportScrollPosition(),e=xc(A)?A.touches[0]||A.changedTouches[0]||{pageX:0,pageY:0}:A;return{x:e.pageX-t.left,y:e.pageY-t.top}}_getConstrainedPointerPosition(A){const t=this.constrainPosition?this.constrainPosition(A,this):A,e=this._dropContainer?this._dropContainer.lockAxis:null;if("x"===this.lockAxis||"x"===e?t.y=this._pickupPositionOnPage.y:"y"!==this.lockAxis&&"y"!==e||(t.x=this._pickupPositionOnPage.x),this._boundaryRect){const{x:A,y:e}=this._pickupPositionInElement,n=this._boundaryRect,s=this._previewRect,i=n.top+e,o=n.bottom-(s.height-e);t.x=jc(t.x,n.left+A,n.right-(s.width-A)),t.y=jc(t.y,i,o)}return t}_updatePointerDirectionDelta(A){const{x:t,y:e}=A,n=this._pointerDirectionDelta,s=this._pointerPositionAtLastDirectionChange,i=Math.abs(t-s.x),o=Math.abs(e-s.y);return i>this._config.pointerDirectionChangeThreshold&&(n.x=t>s.x?1:-1,s.x=t),o>this._config.pointerDirectionChangeThreshold&&(n.y=e>s.y?1:-1,s.y=e),n}_toggleNativeDragInteractions(){if(!this._rootElement||!this._handles)return;const A=this._handles.length>0||!this.isDragging();A!==this._nativeInteractionsEnabled&&(this._nativeInteractionsEnabled=A,Gc(this._rootElement,A))}_removeRootElementListeners(A){A.removeEventListener("mousedown",this._pointerDown,Sc),A.removeEventListener("touchstart",this._pointerDown,kc)}_applyRootElementTransform(A,t){const e=Uc(A,t);null==this._initialTransform&&(this._initialTransform=this._rootElement.style.transform||""),this._rootElement.style.transform=this._initialTransform?e+" "+this._initialTransform:e}_getDragDistance(A){const t=this._pickupPositionOnPage;return t?{x:A.x-t.x,y:A.y-t.y}:{x:0,y:0}}_cleanupCachedDimensions(){this._boundaryRect=this._previewRect=void 0,this._parentPositions.clear()}_containInsideBoundaryOnResize(){let{x:A,y:t}=this._passiveTransform;if(0===A&&0===t||this.isDragging()||!this._boundaryElement)return;const e=this._boundaryElement.getBoundingClientRect(),n=this._rootElement.getBoundingClientRect();if(0===e.width&&0===e.height||0===n.width&&0===n.height)return;const s=e.left-n.left,i=n.right-e.right,o=e.top-n.top,r=n.bottom-e.bottom;e.width>n.width?(s>0&&(A+=s),i>0&&(A-=i)):A=0,e.height>n.height?(o>0&&(t+=o),r>0&&(t-=r)):t=0,A===this._passiveTransform.x&&t===this._passiveTransform.y||this.setFreeDragPosition({y:t,x:A})}_getDragStartDelay(A){const t=this.dragStartDelay;return"number"==typeof t?t:xc(A)?t.touch:t?t.mouse:0}_updateOnScroll(A){const t=this._parentPositions.handleScroll(A);t&&(this._boundaryRect&&Qc(this._boundaryRect,t.top,t.left),this._pickupPositionOnPage.x+=t.left,this._pickupPositionOnPage.y+=t.top,this._dropContainer||(this._activeTransform.x-=t.left,this._activeTransform.y-=t.top,this._applyRootElementTransform(this._activeTransform.x,this._activeTransform.y)))}_getViewportScrollPosition(){const A=this._parentPositions.positions.get(this._document);return A?A.scrollPosition:this._viewportRuler.getViewportScrollPosition()}}function Uc(A,t){return`translate3d(${Math.round(A)}px, ${Math.round(t)}px, 0)`}function bc(A){const t=A.cloneNode(!0),e=t.querySelectorAll("[id]"),n=A.querySelectorAll("canvas");t.removeAttribute("id");for(let s=0;s<e.length;s++)e[s].removeAttribute("id");if(n.length){const A=t.querySelectorAll("canvas");for(let t=0;t<n.length;t++){const e=A[t].getContext("2d");if(e)try{e.drawImage(n[t],0,0)}catch(Sh){}}}return t}function jc(A,t,e){return Math.max(t,Math.min(e,A))}function Nc(A){A&&A.parentNode&&A.parentNode.removeChild(A)}function xc(A){return"t"===A.type[0]}function Kc(A,t){const e=A.rootNodes;if(1===e.length&&e[0].nodeType===t.ELEMENT_NODE)return e[0];const n=t.createElement("div");return e.forEach(A=>n.appendChild(A)),n}function Jc(A,t){A.style.width=t.width+"px",A.style.height=t.height+"px",A.style.transform=Uc(t.left,t.top)}function Rc(A,t){return Math.max(0,Math.min(t,A))}class Wc{constructor(A,t,e,n,s){this._dragDropRegistry=t,this._ngZone=n,this._viewportRuler=s,this.disabled=!1,this.sortingDisabled=!1,this.autoScrollDisabled=!1,this.enterPredicate=()=>!0,this.beforeStarted=new C,this.entered=new C,this.exited=new C,this.dropped=new C,this.sorted=new C,this._isDragging=!1,this._itemPositions=[],this._previousSwap={drag:null,delta:0,overlaps:!1},this._siblings=[],this._orientation="vertical",this._activeSiblings=new Set,this._direction="ltr",this._viewportScrollSubscription=l.EMPTY,this._verticalScrollDirection=0,this._horizontalScrollDirection=0,this._stopScrollTimers=new C,this._cachedShadowRoot=null,this._startScrollInterval=()=>{this._stopScrolling(),function(A=0,t=Oa){return(!fa(A)||A<0)&&(A=0),t&&"function"==typeof t.schedule||(t=Oa),new Y(e=>(e.add(t.schedule(gc,A,{subscriber:e,counter:0,period:A})),e))}(0,Wa).pipe(La(this._stopScrollTimers)).subscribe(()=>{const A=this._scrollNode;1===this._verticalScrollDirection?qc(A,-2):2===this._verticalScrollDirection&&qc(A,2),1===this._horizontalScrollDirection?Fc(A,-2):2===this._horizontalScrollDirection&&Fc(A,2)})},this.element=za(A),this._document=e,this.withScrollableParents([this.element]),t.registerDropContainer(this),this._parentPositions=new Tc(e,s)}dispose(){this._stopScrolling(),this._stopScrollTimers.complete(),this._viewportScrollSubscription.unsubscribe(),this.beforeStarted.complete(),this.entered.complete(),this.exited.complete(),this.dropped.complete(),this.sorted.complete(),this._activeSiblings.clear(),this._scrollNode=null,this._parentPositions.clear(),this._dragDropRegistry.removeDropContainer(this)}isDragging(){return this._isDragging}start(){const A=za(this.element).style;this.beforeStarted.next(),this._isDragging=!0,this._initialScrollSnap=A.msScrollSnapType||A.scrollSnapType||"",A.scrollSnapType=A.msScrollSnapType="none",this._cacheItems(),this._siblings.forEach(A=>A._startReceiving(this)),this._viewportScrollSubscription.unsubscribe(),this._listenToScrollEvents()}enter(A,t,e,n){let s;this.start(),null==n?(s=this.sortingDisabled?this._draggables.indexOf(A):-1,-1===s&&(s=this._getItemIndexFromPointerPosition(A,t,e))):s=n;const i=this._activeDraggables,o=i.indexOf(A),r=A.getPlaceholderElement();let a=i[s];if(a===A&&(a=i[s+1]),o>-1&&i.splice(o,1),a&&!this._dragDropRegistry.isDragging(a)){const t=a.getRootElement();t.parentElement.insertBefore(r,t),i.splice(s,0,A)}else if(this._shouldEnterAsFirstChild(t,e)){const t=i[0].getRootElement();t.parentNode.insertBefore(r,t),i.unshift(A)}else za(this.element).appendChild(r),i.push(A);r.style.transform="",this._cacheItemPositions(),this._cacheParentPositions(),this.entered.next({item:A,container:this,currentIndex:this.getItemIndex(A)})}exit(A){this._reset(),this.exited.next({item:A,container:this})}drop(A,t,e,n,s,i){this._reset(),null==i&&(i=e.getItemIndex(A)),this.dropped.next({item:A,currentIndex:t,previousIndex:i,container:this,previousContainer:e,isPointerOverContainer:n,distance:s})}withItems(A){const t=this._draggables;return this._draggables=A,A.forEach(A=>A._withDropContainer(this)),this.isDragging()&&(t.filter(A=>A.isDragging()).every(t=>-1===A.indexOf(t))?this._reset():this._cacheItems()),this}withDirection(A){return this._direction=A,this}connectedTo(A){return this._siblings=A.slice(),this}withOrientation(A){return this._orientation=A,this}withScrollableParents(A){const t=za(this.element);return this._scrollableElements=-1===A.indexOf(t)?[t,...A]:A.slice(),this}getScrollableParents(){return this._scrollableElements}getItemIndex(A){return this._isDragging?Oc("horizontal"===this._orientation&&"rtl"===this._direction?this._itemPositions.slice().reverse():this._itemPositions,t=>t.drag===A):this._draggables.indexOf(A)}isReceiving(){return this._activeSiblings.size>0}_sortItem(A,t,e,n){if(this.sortingDisabled||!Zc(this._clientRect,.05,t,e))return;const s=this._itemPositions,i=this._getItemIndexFromPointerPosition(A,t,e,n);if(-1===i&&s.length>0)return;const o="horizontal"===this._orientation,r=Oc(s,t=>t.drag===A),a=s[i],c=a.clientRect,M=r>i?1:-1,l=this._getItemOffsetPx(s[r].clientRect,c,M),u=this._getSiblingOffsetPx(r,s,M),h=s.slice();!function(A,t,e){const n=Rc(t,A.length-1),s=Rc(e,A.length-1);if(n===s)return;const i=A[n],o=s<n?-1:1;for(let r=n;r!==s;r+=o)A[r]=A[r+o];A[s]=i}(s,r,i),this.sorted.next({previousIndex:r,currentIndex:i,container:this,item:A}),s.forEach((t,e)=>{if(h[e]===t)return;const n=t.drag===A,s=n?l:u,i=n?A.getPlaceholderElement():t.drag.getRootElement();t.offset+=s,o?(i.style.transform=`translate3d(${Math.round(t.offset)}px, 0, 0)`,Qc(t.clientRect,0,s)):(i.style.transform=`translate3d(0, ${Math.round(t.offset)}px, 0)`,Qc(t.clientRect,s,0))}),this._previousSwap.overlaps=yc(c,t,e),this._previousSwap.drag=a.drag,this._previousSwap.delta=o?n.x:n.y}_startScrollingIfNecessary(A,t){if(this.autoScrollDisabled)return;let e,n=0,s=0;if(this._parentPositions.positions.forEach((i,o)=>{o!==this._document&&i.clientRect&&!e&&Zc(i.clientRect,.05,A,t)&&([n,s]=function(A,t,e,n){const s=fc(t,n),i=Vc(t,e);let o=0,r=0;if(s){const t=A.scrollTop;1===s?t>0&&(o=1):A.scrollHeight-t>A.clientHeight&&(o=2)}if(i){const t=A.scrollLeft;1===i?t>0&&(r=1):A.scrollWidth-t>A.clientWidth&&(r=2)}return[o,r]}(o,i.clientRect,A,t),(n||s)&&(e=o))}),!n&&!s){const{width:i,height:o}=this._viewportRuler.getViewportSize(),r={width:i,height:o,top:0,right:i,bottom:o,left:0};n=fc(r,t),s=Vc(r,A),e=window}!e||n===this._verticalScrollDirection&&s===this._horizontalScrollDirection&&e===this._scrollNode||(this._verticalScrollDirection=n,this._horizontalScrollDirection=s,this._scrollNode=e,(n||s)&&e?this._ngZone.runOutsideAngular(this._startScrollInterval):this._stopScrolling())}_stopScrolling(){this._stopScrollTimers.next()}_cacheParentPositions(){const A=za(this.element);this._parentPositions.cache(this._scrollableElements),this._clientRect=this._parentPositions.positions.get(A).clientRect}_cacheItemPositions(){const A="horizontal"===this._orientation;this._itemPositions=this._activeDraggables.map(A=>{const t=A.getVisibleElement();return{drag:A,offset:0,clientRect:Ic(t)}}).sort((t,e)=>A?t.clientRect.left-e.clientRect.left:t.clientRect.top-e.clientRect.top)}_reset(){this._isDragging=!1;const A=za(this.element).style;A.scrollSnapType=A.msScrollSnapType=this._initialScrollSnap,this._activeDraggables.forEach(A=>{const t=A.getRootElement();t&&(t.style.transform="")}),this._siblings.forEach(A=>A._stopReceiving(this)),this._activeDraggables=[],this._itemPositions=[],this._previousSwap.drag=null,this._previousSwap.delta=0,this._previousSwap.overlaps=!1,this._stopScrolling(),this._viewportScrollSubscription.unsubscribe(),this._parentPositions.clear()}_getSiblingOffsetPx(A,t,e){const n="horizontal"===this._orientation,s=t[A].clientRect,i=t[A+-1*e];let o=s[n?"width":"height"]*e;if(i){const A=n?"left":"top",t=n?"right":"bottom";-1===e?o-=i.clientRect[A]-s[t]:o+=s[A]-i.clientRect[t]}return o}_getItemOffsetPx(A,t,e){const n="horizontal"===this._orientation;let s=n?t.left-A.left:t.top-A.top;return-1===e&&(s+=n?t.width-A.width:t.height-A.height),s}_shouldEnterAsFirstChild(A,t){if(!this._activeDraggables.length)return!1;const e=this._itemPositions,n="horizontal"===this._orientation;if(e[0].drag!==this._activeDraggables[0]){const s=e[e.length-1].clientRect;return n?A>=s.right:t>=s.bottom}{const s=e[0].clientRect;return n?A<=s.left:t<=s.top}}_getItemIndexFromPointerPosition(A,t,e,n){const s="horizontal"===this._orientation;return Oc(this._itemPositions,({drag:i,clientRect:o},r,a)=>{if(i===A)return a.length<2;if(n){const A=s?n.x:n.y;if(i===this._previousSwap.drag&&this._previousSwap.overlaps&&A===this._previousSwap.delta)return!1}return s?t>=Math.floor(o.left)&&t<Math.floor(o.right):e>=Math.floor(o.top)&&e<Math.floor(o.bottom)})}_cacheItems(){this._activeDraggables=this._draggables.slice(),this._cacheItemPositions(),this._cacheParentPositions()}_isOverContainer(A,t){return yc(this._clientRect,A,t)}_getSiblingContainerFromPosition(A,t,e){return this._siblings.find(n=>n._canReceive(A,t,e))}_canReceive(A,t,e){if(!yc(this._clientRect,t,e)||!this.enterPredicate(A,this))return!1;const n=this._getShadowRoot().elementFromPoint(t,e);if(!n)return!1;const s=za(this.element);return n===s||s.contains(n)}_startReceiving(A){const t=this._activeSiblings;t.has(A)||(t.add(A),this._cacheParentPositions(),this._listenToScrollEvents())}_stopReceiving(A){this._activeSiblings.delete(A),this._viewportScrollSubscription.unsubscribe()}_listenToScrollEvents(){this._viewportScrollSubscription=this._dragDropRegistry.scroll.subscribe(A=>{if(this.isDragging()){const t=this._parentPositions.handleScroll(A);t&&(this._itemPositions.forEach(({clientRect:A})=>{Qc(A,t.top,t.left)}),this._itemPositions.forEach(({drag:A})=>{this._dragDropRegistry.isDragging(A)&&A._sortFromLastPointerPosition()}))}else this.isReceiving()&&this._cacheParentPositions()})}_getShadowRoot(){if(!this._cachedShadowRoot){const A=rc(za(this.element));this._cachedShadowRoot=A||this._document}return this._cachedShadowRoot}}function Oc(A,t){for(let e=0;e<A.length;e++)if(t(A[e],e,A))return e;return-1}function qc(A,t){A===window?A.scrollBy(0,t):A.scrollTop+=t}function Fc(A,t){A===window?A.scrollBy(t,0):A.scrollLeft+=t}function fc(A,t){const{top:e,bottom:n,height:s}=A,i=.05*s;return t>=e-i&&t<=e+i?1:t>=n-i&&t<=n+i?2:0}function Vc(A,t){const{left:e,right:n,width:s}=A,i=.05*s;return t>=e-i&&t<=e+i?1:t>=n-i&&t<=n+i?2:0}const Lc=oc({passive:!1,capture:!0});let Hc=(()=>{class A{constructor(A,t){this._ngZone=A,this._dropInstances=new Set,this._dragInstances=new Set,this._activeDragInstances=new Set,this._globalListeners=new Map,this.pointerMove=new C,this.pointerUp=new C,this.scroll=new C,this._preventDefaultWhileDragging=A=>{this._activeDragInstances.size&&A.preventDefault()},this._document=t}registerDropContainer(A){this._dropInstances.has(A)||this._dropInstances.add(A)}registerDragItem(A){this._dragInstances.add(A),1===this._dragInstances.size&&this._ngZone.runOutsideAngular(()=>{this._document.addEventListener("touchmove",this._preventDefaultWhileDragging,Lc)})}removeDropContainer(A){this._dropInstances.delete(A)}removeDragItem(A){this._dragInstances.delete(A),this.stopDragging(A),0===this._dragInstances.size&&this._document.removeEventListener("touchmove",this._preventDefaultWhileDragging,Lc)}startDragging(A,t){if(!this._activeDragInstances.has(A)&&(this._activeDragInstances.add(A),1===this._activeDragInstances.size)){const A=t.type.startsWith("touch"),e=A?"touchend":"mouseup";this._globalListeners.set(A?"touchmove":"mousemove",{handler:A=>this.pointerMove.next(A),options:Lc}).set(e,{handler:A=>this.pointerUp.next(A),options:!0}).set("scroll",{handler:A=>this.scroll.next(A),options:!0}).set("selectstart",{handler:this._preventDefaultWhileDragging,options:Lc}),this._ngZone.runOutsideAngular(()=>{this._globalListeners.forEach((A,t)=>{this._document.addEventListener(t,A.handler,A.options)})})}}stopDragging(A){this._activeDragInstances.delete(A),0===this._activeDragInstances.size&&this._clearGlobalListeners()}isDragging(A){return this._activeDragInstances.has(A)}ngOnDestroy(){this._dragInstances.forEach(A=>this.removeDragItem(A)),this._dropInstances.forEach(A=>this.removeDropContainer(A)),this._clearGlobalListeners(),this.pointerMove.complete(),this.pointerUp.complete()}_clearGlobalListeners(){this._globalListeners.forEach((A,t)=>{this._document.removeEventListener(t,A.handler,A.options)}),this._globalListeners.clear()}}return A.\u0275fac=function(t){return new(t||A)(FA(Er),FA(vr))},A.\u0275prov=rA({factory:function(){return new A(FA(Er),FA(vr))},token:A,providedIn:"root"}),A})();const vc={dragStartThreshold:5,pointerDirectionChangeThreshold:5};let Pc=(()=>{class A{constructor(A,t,e,n){this._document=A,this._ngZone=t,this._viewportRuler=e,this._dragDropRegistry=n}createDrag(A,t=vc){return new zc(A,t,this._document,this._ngZone,this._viewportRuler,this._dragDropRegistry)}createDropList(A){return new Wc(A,this._dragDropRegistry,this._document,this._ngZone,this._viewportRuler)}}return A.\u0275fac=function(t){return new(t||A)(FA(vr),FA(Er),FA(uc),FA(Hc))},A.\u0275prov=rA({factory:function(){return new A(FA(vr),FA(Er),FA(uc),FA(Hc))},token:A,providedIn:"root"}),A})();const Xc=new bA("CDK_DRAG_PARENT");let _c=(()=>{class A{constructor(A,t){this.element=A,this._stateChanges=new C,this._disabled=!1,this._parentDrag=t,Gc(A.nativeElement,!1)}get disabled(){return this._disabled}set disabled(A){this._disabled=Sa(A),this._stateChanges.next(this)}ngOnDestroy(){this._stateChanges.complete()}}return A.\u0275fac=function(t){return new(t||A)(ri(Hi),ri(Xc,8))},A.\u0275dir=gt({type:A,selectors:[["","cdkDragHandle",""]],hostAttrs:[1,"cdk-drag-handle"],inputs:{disabled:["cdkDragHandleDisabled","disabled"]}}),A})(),$c=(()=>{class A{constructor(A){this.templateRef=A}}return A.\u0275fac=function(t){return new(t||A)(ri(Yo))},A.\u0275dir=gt({type:A,selectors:[["ng-template","cdkDragPlaceholder",""]],inputs:{data:"data"}}),A})(),AM=(()=>{class A{constructor(A){this.templateRef=A,this._matchSize=!1}get matchSize(){return this._matchSize}set matchSize(A){this._matchSize=Sa(A)}}return A.\u0275fac=function(t){return new(t||A)(ri(Yo))},A.\u0275dir=gt({type:A,selectors:[["ng-template","cdkDragPreview",""]],inputs:{matchSize:"matchSize",data:"data"}}),A})();const tM=new bA("CDK_DRAG_CONFIG"),eM=new bA("CDK_DROP_LIST");let nM=(()=>{class A{constructor(A,t,e,n,s,i,o,r,a){this.element=A,this.dropContainer=t,this._document=e,this._ngZone=n,this._viewContainerRef=s,this._dir=o,this._changeDetectorRef=a,this._destroyed=new C,this.started=new Jo,this.released=new Jo,this.ended=new Jo,this.entered=new Jo,this.exited=new Jo,this.dropped=new Jo,this.moved=new Y(A=>{const t=this._dragRef.moved.pipe(j(A=>({source:this,pointerPosition:A.pointerPosition,event:A.event,delta:A.delta,distance:A.distance}))).subscribe(A);return()=>{t.unsubscribe()}}),this._dragRef=r.createDrag(A,{dragStartThreshold:i&&null!=i.dragStartThreshold?i.dragStartThreshold:5,pointerDirectionChangeThreshold:i&&null!=i.pointerDirectionChangeThreshold?i.pointerDirectionChangeThreshold:5,zIndex:null==i?void 0:i.zIndex}),this._dragRef.data=this,i&&this._assignDefaults(i),t&&(this._dragRef._withDropContainer(t._dropListRef),t.addItem(this)),this._syncInputs(this._dragRef),this._handleEvents(this._dragRef)}get disabled(){return this._disabled||this.dropContainer&&this.dropContainer.disabled}set disabled(A){this._disabled=Sa(A),this._dragRef.disabled=this._disabled}getPlaceholderElement(){return this._dragRef.getPlaceholderElement()}getRootElement(){return this._dragRef.getRootElement()}reset(){this._dragRef.reset()}getFreeDragPosition(){return this._dragRef.getFreeDragPosition()}ngAfterViewInit(){var A;this._ngZone.onStable.asObservable().pipe((A=1,t=>0===A?Ac:t.lift(new pc(A))),La(this._destroyed)).subscribe(()=>{var A;this._updateRootElement(),this._handles.changes.pipe(Xa(this._handles),(A=A=>{const t=A.filter(A=>A._parentDrag===this).map(A=>A.element);this._dragRef.withHandles(t)},function(t){return t.lift(new dc(A,void 0,void 0))}),function A(t,e){return"function"==typeof e?n=>n.pipe(A((A,n)=>J(t(A,n)).pipe(j((t,s)=>e(A,t,n,s))))):A=>A.lift(new _a(t))}(A=>F(...A.map(A=>A._stateChanges.pipe(Xa(A))))),La(this._destroyed)).subscribe(A=>{const t=this._dragRef,e=A.element.nativeElement;A.disabled?t.disableHandle(e):t.enableHandle(e)}),this.freeDragPosition&&this._dragRef.setFreeDragPosition(this.freeDragPosition)})}ngOnChanges(A){const t=A.rootElementSelector,e=A.freeDragPosition;t&&!t.firstChange&&this._updateRootElement(),e&&!e.firstChange&&this.freeDragPosition&&this._dragRef.setFreeDragPosition(this.freeDragPosition)}ngOnDestroy(){this.dropContainer&&this.dropContainer.removeItem(this),this._destroyed.next(),this._destroyed.complete(),this._dragRef.dispose()}_updateRootElement(){const A=this.element.nativeElement,t=this.rootElementSelector?sM(A,this.rootElementSelector):A;if(t&&t.nodeType!==this._document.ELEMENT_NODE)throw Error(`cdkDrag must be attached to an element node. Currently attached to "${t.nodeName}".`);this._dragRef.withRootElement(t||A)}_getBoundaryElement(){const A=this.boundaryElement;if(!A)return null;if("string"==typeof A)return sM(this.element.nativeElement,A);const t=za(A);if(_e()&&!t.contains(this.element.nativeElement))throw Error("Draggable element is not inside of the node passed into cdkDragBoundary.");return t}_syncInputs(A){A.beforeStarted.subscribe(()=>{if(!A.isDragging()){const t=this._dir,e=this.dragStartDelay,n=this._placeholderTemplate?{template:this._placeholderTemplate.templateRef,context:this._placeholderTemplate.data,viewContainer:this._viewContainerRef}:null,s=this._previewTemplate?{template:this._previewTemplate.templateRef,context:this._previewTemplate.data,matchSize:this._previewTemplate.matchSize,viewContainer:this._viewContainerRef}:null;A.disabled=this.disabled,A.lockAxis=this.lockAxis,A.dragStartDelay="object"==typeof e&&e?e:function(A,t=0){return function(A){return!isNaN(parseFloat(A))&&!isNaN(Number(A))}(A)?Number(A):t}(e),A.constrainPosition=this.constrainPosition,A.previewClass=this.previewClass,A.withBoundaryElement(this._getBoundaryElement()).withPlaceholderTemplate(n).withPreviewTemplate(s),t&&A.withDirection(t.value)}})}_handleEvents(A){A.started.subscribe(()=>{this.started.emit({source:this}),this._changeDetectorRef.markForCheck()}),A.released.subscribe(()=>{this.released.emit({source:this})}),A.ended.subscribe(A=>{this.ended.emit({source:this,distance:A.distance}),this._changeDetectorRef.markForCheck()}),A.entered.subscribe(A=>{this.entered.emit({container:A.container.data,item:this,currentIndex:A.currentIndex})}),A.exited.subscribe(A=>{this.exited.emit({container:A.container.data,item:this})}),A.dropped.subscribe(A=>{this.dropped.emit({previousIndex:A.previousIndex,currentIndex:A.currentIndex,previousContainer:A.previousContainer.data,container:A.container.data,isPointerOverContainer:A.isPointerOverContainer,item:this,distance:A.distance})})}_assignDefaults(A){const{lockAxis:t,dragStartDelay:e,constrainPosition:n,previewClass:s,boundaryElement:i,draggingDisabled:o,rootElementSelector:r}=A;this.disabled=null!=o&&o,this.dragStartDelay=e||0,t&&(this.lockAxis=t),n&&(this.constrainPosition=n),s&&(this.previewClass=s),i&&(this.boundaryElement=i),r&&(this.rootElementSelector=r)}}return A.\u0275fac=function(t){return new(t||A)(ri(Hi),ri(eM,12),ri(vr),ri(Er),ri(Do),ri(tM,8),ri(cc,8),ri(Pc),ri(xs))},A.\u0275dir=gt({type:A,selectors:[["","cdkDrag",""]],contentQueries:function(A,t,e){var n;1&A&&(_o(e,AM,!0),_o(e,$c,!0),_o(e,_c,!0)),2&A&&(Po(n=$o())&&(t._previewTemplate=n.first),Po(n=$o())&&(t._placeholderTemplate=n.first),Po(n=$o())&&(t._handles=n))},hostAttrs:[1,"cdk-drag"],hostVars:4,hostBindings:function(A,t){2&A&&Bi("cdk-drag-disabled",t.disabled)("cdk-drag-dragging",t._dragRef.isDragging())},inputs:{disabled:["cdkDragDisabled","disabled"],dragStartDelay:["cdkDragStartDelay","dragStartDelay"],lockAxis:["cdkDragLockAxis","lockAxis"],constrainPosition:["cdkDragConstrainPosition","constrainPosition"],previewClass:["cdkDragPreviewClass","previewClass"],boundaryElement:["cdkDragBoundary","boundaryElement"],rootElementSelector:["cdkDragRootElement","rootElementSelector"],data:["cdkDragData","data"],freeDragPosition:["cdkDragFreeDragPosition","freeDragPosition"]},outputs:{started:"cdkDragStarted",released:"cdkDragReleased",ended:"cdkDragEnded",entered:"cdkDragEntered",exited:"cdkDragExited",dropped:"cdkDragDropped",moved:"cdkDragMoved"},exportAs:["cdkDrag"],features:[Fi([{provide:Xc,useExisting:A}]),bi]}),A})();function sM(A,t){let e=A.parentElement;for(;e;){if(e.matches?e.matches(t):e.msMatchesSelector(t))return e;e=e.parentElement}return null}let iM=(()=>{class A{}return A.\u0275mod=ut({type:A}),A.\u0275inj=aA({factory:function(t){return new(t||A)},providers:[Pc],imports:[hc]}),A})();const oM=["cursor"],rM=["pad"],aM=["upSideOfPad"],cM=function(A){return{"background-color":A}};let MM=(()=>{class A{constructor(A){this.padService=A}ngOnInit(){this.color="gainsboro",this.pad=new Ta}getCursorPositionInPad(){this.cursorXAxis=this.myCursor.nativeElement.getBoundingClientRect().x,this.cursorYAxis=this.myCursor.nativeElement.getBoundingClientRect().y,this.cursorXPositionInPad=this.cursorXAxis-this.myPad.nativeElement.getBoundingClientRect().x,this.cursorYPositionInPad=this.cursorYAxis-this.myPad.nativeElement.getBoundingClientRect().y,this.pad.cursorXAxis=this.cursorXPositionInPad,this.pad.cursorYAxis=this.cursorYPositionInPad,this.pad.valenceValue=this.upSideOfPad.nativeElement.offsetHeight-this.cursorYPositionInPad-18,this.pad.arousalValue=this.cursorXPositionInPad-138,this.padService.updateCursorPositionInPad(this.pad)}onDragMove(){this.getCursorPositionInPad()}colorChange(){this.r=this.pad.cursorXAxis+168,this.g=this.pad.valenceValue+180,this.b=200-this.pad.arousalValue,this.color=`rgb(${this.r}, ${this.g}, ${this.b})`}}return A.\u0275fac=function(t){return new(t||A)(ri(ka))},A.\u0275cmp=at({type:A,selectors:[["app-pad"]],viewQuery:function(A,t){var e;1&A&&(Xo(oM,!0),Xo(rM,!0),Xo(aM,!0)),2&A&&(Po(e=$o())&&(t.myCursor=e.first),Po(e=$o())&&(t.myPad=e.first),Po(e=$o())&&(t.upSideOfPad=e.first))},decls:21,vars:3,consts:[[1,"main"],[1,"label"],[1,"app"],[1,"pad","pad__default",3,"ngStyle"],["pad",""],[1,"wrapper"],["upSideOfPad",""],[1,"square","square__one"],[1,"square","square__two"],[1,"square","square__three"],[1,"square","square__four"],["cdkDragBoundary",".pad","cdkDrag","",1,"cursor",3,"cdkDragMoved"],["cursor",""]],template:function(A,t){var e,n,s,i;1&A&&(Mi(0,"div",0),Mi(1,"p",1),Ii(2," Calm "),li(),Mi(3,"div",2),Mi(4,"p",1),Ii(5," Positive "),li(),Mi(6,"div",3,4),Mi(8,"div",5,6),ui(10,"div",7),ui(11,"div",8),li(),Mi(12,"div",5),ui(13,"div",9),ui(14,"div",10),li(),Mi(15,"div",11,12),gi("cdkDragMoved",(function(){return t.onDragMove()})),li(),li(),Mi(17,"p",1),Ii(18," Dark "),li(),li(),Mi(19,"p",1),Ii(20," Energic "),li(),li()),2&A&&(Yn(6),ai("ngStyle",(e=1,n=cM,s=t.color,function(A,t,e,n,s,i){const o=t+e;return ii(A,o,s)?function(A,t,e){return A[t]=e}(A,o+1,i?n.call(i,s):n(s)):function(A,t){const e=A[t];return e===hn?void 0:e}(A,o+1)}(Wt(),function(){const A=Jt.lFrame;let t=A.bindingRootIndex;return-1===t&&(t=A.bindingRootIndex=A.tView.bindingStartIndex),t}(),e,n,s,i))))},directives:[$r,nM],styles:[".main[_ngcontent-%COMP%]{display:flex;flex-direction:row;justify-content:center;align-items:center}.label[_ngcontent-%COMP%]{margin:0;padding:10px}.app[_ngcontent-%COMP%]{align-items:center}.app[_ngcontent-%COMP%], .pad[_ngcontent-%COMP%]{display:flex;flex-direction:column;justify-content:center}.pad[_ngcontent-%COMP%]{height:310px;width:310px;border-radius:10px}.pad__default[_ngcontent-%COMP%]{background-color:#dcdcdc}.wrapper[_ngcontent-%COMP%]{display:flex;flex-direction:row;height:100%}.square[_ngcontent-%COMP%]{width:100%;height:100%;border:1px solid #000;opacity:.1}.square__one[_ngcontent-%COMP%]{border-top:0;border-left:0;border-bottom:0}.square__two[_ngcontent-%COMP%]{border:0}.square__four[_ngcontent-%COMP%], .square__three[_ngcontent-%COMP%]{border-bottom:0;border-left:0}.square__four[_ngcontent-%COMP%]{border-right:0}.cursor[_ngcontent-%COMP%]{position:absolute;border-radius:30px/30px;border:3px solid #000;width:30px;height:30px}"]}),A})();var lM=e("eNoX");function uM(A,t){if(!A)throw new Error(t)}function hM(A,t,e=1/0){if(!(t<=A&&A<=e))throw new RangeError(`Value must be within [${t}, ${e}], got: ${A}`)}function gM(A){A.isOffline||"running"===A.state||pM('The AudioContext is "suspended". Invoke Tone.start() from a user action to start the audio.')}let mM=console;function pM(...A){mM.warn(...A)}function wM(A){return void 0===A}function YM(A){return!wM(A)}function dM(A){return"number"==typeof A}function BM(A){return"[object Object]"===Object.prototype.toString.call(A)&&A.constructor===Object}function DM(A){return"boolean"==typeof A}function GM(A){return Array.isArray(A)}function CM(A){return"string"==typeof A}function EM(A){return CM(A)&&/^([a-g]{1}(?:b|#|x|bb)?)(-?[0-9]+)/i.test(A)}const IM="object"==typeof self?self:null,yM=IM&&(IM.hasOwnProperty("AudioContext")||IM.hasOwnProperty("webkitAudioContext"));function QM(A,t,e,n){var s,i=arguments.length,o=i<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,e):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(A,t,e,n);else for(var r=A.length-1;r>=0;r--)(s=A[r])&&(o=(i<3?s(o):i>3?s(t,e,o):s(t,e))||o);return i>3&&o&&Object.defineProperty(t,e,o),o}function ZM(A,t,e,n){return new(e||(e=Promise))((function(s,i){function o(A){try{a(n.next(A))}catch(t){i(t)}}function r(A){try{a(n.throw(A))}catch(t){i(t)}}function a(A){var t;A.done?s(A.value):(t=A.value,t instanceof e?t:new e((function(A){A(t)}))).then(o,r)}a((n=n.apply(A,t||[])).next())}))}class TM{constructor(A,t,e){this._callback=A,this._type=t,this._updateInterval=e,this._createClock()}_createWorker(){const A=new Blob([`\n\t\t\t// the initial timeout time\n\t\t\tlet timeoutTime =  ${(1e3*this._updateInterval).toFixed(1)};\n\t\t\t// onmessage callback\n\t\t\tself.onmessage = function(msg){\n\t\t\t\ttimeoutTime = parseInt(msg.data);\n\t\t\t};\n\t\t\t// the tick function which posts a message\n\t\t\t// and schedules a new tick\n\t\t\tfunction tick(){\n\t\t\t\tsetTimeout(tick, timeoutTime);\n\t\t\t\tself.postMessage('tick');\n\t\t\t}\n\t\t\t// call tick initially\n\t\t\ttick();\n\t\t\t`],{type:"text/javascript"}),t=URL.createObjectURL(A),e=new Worker(t);e.onmessage=this._callback.bind(this),this._worker=e}_createTimeout(){this._timeout=setTimeout(()=>{this._createTimeout(),this._callback()},1e3*this._updateInterval)}_createClock(){if("worker"===this._type)try{this._createWorker()}catch(A){this._type="timeout",this._createClock()}else"timeout"===this._type&&this._createTimeout()}_disposeClock(){this._timeout&&(clearTimeout(this._timeout),this._timeout=0),this._worker&&(this._worker.terminate(),this._worker.onmessage=null)}get updateInterval(){return this._updateInterval}set updateInterval(A){this._updateInterval=Math.max(A,128/44100),"worker"===this._type&&this._worker.postMessage(Math.max(1e3*A,1))}get type(){return this._type}set type(A){this._disposeClock(),this._type=A,this._createClock()}dispose(){this._disposeClock()}}function kM(A){return Object(lM.isAnyAudioParam)(A)}function SM(A){return Object(lM.isAnyAudioNode)(A)}function zM(A){return Object(lM.isAnyOfflineAudioContext)(A)}function UM(A){return Object(lM.isAnyAudioContext)(A)}function bM(A){return A instanceof AudioBuffer}function jM(A,t){return"value"===A||kM(t)||SM(t)||bM(t)}function NM(A,...t){if(!t.length)return A;const e=t.shift();if(BM(A)&&BM(e))for(const n in e)jM(n,e[n])?A[n]=e[n]:BM(e[n])?(A[n]||Object.assign(A,{[n]:{}}),NM(A[n],e[n])):Object.assign(A,{[n]:e[n]});return NM(A,...t)}function xM(A,t,e=[],n){const s={},i=Array.from(t);if(BM(i[0])&&n&&!Reflect.has(i[0],n)&&(Object.keys(i[0]).some(t=>Reflect.has(A,t))||(NM(s,{[n]:i[0]}),e.splice(e.indexOf(n),1),i.shift())),1===i.length&&BM(i[0]))NM(s,i[0]);else for(let o=0;o<e.length;o++)YM(i[o])&&(s[e[o]]=i[o]);return NM(A,s)}function KM(A,t){return wM(A)?t:A}function JM(A,t){return t.forEach(t=>{Reflect.has(A,t)&&delete A[t]}),A}class RM{constructor(){this.debug=!1,this._wasDisposed=!1}static getDefaults(){return{}}log(...A){(this.debug||IM&&this.toString()===IM.TONE_DEBUG_CLASS)&&function(...A){mM.log(...A)}(this,...A)}dispose(){return this._wasDisposed=!0,this}get disposed(){return this._wasDisposed}toString(){return this.name}}function WM(A,t){return A>t+1e-6}function OM(A,t){return WM(A,t)||FM(A,t)}function qM(A,t){return A+1e-6<t}function FM(A,t){return Math.abs(A-t)<1e-6}RM.version="14.7.34";class fM extends RM{constructor(){super(),this.name="Timeline",this._timeline=[];const A=xM(fM.getDefaults(),arguments,["memory"]);this.memory=A.memory,this.increasing=A.increasing}static getDefaults(){return{memory:1/0,increasing:!1}}get length(){return this._timeline.length}add(A){if(uM(Reflect.has(A,"time"),"Timeline: events must have a time attribute"),A.time=A.time.valueOf(),this.increasing&&this.length)uM(OM(A.time,this._timeline[this.length-1].time),"The time must be greater than or equal to the last scheduled time"),this._timeline.push(A);else{const t=this._search(A.time);this._timeline.splice(t+1,0,A)}return this.length>this.memory&&this._timeline.splice(0,this.length-this.memory),this}remove(A){const t=this._timeline.indexOf(A);return-1!==t&&this._timeline.splice(t,1),this}get(A,t="time"){const e=this._search(A,t);return-1!==e?this._timeline[e]:null}peek(){return this._timeline[0]}shift(){return this._timeline.shift()}getAfter(A,t="time"){const e=this._search(A,t);return e+1<this._timeline.length?this._timeline[e+1]:null}getBefore(A){const t=this._timeline.length;if(t>0&&this._timeline[t-1].time<A)return this._timeline[t-1];const e=this._search(A);return e-1>=0?this._timeline[e-1]:null}cancel(A){if(this._timeline.length>1){let t=this._search(A);if(t>=0)if(FM(this._timeline[t].time,A)){for(let e=t;e>=0&&FM(this._timeline[e].time,A);e--)t=e;this._timeline=this._timeline.slice(0,t)}else this._timeline=this._timeline.slice(0,t+1);else this._timeline=[]}else 1===this._timeline.length&&OM(this._timeline[0].time,A)&&(this._timeline=[]);return this}cancelBefore(A){const t=this._search(A);return t>=0&&(this._timeline=this._timeline.slice(t+1)),this}previousEvent(A){const t=this._timeline.indexOf(A);return t>0?this._timeline[t-1]:null}_search(A,t="time"){if(0===this._timeline.length)return-1;let e=0;const n=this._timeline.length;let s=n;if(n>0&&this._timeline[n-1][t]<=A)return n-1;for(;e<s;){let n=Math.floor(e+(s-e)/2);const i=this._timeline[n],o=this._timeline[n+1];if(FM(i[t],A)){for(let e=n;e<this._timeline.length&&FM(this._timeline[e][t],A);e++)n=e;return n}if(qM(i[t],A)&&WM(o[t],A))return n;WM(i[t],A)?s=n:e=n+1}return-1}_iterate(A,t=0,e=this._timeline.length-1){this._timeline.slice(t,e+1).forEach(A)}forEach(A){return this._iterate(A),this}forEachBefore(A,t){const e=this._search(A);return-1!==e&&this._iterate(t,0,e),this}forEachAfter(A,t){const e=this._search(A);return this._iterate(t,e+1),this}forEachBetween(A,t,e){let n=this._search(A),s=this._search(t);return-1!==n&&-1!==s?(this._timeline[n].time!==A&&(n+=1),this._timeline[s].time===t&&(s-=1),this._iterate(e,n,s)):-1===n&&this._iterate(e,0,s),this}forEachFrom(A,t){let e=this._search(A);for(;e>=0&&this._timeline[e].time>=A;)e--;return this._iterate(t,e+1),this}forEachAtTime(A,t){const e=this._search(A);if(-1!==e&&FM(this._timeline[e].time,A)){let n=e;for(let t=e;t>=0&&FM(this._timeline[t].time,A);t--)n=t;this._iterate(A=>{t(A)},n,e)}return this}dispose(){return super.dispose(),this._timeline=[],this}}const VM=[];function LM(A){VM.push(A)}const HM=[];function vM(A){HM.push(A)}class PM extends RM{constructor(){super(...arguments),this.name="Emitter"}on(A,t){return A.split(/\W+/).forEach(A=>{wM(this._events)&&(this._events={}),this._events.hasOwnProperty(A)||(this._events[A]=[]),this._events[A].push(t)}),this}once(A,t){const e=(...n)=>{t(...n),this.off(A,e)};return this.on(A,e),this}off(A,t){return A.split(/\W+/).forEach(e=>{if(wM(this._events)&&(this._events={}),this._events.hasOwnProperty(A))if(wM(t))this._events[A]=[];else{const e=this._events[A];for(let A=0;A<e.length;A++)e[A]===t&&e.splice(A,1)}}),this}emit(A,...t){if(this._events&&this._events.hasOwnProperty(A)){const e=this._events[A].slice(0);for(let A=0,n=e.length;A<n;A++)e[A].apply(this,t)}return this}static mixin(A){["on","once","off","emit"].forEach(t=>{const e=Object.getOwnPropertyDescriptor(PM.prototype,t);Object.defineProperty(A.prototype,t,e)})}dispose(){return super.dispose(),this._events=void 0,this}}class XM extends PM{constructor(){super(...arguments),this.isOffline=!1}}class _M extends XM{constructor(){super(),this.name="Context",this._constants=new Map,this._timeouts=new fM,this._timeoutIds=0,this._initialized=!1,this.isOffline=!1,this._workletModules=new Map;const A=xM(_M.getDefaults(),arguments,["context"]);this._context=A.context?A.context:function(A){return new lM.AudioContext(A)}({latencyHint:A.latencyHint}),this._ticker=new TM(this.emit.bind(this,"tick"),A.clockSource,A.updateInterval),this.on("tick",this._timeoutLoop.bind(this)),this._context.onstatechange=()=>{this.emit("statechange",this.state)},this._setLatencyHint(A.latencyHint),this.lookAhead=A.lookAhead}static getDefaults(){return{clockSource:"worker",latencyHint:"interactive",lookAhead:.1,updateInterval:.05}}initialize(){var A;return this._initialized||(A=this,VM.forEach(t=>t(A)),this._initialized=!0),this}createAnalyser(){return this._context.createAnalyser()}createOscillator(){return this._context.createOscillator()}createBufferSource(){return this._context.createBufferSource()}createBiquadFilter(){return this._context.createBiquadFilter()}createBuffer(A,t,e){return this._context.createBuffer(A,t,e)}createChannelMerger(A){return this._context.createChannelMerger(A)}createChannelSplitter(A){return this._context.createChannelSplitter(A)}createConstantSource(){return this._context.createConstantSource()}createConvolver(){return this._context.createConvolver()}createDelay(A){return this._context.createDelay(A)}createDynamicsCompressor(){return this._context.createDynamicsCompressor()}createGain(){return this._context.createGain()}createIIRFilter(A,t){return this._context.createIIRFilter(A,t)}createPanner(){return this._context.createPanner()}createPeriodicWave(A,t,e){return this._context.createPeriodicWave(A,t,e)}createStereoPanner(){return this._context.createStereoPanner()}createWaveShaper(){return this._context.createWaveShaper()}createMediaStreamSource(A){return uM(UM(this._context),"Not available if OfflineAudioContext"),this._context.createMediaStreamSource(A)}createMediaStreamDestination(){return uM(UM(this._context),"Not available if OfflineAudioContext"),this._context.createMediaStreamDestination()}decodeAudioData(A){return this._context.decodeAudioData(A)}get currentTime(){return this._context.currentTime}get state(){return this._context.state}get sampleRate(){return this._context.sampleRate}get listener(){return this.initialize(),this._listener}set listener(A){uM(!this._initialized,"The listener cannot be set after initialization."),this._listener=A}get transport(){return this.initialize(),this._transport}set transport(A){uM(!this._initialized,"The transport cannot be set after initialization."),this._transport=A}get draw(){return this.initialize(),this._draw}set draw(A){uM(!this._initialized,"Draw cannot be set after initialization."),this._draw=A}get destination(){return this.initialize(),this._destination}set destination(A){uM(!this._initialized,"The destination cannot be set after initialization."),this._destination=A}createAudioWorkletNode(A,t){return function(A,t,e){return uM(YM(lM.AudioWorkletNode),"This node only works in a secure context (https or localhost)"),new lM.AudioWorkletNode(A,t,e)}(this.rawContext,A,t)}addAudioWorkletModule(A,t){return ZM(this,void 0,void 0,(function*(){uM(YM(this.rawContext.audioWorklet),"AudioWorkletNode is only available in a secure context (https or localhost)"),this._workletModules.has(t)||this._workletModules.set(t,this.rawContext.audioWorklet.addModule(A)),yield this._workletModules.get(t)}))}workletsAreReady(){return ZM(this,void 0,void 0,(function*(){const A=[];this._workletModules.forEach(t=>A.push(t)),yield Promise.all(A)}))}get updateInterval(){return this._ticker.updateInterval}set updateInterval(A){this._ticker.updateInterval=A}get clockSource(){return this._ticker.type}set clockSource(A){this._ticker.type=A}get latencyHint(){return this._latencyHint}_setLatencyHint(A){let t=0;if(this._latencyHint=A,CM(A))switch(A){case"interactive":t=.1;break;case"playback":t=.5;break;case"balanced":t=.25}this.lookAhead=t,this.updateInterval=t/2}get rawContext(){return this._context}now(){return this._context.currentTime+this.lookAhead}immediate(){return this._context.currentTime}resume(){return"suspended"===this._context.state&&UM(this._context)?this._context.resume():Promise.resolve()}close(){return ZM(this,void 0,void 0,(function*(){var A;UM(this._context)&&(yield this._context.close()),this._initialized&&(A=this,HM.forEach(t=>t(A)))}))}getConstant(A){if(this._constants.has(A))return this._constants.get(A);{const t=this._context.createBuffer(1,128,this._context.sampleRate),e=t.getChannelData(0);for(let s=0;s<e.length;s++)e[s]=A;const n=this._context.createBufferSource();return n.channelCount=1,n.channelCountMode="explicit",n.buffer=t,n.loop=!0,n.start(0),this._constants.set(A,n),n}}dispose(){return super.dispose(),this._ticker.dispose(),this._timeouts.dispose(),Object.keys(this._constants).map(A=>this._constants[A].disconnect()),this}_timeoutLoop(){const A=this.now();let t=this._timeouts.peek();for(;this._timeouts.length&&t&&t.time<=A;)t.callback(),this._timeouts.shift(),t=this._timeouts.peek()}setTimeout(A,t){this._timeoutIds++;const e=this.now();return this._timeouts.add({callback:A,id:this._timeoutIds,time:e+t}),this._timeoutIds}clearTimeout(A){return this._timeouts.forEach(t=>{t.id===A&&this._timeouts.remove(t)}),this}clearInterval(A){return this.clearTimeout(A)}setInterval(A,t){const e=++this._timeoutIds,n=()=>{const s=this.now();this._timeouts.add({callback:()=>{A(),n()},id:e,time:s+t})};return n(),e}}function $M(A,t){GM(t)?t.forEach(t=>$M(A,t)):Object.defineProperty(A,t,{enumerable:!0,writable:!1})}function Al(A,t){GM(t)?t.forEach(t=>Al(A,t)):Object.defineProperty(A,t,{writable:!0})}const tl=()=>{};class el extends RM{constructor(){super(),this.name="ToneAudioBuffer",this.onload=tl;const A=xM(el.getDefaults(),arguments,["url","onload","onerror"]);this.reverse=A.reverse,this.onload=A.onload,A.url&&bM(A.url)||A.url instanceof el?this.set(A.url):CM(A.url)&&this.load(A.url).catch(A.onerror)}static getDefaults(){return{onerror:tl,onload:tl,reverse:!1}}get sampleRate(){return this._buffer?this._buffer.sampleRate:ol().sampleRate}set(A){return A instanceof el?A.loaded?this._buffer=A.get():A.onload=()=>{this.set(A),this.onload(this)}:this._buffer=A,this._reversed&&this._reverse(),this}get(){return this._buffer}load(A){return ZM(this,void 0,void 0,(function*(){const t=el.load(A).then(A=>{this.set(A),this.onload(this)});el.downloads.push(t);try{yield t}finally{const A=el.downloads.indexOf(t);el.downloads.splice(A,1)}return this}))}dispose(){return super.dispose(),this._buffer=void 0,this}fromArray(A){const t=GM(A)&&A[0].length>0,e=t?A.length:1,n=t?A[0].length:A.length,s=ol(),i=s.createBuffer(e,n,s.sampleRate),o=t||1!==e?A:[A];for(let r=0;r<e;r++)i.copyToChannel(o[r],r);return this._buffer=i,this}toMono(A){if(dM(A))this.fromArray(this.toArray(A));else{let A=new Float32Array(this.length);const t=this.numberOfChannels;for(let e=0;e<t;e++){const t=this.toArray(e);for(let e=0;e<t.length;e++)A[e]+=t[e]}A=A.map(A=>A/t),this.fromArray(A)}return this}toArray(A){if(dM(A))return this.getChannelData(A);if(1===this.numberOfChannels)return this.toArray(0);{const A=[];for(let t=0;t<this.numberOfChannels;t++)A[t]=this.getChannelData(t);return A}}getChannelData(A){return this._buffer?this._buffer.getChannelData(A):new Float32Array(0)}slice(A,t=this.duration){const e=Math.floor(A*this.sampleRate),n=Math.floor(t*this.sampleRate);uM(e<n,"The start time must be less than the end time");const s=n-e,i=ol().createBuffer(this.numberOfChannels,s,this.sampleRate);for(let o=0;o<this.numberOfChannels;o++)i.copyToChannel(this.getChannelData(o).subarray(e,n),o);return new el(i)}_reverse(){if(this.loaded)for(let A=0;A<this.numberOfChannels;A++)this.getChannelData(A).reverse();return this}get loaded(){return this.length>0}get duration(){return this._buffer?this._buffer.duration:0}get length(){return this._buffer?this._buffer.length:0}get numberOfChannels(){return this._buffer?this._buffer.numberOfChannels:0}get reverse(){return this._reversed}set reverse(A){this._reversed!==A&&(this._reversed=A,this._reverse())}static fromArray(A){return(new el).fromArray(A)}static fromUrl(A){return ZM(this,void 0,void 0,(function*(){const t=new el;return yield t.load(A)}))}static load(A){return ZM(this,void 0,void 0,(function*(){const t=A.match(/\[(.+\|?)+\]$/);if(t){const e=t[1].split("|");let n=e[0];for(const A of e)if(el.supportsType(A)){n=A;break}A=A.replace(t[0],n)}const e=""===el.baseUrl||el.baseUrl.endsWith("/")?el.baseUrl:el.baseUrl+"/",n=yield fetch(e+A);if(!n.ok)throw new Error("could not load url: "+A);const s=yield n.arrayBuffer();return yield ol().decodeAudioData(s)}))}static supportsType(A){const t=A.split("."),e=t[t.length-1];return""!==document.createElement("audio").canPlayType("audio/"+e)}static loaded(){return ZM(this,void 0,void 0,(function*(){for(yield Promise.resolve();el.downloads.length;)yield el.downloads[0]}))}}el.baseUrl="",el.downloads=[];class nl extends _M{constructor(){var A,t,e;super({clockSource:"offline",context:zM(arguments[0])?arguments[0]:(A=arguments[0],t=arguments[1]*arguments[2],e=arguments[2],new lM.OfflineAudioContext(A,t,e)),lookAhead:0,updateInterval:zM(arguments[0])?128/arguments[0].sampleRate:128/arguments[2]}),this.name="OfflineContext",this._currentTime=0,this.isOffline=!0,this._duration=zM(arguments[0])?arguments[0].length/arguments[0].sampleRate:arguments[1]}now(){return this._currentTime}get currentTime(){return this._currentTime}_renderClock(A){return ZM(this,void 0,void 0,(function*(){let t=0;for(;this._duration-this._currentTime>=0;){this.emit("tick"),this._currentTime+=128/this.sampleRate,t++;const e=Math.floor(this.sampleRate/128);A&&t%e==0&&(yield new Promise(A=>setTimeout(A,1)))}}))}render(A=!0){return ZM(this,void 0,void 0,(function*(){yield this.workletsAreReady(),yield this._renderClock(A);const t=yield this._context.startRendering();return new el(t)}))}close(){return Promise.resolve()}}const sl=new class extends XM{constructor(){super(...arguments),this.lookAhead=0,this.latencyHint=0,this.isOffline=!1}createAnalyser(){return{}}createOscillator(){return{}}createBufferSource(){return{}}createBiquadFilter(){return{}}createBuffer(A,t,e){return{}}createChannelMerger(A){return{}}createChannelSplitter(A){return{}}createConstantSource(){return{}}createConvolver(){return{}}createDelay(A){return{}}createDynamicsCompressor(){return{}}createGain(){return{}}createIIRFilter(A,t){return{}}createPanner(){return{}}createPeriodicWave(A,t,e){return{}}createStereoPanner(){return{}}createWaveShaper(){return{}}createMediaStreamSource(A){return{}}createMediaStreamDestination(){return{}}decodeAudioData(A){return Promise.resolve({})}createAudioWorkletNode(A,t){return{}}get rawContext(){return{}}addAudioWorkletModule(A,t){return ZM(this,void 0,void 0,(function*(){return Promise.resolve()}))}resume(){return Promise.resolve()}setTimeout(A,t){return 0}clearTimeout(A){return this}setInterval(A,t){return 0}clearInterval(A){return this}getConstant(A){return{}}get currentTime(){return 0}get state(){return{}}get sampleRate(){return 0}get listener(){return{}}get transport(){return{}}get draw(){return{}}set draw(A){}get destination(){return{}}set destination(A){}now(){return 0}immediate(){return 0}};let il=sl;function ol(){return il===sl&&yM&&(A=new _M,il=UM(A)?new _M(A):zM(A)?new nl(A):A),il;var A}function rl(A){return Math.pow(2,A/12)}IM&&!IM.TONE_SILENCE_LOGGING&&console.log("%c * Tone.js v14.7.34 * ","background: #000; color: #fff");let al=440;function cl(A){return Math.round(Ml(A))}function Ml(A){return 69+12*Math.log2(A/al)}function ll(A){return al*Math.pow(2,(A-69)/12)}class ul extends RM{constructor(A,t,e){super(),this.defaultUnits="s",this._val=t,this._units=e,this.context=A,this._expressions=this._getExpressions()}_getExpressions(){return{hz:{method:A=>this._frequencyToUnits(parseFloat(A)),regexp:/^(\d+(?:\.\d+)?)hz$/i},i:{method:A=>this._ticksToUnits(parseInt(A,10)),regexp:/^(\d+)i$/i},m:{method:A=>this._beatsToUnits(parseInt(A,10)*this._getTimeSignature()),regexp:/^(\d+)m$/i},n:{method:(A,t)=>{const e=parseInt(A,10),n="."===t?1.5:1;return 1===e?this._beatsToUnits(this._getTimeSignature())*n:this._beatsToUnits(4/e)*n},regexp:/^(\d+)n(\.?)$/i},number:{method:A=>this._expressions[this.defaultUnits].method.call(this,A),regexp:/^(\d+(?:\.\d+)?)$/},s:{method:A=>this._secondsToUnits(parseFloat(A)),regexp:/^(\d+(?:\.\d+)?)s$/},samples:{method:A=>parseInt(A,10)/this.context.sampleRate,regexp:/^(\d+)samples$/},t:{method:A=>{const t=parseInt(A,10);return this._beatsToUnits(8/(3*Math.floor(t)))},regexp:/^(\d+)t$/i},tr:{method:(A,t,e)=>{let n=0;return A&&"0"!==A&&(n+=this._beatsToUnits(this._getTimeSignature()*parseFloat(A))),t&&"0"!==t&&(n+=this._beatsToUnits(parseFloat(t))),e&&"0"!==e&&(n+=this._beatsToUnits(parseFloat(e)/4)),n},regexp:/^(\d+(?:\.\d+)?):(\d+(?:\.\d+)?):?(\d+(?:\.\d+)?)?$/}}}valueOf(){if(this._val instanceof ul&&this.fromType(this._val),wM(this._val))return this._noArg();if(CM(this._val)&&wM(this._units)){for(const A in this._expressions)if(this._expressions[A].regexp.test(this._val.trim())){this._units=A;break}}else if(BM(this._val)){let A=0;for(const t in this._val)if(YM(this._val[t])){const e=this._val[t];A+=new this.constructor(this.context,t).valueOf()*e}return A}if(YM(this._units)){const A=this._expressions[this._units],t=this._val.toString().trim().match(A.regexp);return t?A.method.apply(this,t.slice(1)):A.method.call(this,this._val)}return CM(this._val)?parseFloat(this._val):this._val}_frequencyToUnits(A){return 1/A}_beatsToUnits(A){return 60/this._getBpm()*A}_secondsToUnits(A){return A}_ticksToUnits(A){return A*this._beatsToUnits(1)/this._getPPQ()}_noArg(){return this._now()}_getBpm(){return this.context.transport.bpm.value}_getTimeSignature(){return this.context.transport.timeSignature}_getPPQ(){return this.context.transport.PPQ}fromType(A){switch(this._units=void 0,this.defaultUnits){case"s":this._val=A.toSeconds();break;case"i":this._val=A.toTicks();break;case"hz":this._val=A.toFrequency();break;case"midi":this._val=A.toMidi()}return this}toFrequency(){return 1/this.toSeconds()}toSamples(){return this.toSeconds()*this.context.sampleRate}toMilliseconds(){return 1e3*this.toSeconds()}}class hl extends ul{constructor(){super(...arguments),this.name="TimeClass"}_getExpressions(){return Object.assign(super._getExpressions(),{now:{method:A=>this._now()+new this.constructor(this.context,A).valueOf(),regexp:/^\+(.+)/},quantize:{method:A=>{const t=new hl(this.context,A).valueOf();return this._secondsToUnits(this.context.transport.nextSubdivision(t))},regexp:/^@(.+)/}})}quantize(A,t=1){const e=new this.constructor(this.context,A).valueOf(),n=this.valueOf();return n+(Math.round(n/e)*e-n)*t}toNotation(){const A=this.toSeconds(),t=["1m"];for(let s=1;s<9;s++){const A=Math.pow(2,s);t.push(A+"n."),t.push(A+"n"),t.push(A+"t")}t.push("0");let e=t[0],n=new hl(this.context,t[0]).toSeconds();return t.forEach(t=>{const s=new hl(this.context,t).toSeconds();Math.abs(s-A)<Math.abs(n-A)&&(e=t,n=s)}),e}toBarsBeatsSixteenths(){const A=this._beatsToUnits(1);let t=this.valueOf()/A;t=parseFloat(t.toFixed(4));const e=Math.floor(t/this._getTimeSignature());let n=t%1*4;t=Math.floor(t)%this._getTimeSignature();const s=n.toString();return s.length>3&&(n=parseFloat(parseFloat(s).toFixed(3))),[e,t,n].join(":")}toTicks(){const A=this._beatsToUnits(1),t=this.valueOf()/A;return Math.round(t*this._getPPQ())}toSeconds(){return this.valueOf()}toMidi(){return cl(this.toFrequency())}_now(){return this.context.now()}}class gl extends hl{constructor(){super(...arguments),this.name="Frequency",this.defaultUnits="hz"}static get A4(){return al}static set A4(A){!function(A){al=A}(A)}_getExpressions(){return Object.assign({},super._getExpressions(),{midi:{regexp:/^(\d+(?:\.\d+)?midi)/,method(A){return"midi"===this.defaultUnits?A:gl.mtof(A)}},note:{regexp:/^([a-g]{1}(?:b|#|x|bb)?)(-?[0-9]+)/i,method(A,t){const e=ml[A.toLowerCase()]+12*(parseInt(t,10)+1);return"midi"===this.defaultUnits?e:gl.mtof(e)}},tr:{regexp:/^(\d+(?:\.\d+)?):(\d+(?:\.\d+)?):?(\d+(?:\.\d+)?)?/,method(A,t,e){let n=1;return A&&"0"!==A&&(n*=this._beatsToUnits(this._getTimeSignature()*parseFloat(A))),t&&"0"!==t&&(n*=this._beatsToUnits(parseFloat(t))),e&&"0"!==e&&(n*=this._beatsToUnits(parseFloat(e)/4)),n}}})}transpose(A){return new gl(this.context,this.valueOf()*rl(A))}harmonize(A){return A.map(A=>this.transpose(A))}toMidi(){return cl(this.valueOf())}toNote(){const A=this.toFrequency(),t=Math.log2(A/gl.A4);let e=Math.round(12*t)+57;const n=Math.floor(e/12);return n<0&&(e+=-12*n),pl[e%12]+n.toString()}toSeconds(){return 1/super.toSeconds()}toTicks(){const A=this._beatsToUnits(1),t=this.valueOf()/A;return Math.floor(t*this._getPPQ())}_noArg(){return 0}_frequencyToUnits(A){return A}_ticksToUnits(A){return 1/(60*A/(this._getBpm()*this._getPPQ()))}_beatsToUnits(A){return 1/super._beatsToUnits(A)}_secondsToUnits(A){return 1/A}static mtof(A){return ll(A)}static ftom(A){return cl(A)}}const ml={cbb:-2,cb:-1,c:0,"c#":1,cx:2,dbb:0,db:1,d:2,"d#":3,dx:4,ebb:2,eb:3,e:4,"e#":5,ex:6,fbb:3,fb:4,f:5,"f#":6,fx:7,gbb:5,gb:6,g:7,"g#":8,gx:9,abb:7,ab:8,a:9,"a#":10,ax:11,bbb:9,bb:10,b:11,"b#":12,bx:13},pl=["C","C#","D","D#","E","F","F#","G","G#","A","A#","B"];class wl extends hl{constructor(){super(...arguments),this.name="TransportTime"}_now(){return this.context.transport.seconds}}class Yl extends RM{constructor(){super();const A=xM(Yl.getDefaults(),arguments,["context"]);this.context=this.defaultContext?this.defaultContext:A.context}static getDefaults(){return{context:ol()}}now(){return this.context.currentTime+this.context.lookAhead}immediate(){return this.context.currentTime}get sampleTime(){return 1/this.context.sampleRate}get blockTime(){return 128/this.context.sampleRate}toSeconds(A){return new hl(this.context,A).toSeconds()}toFrequency(A){return new gl(this.context,A).toFrequency()}toTicks(A){return new wl(this.context,A).toTicks()}_getPartialProperties(A){const t=this.get();return Object.keys(t).forEach(e=>{wM(A[e])&&delete t[e]}),t}get(){const A=this.constructor.getDefaults();return Object.keys(A).forEach(t=>{if(Reflect.has(this,t)){const e=this[t];YM(e)&&YM(e.value)&&YM(e.setValueAtTime)?A[t]=e.value:e instanceof Yl?A[t]=e._getPartialProperties(A[t]):GM(e)||dM(e)||CM(e)||DM(e)?A[t]=e:delete A[t]}}),A}set(A){return Object.keys(A).forEach(t=>{Reflect.has(this,t)&&YM(this[t])&&(this[t]&&YM(this[t].value)&&YM(this[t].setValueAtTime)?this[t].value!==A[t]&&(this[t].value=A[t]):this[t]instanceof Yl?this[t].set(A[t]):this[t]=A[t])}),this}}class dl extends fM{constructor(A="stopped"){super(),this.name="StateTimeline",this._initial=A,this.setStateAtTime(this._initial,0)}getValueAtTime(A){const t=this.get(A);return null!==t?t.state:this._initial}setStateAtTime(A,t,e){return hM(t,0),this.add(Object.assign({},e,{state:A,time:t})),this}getLastState(A,t){for(let e=this._search(t);e>=0;e--){const t=this._timeline[e];if(t.state===A)return t}}getNextState(A,t){const e=this._search(t);if(-1!==e)for(let n=e;n<this._timeline.length;n++){const t=this._timeline[n];if(t.state===A)return t}}}class Bl extends Yl{constructor(){super(xM(Bl.getDefaults(),arguments,["param","units","convert"])),this.name="Param",this.overridden=!1,this._minOutput=1e-7;const A=xM(Bl.getDefaults(),arguments,["param","units","convert"]);for(uM(YM(A.param)&&(kM(A.param)||A.param instanceof Bl),"param must be an AudioParam");!kM(A.param);)A.param=A.param._param;this._swappable=!!YM(A.swappable)&&A.swappable,this._swappable?(this.input=this.context.createGain(),this._param=A.param,this.input.connect(this._param)):this._param=this.input=A.param,this._events=new fM(1e3),this._initialValue=this._param.defaultValue,this.units=A.units,this.convert=A.convert,this._minValue=A.minValue,this._maxValue=A.maxValue,YM(A.value)&&A.value!==this._toType(this._initialValue)&&this.setValueAtTime(A.value,0)}static getDefaults(){return Object.assign(Yl.getDefaults(),{convert:!0,units:"number"})}get value(){const A=this.now();return this.getValueAtTime(A)}set value(A){this.cancelScheduledValues(this.now()),this.setValueAtTime(A,this.now())}get minValue(){return YM(this._minValue)?this._minValue:"time"===this.units||"frequency"===this.units||"normalRange"===this.units||"positive"===this.units||"transportTime"===this.units||"ticks"===this.units||"bpm"===this.units||"hertz"===this.units||"samples"===this.units?0:"audioRange"===this.units?-1:"decibels"===this.units?-1/0:this._param.minValue}get maxValue(){return YM(this._maxValue)?this._maxValue:"normalRange"===this.units||"audioRange"===this.units?1:this._param.maxValue}_is(A,t){return this.units===t}_assertRange(A){return YM(this.maxValue)&&YM(this.minValue)&&hM(A,this._fromType(this.minValue),this._fromType(this.maxValue)),A}_fromType(A){return this.convert&&!this.overridden?this._is(A,"time")?this.toSeconds(A):this._is(A,"decibels")?Math.pow(10,A/20):this._is(A,"frequency")?this.toFrequency(A):A:this.overridden?0:A}_toType(A){return this.convert&&"decibels"===this.units?Math.log(A)/Math.LN10*20:A}setValueAtTime(A,t){const e=this.toSeconds(t),n=this._fromType(A);return uM(isFinite(n)&&isFinite(e),`Invalid argument(s) to setValueAtTime: ${JSON.stringify(A)}, ${JSON.stringify(t)}`),this._assertRange(n),this.log(this.units,"setValueAtTime",A,e),this._events.add({time:e,type:"setValueAtTime",value:n}),this._param.setValueAtTime(n,e),this}getValueAtTime(A){const t=Math.max(this.toSeconds(A),0),e=this._events.getAfter(t),n=this._events.get(t);let s=this._initialValue;if(null===n)s=this._initialValue;else if("setTargetAtTime"!==n.type||null!==e&&"setValueAtTime"!==e.type)if(null===e)s=n.value;else if("linearRampToValueAtTime"===e.type||"exponentialRampToValueAtTime"===e.type){let A=n.value;if("setTargetAtTime"===n.type){const t=this._events.getBefore(n.time);A=null===t?this._initialValue:t.value}s="linearRampToValueAtTime"===e.type?this._linearInterpolate(n.time,A,e.time,e.value,t):this._exponentialInterpolate(n.time,A,e.time,e.value,t)}else s=n.value;else{const A=this._events.getBefore(n.time);let e;e=null===A?this._initialValue:A.value,"setTargetAtTime"===n.type&&(s=this._exponentialApproach(n.time,e,n.value,n.constant,t))}return this._toType(s)}setRampPoint(A){A=this.toSeconds(A);let t=this.getValueAtTime(A);return this.cancelAndHoldAtTime(A),0===this._fromType(t)&&(t=this._toType(this._minOutput)),this.setValueAtTime(t,A),this}linearRampToValueAtTime(A,t){const e=this._fromType(A),n=this.toSeconds(t);return uM(isFinite(e)&&isFinite(n),`Invalid argument(s) to linearRampToValueAtTime: ${JSON.stringify(A)}, ${JSON.stringify(t)}`),this._assertRange(e),this._events.add({time:n,type:"linearRampToValueAtTime",value:e}),this.log(this.units,"linearRampToValueAtTime",A,n),this._param.linearRampToValueAtTime(e,n),this}exponentialRampToValueAtTime(A,t){let e=this._fromType(A);e=Math.max(this._minOutput,e),this._assertRange(e);const n=this.toSeconds(t);return uM(isFinite(e)&&isFinite(n),`Invalid argument(s) to exponentialRampToValueAtTime: ${JSON.stringify(A)}, ${JSON.stringify(t)}`),this._events.add({time:n,type:"exponentialRampToValueAtTime",value:e}),this.log(this.units,"exponentialRampToValueAtTime",A,n),this._param.exponentialRampToValueAtTime(e,n),this}exponentialRampTo(A,t,e){return e=this.toSeconds(e),this.setRampPoint(e),this.exponentialRampToValueAtTime(A,e+this.toSeconds(t)),this}linearRampTo(A,t,e){return e=this.toSeconds(e),this.setRampPoint(e),this.linearRampToValueAtTime(A,e+this.toSeconds(t)),this}targetRampTo(A,t,e){return e=this.toSeconds(e),this.setRampPoint(e),this.exponentialApproachValueAtTime(A,e,t),this}exponentialApproachValueAtTime(A,t,e){t=this.toSeconds(t),e=this.toSeconds(e);const n=Math.log(e+1)/Math.log(200);return this.setTargetAtTime(A,t,n),this.cancelAndHoldAtTime(t+.9*e),this.linearRampToValueAtTime(A,t+e),this}setTargetAtTime(A,t,e){const n=this._fromType(A);uM(isFinite(e)&&e>0,"timeConstant must be a number greater than 0");const s=this.toSeconds(t);return this._assertRange(n),uM(isFinite(n)&&isFinite(s),`Invalid argument(s) to setTargetAtTime: ${JSON.stringify(A)}, ${JSON.stringify(t)}`),this._events.add({constant:e,time:s,type:"setTargetAtTime",value:n}),this.log(this.units,"setTargetAtTime",A,s,e),this._param.setTargetAtTime(n,s,e),this}setValueCurveAtTime(A,t,e,n=1){e=this.toSeconds(e),t=this.toSeconds(t);const s=this._fromType(A[0])*n;this.setValueAtTime(this._toType(s),t);const i=e/(A.length-1);for(let o=1;o<A.length;o++){const e=this._fromType(A[o])*n;this.linearRampToValueAtTime(this._toType(e),t+o*i)}return this}cancelScheduledValues(A){const t=this.toSeconds(A);return uM(isFinite(t),"Invalid argument to cancelScheduledValues: "+JSON.stringify(A)),this._events.cancel(t),this._param.cancelScheduledValues(t),this.log(this.units,"cancelScheduledValues",t),this}cancelAndHoldAtTime(A){const t=this.toSeconds(A),e=this._fromType(this.getValueAtTime(t));uM(isFinite(t),"Invalid argument to cancelAndHoldAtTime: "+JSON.stringify(A)),this.log(this.units,"cancelAndHoldAtTime",t,"value="+e);const n=this._events.get(t),s=this._events.getAfter(t);return n&&FM(n.time,t)?s?(this._param.cancelScheduledValues(s.time),this._events.cancel(s.time)):(this._param.cancelAndHoldAtTime(t),this._events.cancel(t+this.sampleTime)):s&&(this._param.cancelScheduledValues(s.time),this._events.cancel(s.time),"linearRampToValueAtTime"===s.type?this.linearRampToValueAtTime(this._toType(e),t):"exponentialRampToValueAtTime"===s.type&&this.exponentialRampToValueAtTime(this._toType(e),t)),this._events.add({time:t,type:"setValueAtTime",value:e}),this._param.setValueAtTime(e,t),this}rampTo(A,t=.1,e){return"frequency"===this.units||"bpm"===this.units||"decibels"===this.units?this.exponentialRampTo(A,t,e):this.linearRampTo(A,t,e),this}apply(A){const t=this.context.currentTime;A.setValueAtTime(this.getValueAtTime(t),t);const e=this._events.get(t);if(e&&"setTargetAtTime"===e.type){const n=this._events.getAfter(e.time),s=n?n.time:t+2,i=(s-t)/10;for(let e=t;e<s;e+=i)A.linearRampToValueAtTime(this.getValueAtTime(e),e)}return this._events.forEachAfter(this.context.currentTime,t=>{"cancelScheduledValues"===t.type?A.cancelScheduledValues(t.time):"setTargetAtTime"===t.type?A.setTargetAtTime(t.value,t.time,t.constant):A[t.type](t.value,t.time)}),this}setParam(A){uM(this._swappable,"The Param must be assigned as 'swappable' in the constructor");const t=this.input;return t.disconnect(this._param),this.apply(A),this._param=A,t.connect(this._param),this}dispose(){return super.dispose(),this._events.dispose(),this}get defaultValue(){return this._toType(this._param.defaultValue)}_exponentialApproach(A,t,e,n,s){return e+(t-e)*Math.exp(-(s-A)/n)}_linearInterpolate(A,t,e,n,s){return t+(s-A)/(e-A)*(n-t)}_exponentialInterpolate(A,t,e,n,s){return t*Math.pow(n/t,(s-A)/(e-A))}}class Dl extends Yl{constructor(){super(...arguments),this.name="ToneAudioNode",this._internalChannels=[]}get numberOfInputs(){return YM(this.input)?kM(this.input)||this.input instanceof Bl?1:this.input.numberOfInputs:0}get numberOfOutputs(){return YM(this.output)?this.output.numberOfOutputs:0}_isAudioNode(A){return YM(A)&&(A instanceof Dl||SM(A))}_getInternalNodes(){const A=this._internalChannels.slice(0);return this._isAudioNode(this.input)&&A.push(this.input),this._isAudioNode(this.output)&&this.input!==this.output&&A.push(this.output),A}_setChannelProperties(A){this._getInternalNodes().forEach(t=>{t.channelCount=A.channelCount,t.channelCountMode=A.channelCountMode,t.channelInterpretation=A.channelInterpretation})}_getChannelProperties(){const A=this._getInternalNodes();uM(A.length>0,"ToneAudioNode does not have any internal nodes");const t=A[0];return{channelCount:t.channelCount,channelCountMode:t.channelCountMode,channelInterpretation:t.channelInterpretation}}get channelCount(){return this._getChannelProperties().channelCount}set channelCount(A){const t=this._getChannelProperties();this._setChannelProperties(Object.assign(t,{channelCount:A}))}get channelCountMode(){return this._getChannelProperties().channelCountMode}set channelCountMode(A){const t=this._getChannelProperties();this._setChannelProperties(Object.assign(t,{channelCountMode:A}))}get channelInterpretation(){return this._getChannelProperties().channelInterpretation}set channelInterpretation(A){const t=this._getChannelProperties();this._setChannelProperties(Object.assign(t,{channelInterpretation:A}))}connect(A,t=0,e=0){return Cl(this,A,t,e),this}toDestination(){return this.connect(this.context.destination),this}toMaster(){return pM("toMaster() has been renamed toDestination()"),this.toDestination()}disconnect(A,t=0,e=0){return function(A,t,e=0,n=0){if(YM(t))for(;t instanceof Dl;)t=t.input;for(;!SM(A);)YM(A.output)&&(A=A.output);kM(t)?A.disconnect(t,e):SM(t)?A.disconnect(t,e,n):A.disconnect()}(this,A,t,e),this}chain(...A){return Gl(this,...A),this}fan(...A){return A.forEach(A=>this.connect(A)),this}dispose(){return super.dispose(),YM(this.input)&&(this.input instanceof Dl?this.input.dispose():SM(this.input)&&this.input.disconnect()),YM(this.output)&&(this.output instanceof Dl?this.output.dispose():SM(this.output)&&this.output.disconnect()),this._internalChannels=[],this}}function Gl(...A){const t=A.shift();A.reduce((A,t)=>(A instanceof Dl?A.connect(t):SM(A)&&Cl(A,t),t),t)}function Cl(A,t,e=0,n=0){for(uM(YM(A),"Cannot connect from undefined node"),uM(YM(t),"Cannot connect to undefined node"),(t instanceof Dl||SM(t))&&uM(t.numberOfInputs>0,"Cannot connect to node with no inputs"),uM(A.numberOfOutputs>0,"Cannot connect from node with no outputs");t instanceof Dl||t instanceof Bl;)YM(t.input)&&(t=t.input);for(;A instanceof Dl;)YM(A.output)&&(A=A.output);kM(t)?A.connect(t,e):A.connect(t,e,n)}class El extends Dl{constructor(){super(xM(El.getDefaults(),arguments,["gain","units"])),this.name="Gain",this._gainNode=this.context.createGain(),this.input=this._gainNode,this.output=this._gainNode;const A=xM(El.getDefaults(),arguments,["gain","units"]);this.gain=new Bl({context:this.context,convert:A.convert,param:this._gainNode.gain,units:A.units,value:A.gain,minValue:A.minValue,maxValue:A.maxValue}),$M(this,"gain")}static getDefaults(){return Object.assign(Dl.getDefaults(),{convert:!0,gain:1,units:"gain"})}dispose(){return super.dispose(),this._gainNode.disconnect(),this.gain.dispose(),this}}class Il extends Dl{constructor(A){super(A),this.onended=tl,this._startTime=-1,this._stopTime=-1,this._timeout=-1,this.output=new El({context:this.context,gain:0}),this._gainNode=this.output,this.getStateAtTime=function(A){const t=this.toSeconds(A);return-1!==this._startTime&&t>=this._startTime&&(-1===this._stopTime||t<=this._stopTime)?"started":"stopped"},this._fadeIn=A.fadeIn,this._fadeOut=A.fadeOut,this._curve=A.curve,this.onended=A.onended}static getDefaults(){return Object.assign(Dl.getDefaults(),{curve:"linear",fadeIn:0,fadeOut:0,onended:tl})}_startGain(A,t=1){uM(-1===this._startTime,"Source cannot be started more than once");const e=this.toSeconds(this._fadeIn);return this._startTime=A+e,this._startTime=Math.max(this._startTime,this.context.currentTime),e>0?(this._gainNode.gain.setValueAtTime(0,A),"linear"===this._curve?this._gainNode.gain.linearRampToValueAtTime(t,A+e):this._gainNode.gain.exponentialApproachValueAtTime(t,A,e)):this._gainNode.gain.setValueAtTime(t,A),this}stop(A){return this.log("stop",A),this._stopGain(this.toSeconds(A)),this}_stopGain(A){uM(-1!==this._startTime,"'start' must be called before 'stop'"),this.cancelStop();const t=this.toSeconds(this._fadeOut);return this._stopTime=this.toSeconds(A)+t,this._stopTime=Math.max(this._stopTime,this.context.currentTime),t>0?"linear"===this._curve?this._gainNode.gain.linearRampTo(0,t,A):this._gainNode.gain.targetRampTo(0,t,A):(this._gainNode.gain.cancelAndHoldAtTime(A),this._gainNode.gain.setValueAtTime(0,A)),this.context.clearTimeout(this._timeout),this._timeout=this.context.setTimeout(()=>{const A="exponential"===this._curve?2*t:0;this._stopSource(this.now()+A),this._onended()},this._stopTime-this.context.currentTime),this}_onended(){this.onended!==tl&&(this.onended(this),this.onended=tl,this.context.isOffline||setTimeout(()=>this.dispose(),1e3))}get state(){return this.getStateAtTime(this.now())}cancelStop(){return this.log("cancelStop"),uM(-1!==this._startTime,"Source is not started"),this._gainNode.gain.cancelScheduledValues(this._startTime+this.sampleTime),this.context.clearTimeout(this._timeout),this._stopTime=-1,this}dispose(){return super.dispose(),this._gainNode.disconnect(),this}}class yl extends Il{constructor(){super(xM(yl.getDefaults(),arguments,["offset"])),this.name="ToneConstantSource",this._source=this.context.createConstantSource();const A=xM(yl.getDefaults(),arguments,["offset"]);Cl(this._source,this._gainNode),this.offset=new Bl({context:this.context,convert:A.convert,param:this._source.offset,units:A.units,value:A.offset,minValue:A.minValue,maxValue:A.maxValue})}static getDefaults(){return Object.assign(Il.getDefaults(),{convert:!0,offset:1,units:"number"})}start(A){const t=this.toSeconds(A);return this.log("start",t),this._startGain(t),this._source.start(t),this}_stopSource(A){this._source.stop(A)}dispose(){return super.dispose(),"started"===this.state&&this.stop(),this._source.disconnect(),this.offset.dispose(),this}}class Ql extends Dl{constructor(){super(xM(Ql.getDefaults(),arguments,["value","units"])),this.name="Signal",this.override=!0;const A=xM(Ql.getDefaults(),arguments,["value","units"]);this.output=this._constantSource=new yl({context:this.context,convert:A.convert,offset:A.value,units:A.units,minValue:A.minValue,maxValue:A.maxValue}),this._constantSource.start(0),this.input=this._param=this._constantSource.offset}static getDefaults(){return Object.assign(Dl.getDefaults(),{convert:!0,units:"number",value:0})}connect(A,t=0,e=0){return Zl(this,A,t,e),this}dispose(){return super.dispose(),this._param.dispose(),this._constantSource.dispose(),this}setValueAtTime(A,t){return this._param.setValueAtTime(A,t),this}getValueAtTime(A){return this._param.getValueAtTime(A)}setRampPoint(A){return this._param.setRampPoint(A),this}linearRampToValueAtTime(A,t){return this._param.linearRampToValueAtTime(A,t),this}exponentialRampToValueAtTime(A,t){return this._param.exponentialRampToValueAtTime(A,t),this}exponentialRampTo(A,t,e){return this._param.exponentialRampTo(A,t,e),this}linearRampTo(A,t,e){return this._param.linearRampTo(A,t,e),this}targetRampTo(A,t,e){return this._param.targetRampTo(A,t,e),this}exponentialApproachValueAtTime(A,t,e){return this._param.exponentialApproachValueAtTime(A,t,e),this}setTargetAtTime(A,t,e){return this._param.setTargetAtTime(A,t,e),this}setValueCurveAtTime(A,t,e,n){return this._param.setValueCurveAtTime(A,t,e,n),this}cancelScheduledValues(A){return this._param.cancelScheduledValues(A),this}cancelAndHoldAtTime(A){return this._param.cancelAndHoldAtTime(A),this}rampTo(A,t,e){return this._param.rampTo(A,t,e),this}get value(){return this._param.value}set value(A){this._param.value=A}get convert(){return this._param.convert}set convert(A){this._param.convert=A}get units(){return this._param.units}get overridden(){return this._param.overridden}set overridden(A){this._param.overridden=A}get maxValue(){return this._param.maxValue}get minValue(){return this._param.minValue}apply(A){return this._param.apply(A),this}}function Zl(A,t,e,n){(t instanceof Bl||kM(t)||t instanceof Ql&&t.override)&&(t.cancelScheduledValues(0),t.setValueAtTime(0,0),t instanceof Ql&&(t.overridden=!0)),Cl(A,t,e,n)}class Tl extends Bl{constructor(){super(xM(Tl.getDefaults(),arguments,["value"])),this.name="TickParam",this._events=new fM(1/0),this._multiplier=1;const A=xM(Tl.getDefaults(),arguments,["value"]);this._multiplier=A.multiplier,this._events.cancel(0),this._events.add({ticks:0,time:0,type:"setValueAtTime",value:this._fromType(A.value)}),this.setValueAtTime(A.value,0)}static getDefaults(){return Object.assign(Bl.getDefaults(),{multiplier:1,units:"hertz",value:1})}setTargetAtTime(A,t,e){t=this.toSeconds(t),this.setRampPoint(t);const n=this._fromType(A),s=this._events.get(t),i=Math.round(Math.max(1/e,1));for(let o=0;o<=i;o++){const A=e*o+t,i=this._exponentialApproach(s.time,s.value,n,e,A);this.linearRampToValueAtTime(this._toType(i),A)}return this}setValueAtTime(A,t){const e=this.toSeconds(t);super.setValueAtTime(A,t);const n=this._events.get(e),s=this._events.previousEvent(n),i=this._getTicksUntilEvent(s,e);return n.ticks=Math.max(i,0),this}linearRampToValueAtTime(A,t){const e=this.toSeconds(t);super.linearRampToValueAtTime(A,t);const n=this._events.get(e),s=this._events.previousEvent(n),i=this._getTicksUntilEvent(s,e);return n.ticks=Math.max(i,0),this}exponentialRampToValueAtTime(A,t){t=this.toSeconds(t);const e=this._fromType(A),n=this._events.get(t),s=Math.round(Math.max(10*(t-n.time),1)),i=(t-n.time)/s;for(let o=0;o<=s;o++){const A=i*o+n.time,s=this._exponentialInterpolate(n.time,n.value,t,e,A);this.linearRampToValueAtTime(this._toType(s),A)}return this}_getTicksUntilEvent(A,t){if(null===A)A={ticks:0,time:0,type:"setValueAtTime",value:0};else if(wM(A.ticks)){const t=this._events.previousEvent(A);A.ticks=this._getTicksUntilEvent(t,A.time)}const e=this._fromType(this.getValueAtTime(A.time));let n=this._fromType(this.getValueAtTime(t));const s=this._events.get(t);return s&&s.time===t&&"setValueAtTime"===s.type&&(n=this._fromType(this.getValueAtTime(t-this.sampleTime))),.5*(t-A.time)*(e+n)+A.ticks}getTicksAtTime(A){const t=this.toSeconds(A),e=this._events.get(t);return Math.max(this._getTicksUntilEvent(e,t),0)}getDurationOfTicks(A,t){const e=this.toSeconds(t),n=this.getTicksAtTime(t);return this.getTimeOfTick(n+A)-e}getTimeOfTick(A){const t=this._events.get(A,"ticks"),e=this._events.getAfter(A,"ticks");if(t&&t.ticks===A)return t.time;if(t&&e&&"linearRampToValueAtTime"===e.type&&t.value!==e.value){const n=this._fromType(this.getValueAtTime(t.time)),s=(this._fromType(this.getValueAtTime(e.time))-n)/(e.time-t.time),i=Math.sqrt(Math.pow(n,2)-2*s*(t.ticks-A)),o=(-n+i)/s,r=(-n-i)/s;return(o>0?o:r)+t.time}return t?0===t.value?1/0:t.time+(A-t.ticks)/t.value:A/this._initialValue}ticksToTime(A,t){return this.getDurationOfTicks(A,t)}timeToTicks(A,t){const e=this.toSeconds(t),n=this.toSeconds(A),s=this.getTicksAtTime(e);return this.getTicksAtTime(e+n)-s}_fromType(A){return"bpm"===this.units&&this.multiplier?1/(60/A/this.multiplier):super._fromType(A)}_toType(A){return"bpm"===this.units&&this.multiplier?A/this.multiplier*60:super._toType(A)}get multiplier(){return this._multiplier}set multiplier(A){const t=this.value;this._multiplier=A,this.cancelScheduledValues(0),this.setValueAtTime(t,0)}}class kl extends Ql{constructor(){super(xM(kl.getDefaults(),arguments,["value"])),this.name="TickSignal";const A=xM(kl.getDefaults(),arguments,["value"]);this.input=this._param=new Tl({context:this.context,convert:A.convert,multiplier:A.multiplier,param:this._constantSource.offset,units:A.units,value:A.value})}static getDefaults(){return Object.assign(Ql.getDefaults(),{multiplier:1,units:"hertz",value:1})}ticksToTime(A,t){return this._param.ticksToTime(A,t)}timeToTicks(A,t){return this._param.timeToTicks(A,t)}getTimeOfTick(A){return this._param.getTimeOfTick(A)}getDurationOfTicks(A,t){return this._param.getDurationOfTicks(A,t)}getTicksAtTime(A){return this._param.getTicksAtTime(A)}get multiplier(){return this._param.multiplier}set multiplier(A){this._param.multiplier=A}dispose(){return super.dispose(),this._param.dispose(),this}}class Sl extends Yl{constructor(){super(xM(Sl.getDefaults(),arguments,["frequency"])),this.name="TickSource",this._state=new dl,this._tickOffset=new fM;const A=xM(Sl.getDefaults(),arguments,["frequency"]);this.frequency=new kl({context:this.context,units:A.units,value:A.frequency}),$M(this,"frequency"),this._state.setStateAtTime("stopped",0),this.setTicksAtTime(0,0)}static getDefaults(){return Object.assign({frequency:1,units:"hertz"},Yl.getDefaults())}get state(){return this.getStateAtTime(this.now())}start(A,t){const e=this.toSeconds(A);return"started"!==this._state.getValueAtTime(e)&&(this._state.setStateAtTime("started",e),YM(t)&&this.setTicksAtTime(t,e)),this}stop(A){const t=this.toSeconds(A);if("stopped"===this._state.getValueAtTime(t)){const A=this._state.get(t);A&&A.time>0&&(this._tickOffset.cancel(A.time),this._state.cancel(A.time))}return this._state.cancel(t),this._state.setStateAtTime("stopped",t),this.setTicksAtTime(0,t),this}pause(A){const t=this.toSeconds(A);return"started"===this._state.getValueAtTime(t)&&this._state.setStateAtTime("paused",t),this}cancel(A){return A=this.toSeconds(A),this._state.cancel(A),this._tickOffset.cancel(A),this}getTicksAtTime(A){const t=this.toSeconds(A),e=this._state.getLastState("stopped",t),n={state:"paused",time:t};this._state.add(n);let s=e,i=0;return this._state.forEachBetween(e.time,t+this.sampleTime,A=>{let t=s.time;const e=this._tickOffset.get(A.time);e&&e.time>=s.time&&(i=e.ticks,t=e.time),"started"===s.state&&"started"!==A.state&&(i+=this.frequency.getTicksAtTime(A.time)-this.frequency.getTicksAtTime(t)),s=A}),this._state.remove(n),i}get ticks(){return this.getTicksAtTime(this.now())}set ticks(A){this.setTicksAtTime(A,this.now())}get seconds(){return this.getSecondsAtTime(this.now())}set seconds(A){const t=this.now(),e=this.frequency.timeToTicks(A,t);this.setTicksAtTime(e,t)}getSecondsAtTime(A){A=this.toSeconds(A);const t=this._state.getLastState("stopped",A),e={state:"paused",time:A};this._state.add(e);let n=t,s=0;return this._state.forEachBetween(t.time,A+this.sampleTime,A=>{let t=n.time;const e=this._tickOffset.get(A.time);e&&e.time>=n.time&&(s=e.seconds,t=e.time),"started"===n.state&&"started"!==A.state&&(s+=A.time-t),n=A}),this._state.remove(e),s}setTicksAtTime(A,t){return t=this.toSeconds(t),this._tickOffset.cancel(t),this._tickOffset.add({seconds:this.frequency.getDurationOfTicks(A,t),ticks:A,time:t}),this}getStateAtTime(A){return A=this.toSeconds(A),this._state.getValueAtTime(A)}getTimeOfTick(A,t=this.now()){const e=this._tickOffset.get(t),n=this._state.get(t),s=Math.max(e.time,n.time),i=this.frequency.getTicksAtTime(s)+A-e.ticks;return this.frequency.getTimeOfTick(i)}forEachTickBetween(A,t,e){let n=this._state.get(A);this._state.forEachBetween(A,t,t=>{n&&"started"===n.state&&"started"!==t.state&&this.forEachTickBetween(Math.max(n.time,A),t.time-this.sampleTime,e),n=t});let s=null;if(n&&"started"===n.state){const o=Math.max(n.time,A),r=this.frequency.getTicksAtTime(o),a=r-this.frequency.getTicksAtTime(n.time);let c=Math.ceil(a)-a;c=FM(c,1)?0:c;let M=this.frequency.getTimeOfTick(r+c);for(;M<t;){try{e(M,Math.round(this.getTicksAtTime(M)))}catch(i){s=i;break}M+=this.frequency.getDurationOfTicks(1,M)}}if(s)throw s;return this}dispose(){return super.dispose(),this._state.dispose(),this._tickOffset.dispose(),this.frequency.dispose(),this}}class zl extends Yl{constructor(){super(xM(zl.getDefaults(),arguments,["callback","frequency"])),this.name="Clock",this.callback=tl,this._lastUpdate=0,this._state=new dl("stopped"),this._boundLoop=this._loop.bind(this);const A=xM(zl.getDefaults(),arguments,["callback","frequency"]);this.callback=A.callback,this._tickSource=new Sl({context:this.context,frequency:A.frequency,units:A.units}),this._lastUpdate=0,this.frequency=this._tickSource.frequency,$M(this,"frequency"),this._state.setStateAtTime("stopped",0),this.context.on("tick",this._boundLoop)}static getDefaults(){return Object.assign(Yl.getDefaults(),{callback:tl,frequency:1,units:"hertz"})}get state(){return this._state.getValueAtTime(this.now())}start(A,t){gM(this.context);const e=this.toSeconds(A);return this.log("start",e),"started"!==this._state.getValueAtTime(e)&&(this._state.setStateAtTime("started",e),this._tickSource.start(e,t),e<this._lastUpdate&&this.emit("start",e,t)),this}stop(A){const t=this.toSeconds(A);return this.log("stop",t),this._state.cancel(t),this._state.setStateAtTime("stopped",t),this._tickSource.stop(t),t<this._lastUpdate&&this.emit("stop",t),this}pause(A){const t=this.toSeconds(A);return"started"===this._state.getValueAtTime(t)&&(this._state.setStateAtTime("paused",t),this._tickSource.pause(t),t<this._lastUpdate&&this.emit("pause",t)),this}get ticks(){return Math.ceil(this.getTicksAtTime(this.now()))}set ticks(A){this._tickSource.ticks=A}get seconds(){return this._tickSource.seconds}set seconds(A){this._tickSource.seconds=A}getSecondsAtTime(A){return this._tickSource.getSecondsAtTime(A)}setTicksAtTime(A,t){return this._tickSource.setTicksAtTime(A,t),this}getTimeOfTick(A,t=this.now()){return this._tickSource.getTimeOfTick(A,t)}getTicksAtTime(A){return this._tickSource.getTicksAtTime(A)}nextTickTime(A,t){const e=this.toSeconds(t),n=this.getTicksAtTime(e);return this._tickSource.getTimeOfTick(n+A,e)}_loop(){const A=this._lastUpdate,t=this.now();this._lastUpdate=t,this.log("loop",A,t),A!==t&&(this._state.forEachBetween(A,t,A=>{switch(A.state){case"started":const t=this._tickSource.getTicksAtTime(A.time);this.emit("start",A.time,t);break;case"stopped":0!==A.time&&this.emit("stop",A.time);break;case"paused":this.emit("pause",A.time)}}),this._tickSource.forEachTickBetween(A,t,(A,t)=>{this.callback(A,t)}))}getStateAtTime(A){const t=this.toSeconds(A);return this._state.getValueAtTime(t)}dispose(){return super.dispose(),this.context.off("tick",this._boundLoop),this._tickSource.dispose(),this._state.dispose(),this}}PM.mixin(zl);class Ul extends RM{constructor(A){super(),this.name="TimelineValue",this._timeline=new fM({memory:10}),this._initialValue=A}set(A,t){return this._timeline.add({value:A,time:t}),this}get(A){const t=this._timeline.get(A);return t?t.value:this._initialValue}}class bl extends wl{constructor(){super(...arguments),this.name="Ticks",this.defaultUnits="i"}_now(){return this.context.transport.ticks}_beatsToUnits(A){return this._getPPQ()*A}_secondsToUnits(A){return Math.floor(A/(60/this._getBpm())*this._getPPQ())}_ticksToUnits(A){return A}toTicks(){return this.valueOf()}toSeconds(){return this.valueOf()/this._getPPQ()*(60/this._getBpm())}}class jl extends RM{constructor(){super(...arguments),this.name="IntervalTimeline",this._root=null,this._length=0}add(A){uM(YM(A.time),"Events must have a time property"),uM(YM(A.duration),"Events must have a duration parameter"),A.time=A.time.valueOf();let t=new Nl(A.time,A.time+A.duration,A);for(null===this._root?this._root=t:this._root.insert(t),this._length++;null!==t;)t.updateHeight(),t.updateMax(),this._rebalance(t),t=t.parent;return this}remove(A){if(null!==this._root){const t=[];this._root.search(A.time,t);for(const e of t)if(e.event===A){this._removeNode(e),this._length--;break}}return this}get length(){return this._length}cancel(A){return this.forEachFrom(A,A=>this.remove(A)),this}_setRoot(A){this._root=A,null!==this._root&&(this._root.parent=null)}_replaceNodeInParent(A,t){null!==A.parent?(A.isLeftChild()?A.parent.left=t:A.parent.right=t,this._rebalance(A.parent)):this._setRoot(t)}_removeNode(A){if(null===A.left&&null===A.right)this._replaceNodeInParent(A,null);else if(null===A.right)this._replaceNodeInParent(A,A.left);else if(null===A.left)this._replaceNodeInParent(A,A.right);else{let t,e=null;if(A.getBalance()>0)if(null===A.left.right)t=A.left,t.right=A.right,e=t;else{for(t=A.left.right;null!==t.right;)t=t.right;t.parent&&(t.parent.right=t.left,e=t.parent,t.left=A.left,t.right=A.right)}else if(null===A.right.left)t=A.right,t.left=A.left,e=t;else{for(t=A.right.left;null!==t.left;)t=t.left;t.parent&&(t.parent.left=t.right,e=t.parent,t.left=A.left,t.right=A.right)}null!==A.parent?A.isLeftChild()?A.parent.left=t:A.parent.right=t:this._setRoot(t),e&&this._rebalance(e)}A.dispose()}_rotateLeft(A){const t=A.parent,e=A.isLeftChild(),n=A.right;n&&(A.right=n.left,n.left=A),null!==t?e?t.left=n:t.right=n:this._setRoot(n)}_rotateRight(A){const t=A.parent,e=A.isLeftChild(),n=A.left;n&&(A.left=n.right,n.right=A),null!==t?e?t.left=n:t.right=n:this._setRoot(n)}_rebalance(A){const t=A.getBalance();t>1&&A.left?A.left.getBalance()<0?this._rotateLeft(A.left):this._rotateRight(A):t<-1&&A.right&&(A.right.getBalance()>0?this._rotateRight(A.right):this._rotateLeft(A))}get(A){if(null!==this._root){const t=[];if(this._root.search(A,t),t.length>0){let A=t[0];for(let e=1;e<t.length;e++)t[e].low>A.low&&(A=t[e]);return A.event}}return null}forEach(A){if(null!==this._root){const t=[];this._root.traverse(A=>t.push(A)),t.forEach(t=>{t.event&&A(t.event)})}return this}forEachAtTime(A,t){if(null!==this._root){const e=[];this._root.search(A,e),e.forEach(A=>{A.event&&t(A.event)})}return this}forEachFrom(A,t){if(null!==this._root){const e=[];this._root.searchAfter(A,e),e.forEach(A=>{A.event&&t(A.event)})}return this}dispose(){return super.dispose(),null!==this._root&&this._root.traverse(A=>A.dispose()),this._root=null,this}}class Nl{constructor(A,t,e){this._left=null,this._right=null,this.parent=null,this.height=0,this.event=e,this.low=A,this.high=t,this.max=this.high}insert(A){A.low<=this.low?null===this.left?this.left=A:this.left.insert(A):null===this.right?this.right=A:this.right.insert(A)}search(A,t){A>this.max||(null!==this.left&&this.left.search(A,t),this.low<=A&&this.high>A&&t.push(this),this.low>A||null!==this.right&&this.right.search(A,t))}searchAfter(A,t){this.low>=A&&(t.push(this),null!==this.left&&this.left.searchAfter(A,t)),null!==this.right&&this.right.searchAfter(A,t)}traverse(A){A(this),null!==this.left&&this.left.traverse(A),null!==this.right&&this.right.traverse(A)}updateHeight(){this.height=null!==this.left&&null!==this.right?Math.max(this.left.height,this.right.height)+1:null!==this.right?this.right.height+1:null!==this.left?this.left.height+1:0}updateMax(){this.max=this.high,null!==this.left&&(this.max=Math.max(this.max,this.left.max)),null!==this.right&&(this.max=Math.max(this.max,this.right.max))}getBalance(){let A=0;return null!==this.left&&null!==this.right?A=this.left.height-this.right.height:null!==this.left?A=this.left.height+1:null!==this.right&&(A=-(this.right.height+1)),A}isLeftChild(){return null!==this.parent&&this.parent.left===this}get left(){return this._left}set left(A){this._left=A,null!==A&&(A.parent=this),this.updateHeight(),this.updateMax()}get right(){return this._right}set right(A){this._right=A,null!==A&&(A.parent=this),this.updateHeight(),this.updateMax()}dispose(){this.parent=null,this._left=null,this._right=null,this.event=null}}class xl{constructor(A,t){this.id=xl._eventId++;const e=Object.assign(xl.getDefaults(),t);this.transport=A,this.callback=e.callback,this._once=e.once,this.time=e.time}static getDefaults(){return{callback:tl,once:!1,time:0}}invoke(A){this.callback&&(this.callback(A),this._once&&this.transport.clear(this.id))}dispose(){return this.callback=void 0,this}}xl._eventId=0;class Kl extends xl{constructor(A,t){super(A,t),this._currentId=-1,this._nextId=-1,this._nextTick=this.time,this._boundRestart=this._restart.bind(this);const e=Object.assign(Kl.getDefaults(),t);this.duration=new bl(A.context,e.duration).valueOf(),this._interval=new bl(A.context,e.interval).valueOf(),this._nextTick=e.time,this.transport.on("start",this._boundRestart),this.transport.on("loopStart",this._boundRestart),this.context=this.transport.context,this._restart()}static getDefaults(){return Object.assign({},xl.getDefaults(),{duration:1/0,interval:1,once:!1})}invoke(A){this._createEvents(A),super.invoke(A)}_createEvents(A){const t=this.transport.getTicksAtTime(A);t>=this.time&&t>=this._nextTick&&this._nextTick+this._interval<this.time+this.duration&&(this._nextTick+=this._interval,this._currentId=this._nextId,this._nextId=this.transport.scheduleOnce(this.invoke.bind(this),new bl(this.context,this._nextTick).toSeconds()))}_restart(A){this.transport.clear(this._currentId),this.transport.clear(this._nextId),this._nextTick=this.time;const t=this.transport.getTicksAtTime(A);t>this.time&&(this._nextTick=this.time+Math.ceil((t-this.time)/this._interval)*this._interval),this._currentId=this.transport.scheduleOnce(this.invoke.bind(this),new bl(this.context,this._nextTick).toSeconds()),this._nextTick+=this._interval,this._nextId=this.transport.scheduleOnce(this.invoke.bind(this),new bl(this.context,this._nextTick).toSeconds())}dispose(){return super.dispose(),this.transport.clear(this._currentId),this.transport.clear(this._nextId),this.transport.off("start",this._boundRestart),this.transport.off("loopStart",this._boundRestart),this}}class Jl extends Yl{constructor(){super(xM(Jl.getDefaults(),arguments)),this.name="Transport",this._loop=new Ul(!1),this._loopStart=0,this._loopEnd=0,this._scheduledEvents={},this._timeline=new fM,this._repeatedEvents=new jl,this._syncedSignals=[],this._swingAmount=0;const A=xM(Jl.getDefaults(),arguments);this._ppq=A.ppq,this._clock=new zl({callback:this._processTick.bind(this),context:this.context,frequency:0,units:"bpm"}),this._bindClockEvents(),this.bpm=this._clock.frequency,this._clock.frequency.multiplier=A.ppq,this.bpm.setValueAtTime(A.bpm,0),$M(this,"bpm"),this._timeSignature=A.timeSignature,this._swingTicks=A.ppq/2}static getDefaults(){return Object.assign(Yl.getDefaults(),{bpm:120,loopEnd:"4m",loopStart:0,ppq:192,swing:0,swingSubdivision:"8n",timeSignature:4})}_processTick(A,t){if(this._swingAmount>0&&t%this._ppq!=0&&t%(2*this._swingTicks)!=0){const e=Math.sin(t%(2*this._swingTicks)/(2*this._swingTicks)*Math.PI)*this._swingAmount;A+=new bl(this.context,2*this._swingTicks/3).toSeconds()*e}this._loop.get(A)&&t>=this._loopEnd&&(this.emit("loopEnd",A),this._clock.setTicksAtTime(this._loopStart,A),t=this._loopStart,this.emit("loopStart",A,this._clock.getSecondsAtTime(A)),this.emit("loop",A)),this._timeline.forEachAtTime(t,t=>t.invoke(A))}schedule(A,t){const e=new xl(this,{callback:A,time:new wl(this.context,t).toTicks()});return this._addEvent(e,this._timeline)}scheduleRepeat(A,t,e,n=1/0){const s=new Kl(this,{callback:A,duration:new hl(this.context,n).toTicks(),interval:new hl(this.context,t).toTicks(),time:new wl(this.context,e).toTicks()});return this._addEvent(s,this._repeatedEvents)}scheduleOnce(A,t){const e=new xl(this,{callback:A,once:!0,time:new wl(this.context,t).toTicks()});return this._addEvent(e,this._timeline)}clear(A){if(this._scheduledEvents.hasOwnProperty(A)){const t=this._scheduledEvents[A.toString()];t.timeline.remove(t.event),t.event.dispose(),delete this._scheduledEvents[A.toString()]}return this}_addEvent(A,t){return this._scheduledEvents[A.id.toString()]={event:A,timeline:t},t.add(A),A.id}cancel(A=0){const t=this.toTicks(A);return this._timeline.forEachFrom(t,A=>this.clear(A.id)),this._repeatedEvents.forEachFrom(t,A=>this.clear(A.id)),this}_bindClockEvents(){this._clock.on("start",(A,t)=>{t=new bl(this.context,t).toSeconds(),this.emit("start",A,t)}),this._clock.on("stop",A=>{this.emit("stop",A)}),this._clock.on("pause",A=>{this.emit("pause",A)})}get state(){return this._clock.getStateAtTime(this.now())}start(A,t){let e;return YM(t)&&(e=this.toTicks(t)),this._clock.start(A,e),this}stop(A){return this._clock.stop(A),this}pause(A){return this._clock.pause(A),this}toggle(A){return A=this.toSeconds(A),"started"!==this._clock.getStateAtTime(A)?this.start(A):this.stop(A),this}get timeSignature(){return this._timeSignature}set timeSignature(A){GM(A)&&(A=A[0]/A[1]*4),this._timeSignature=A}get loopStart(){return new hl(this.context,this._loopStart,"i").toSeconds()}set loopStart(A){this._loopStart=this.toTicks(A)}get loopEnd(){return new hl(this.context,this._loopEnd,"i").toSeconds()}set loopEnd(A){this._loopEnd=this.toTicks(A)}get loop(){return this._loop.get(this.now())}set loop(A){this._loop.set(A,this.now())}setLoopPoints(A,t){return this.loopStart=A,this.loopEnd=t,this}get swing(){return this._swingAmount}set swing(A){this._swingAmount=A}get swingSubdivision(){return new bl(this.context,this._swingTicks).toNotation()}set swingSubdivision(A){this._swingTicks=this.toTicks(A)}get position(){const A=this.now(),t=this._clock.getTicksAtTime(A);return new bl(this.context,t).toBarsBeatsSixteenths()}set position(A){const t=this.toTicks(A);this.ticks=t}get seconds(){return this._clock.seconds}set seconds(A){const t=this.now(),e=this._clock.frequency.timeToTicks(A,t);this.ticks=e}get progress(){if(this.loop){const A=this.now();return(this._clock.getTicksAtTime(A)-this._loopStart)/(this._loopEnd-this._loopStart)}return 0}get ticks(){return this._clock.ticks}set ticks(A){if(this._clock.ticks!==A){const t=this.now();if("started"===this.state){const e=this._clock.getTicksAtTime(t),n=this._clock.getTimeOfTick(Math.ceil(e));this.emit("stop",n),this._clock.setTicksAtTime(A,n),this.emit("start",n,this._clock.getSecondsAtTime(n))}else this._clock.setTicksAtTime(A,t)}}getTicksAtTime(A){return Math.round(this._clock.getTicksAtTime(A))}getSecondsAtTime(A){return this._clock.getSecondsAtTime(A)}get PPQ(){return this._clock.frequency.multiplier}set PPQ(A){this._clock.frequency.multiplier=A}nextSubdivision(A){if(A=this.toTicks(A),"started"!==this.state)return 0;{const t=this.now(),e=this.getTicksAtTime(t);return this._clock.nextTickTime(A-e%A,t)}}syncSignal(A,t){if(!t){const e=this.now();if(0!==A.getValueAtTime(e)){const n=1/(60/this.bpm.getValueAtTime(e)/this.PPQ);t=A.getValueAtTime(e)/n}else t=0}const e=new El(t);return this.bpm.connect(e),e.connect(A._param),this._syncedSignals.push({initial:A.value,ratio:e,signal:A}),A.value=0,this}unsyncSignal(A){for(let t=this._syncedSignals.length-1;t>=0;t--){const e=this._syncedSignals[t];e.signal===A&&(e.ratio.dispose(),e.signal.value=e.initial,this._syncedSignals.splice(t,1))}return this}dispose(){return super.dispose(),this._clock.dispose(),Al(this,"bpm"),this._timeline.dispose(),this._repeatedEvents.dispose(),this}}PM.mixin(Jl),LM(A=>{A.transport=new Jl({context:A})}),vM(A=>{A.transport.dispose()});class Rl extends Dl{constructor(){super(xM(Rl.getDefaults(),arguments,["volume"])),this.name="Volume";const A=xM(Rl.getDefaults(),arguments,["volume"]);this.input=this.output=new El({context:this.context,gain:A.volume,units:"decibels"}),this.volume=this.output.gain,$M(this,"volume"),this._unmutedVolume=A.volume,this.mute=A.mute}static getDefaults(){return Object.assign(Dl.getDefaults(),{mute:!1,volume:0})}get mute(){return this.volume.value===-1/0}set mute(A){!this.mute&&A?(this._unmutedVolume=this.volume.value,this.volume.value=-1/0):this.mute&&!A&&(this.volume.value=this._unmutedVolume)}dispose(){return super.dispose(),this.input.dispose(),this.volume.dispose(),this}}class Wl extends Dl{constructor(){super(xM(Wl.getDefaults(),arguments)),this.name="Destination",this.input=new Rl({context:this.context}),this.output=new El({context:this.context}),this.volume=this.input.volume;const A=xM(Wl.getDefaults(),arguments);Gl(this.input,this.output,this.context.rawContext.destination),this.mute=A.mute,this._internalChannels=[this.input,this.context.rawContext.destination,this.output]}static getDefaults(){return Object.assign(Dl.getDefaults(),{mute:!1,volume:0})}get mute(){return this.input.mute}set mute(A){this.input.mute=A}chain(...A){return this.input.disconnect(),A.unshift(this.input),A.push(this.output),Gl(...A),this}get maxChannelCount(){return this.context.rawContext.destination.maxChannelCount}dispose(){return super.dispose(),this.volume.dispose(),this}}LM(A=>{A.destination=new Wl({context:A})}),vM(A=>{A.destination.dispose()});class Ol extends RM{constructor(){super(),this.name="ToneAudioBuffers",this._buffers=new Map,this._loadingCount=0;const A=xM(Ol.getDefaults(),arguments,["urls","onload","baseUrl"],"urls");this.baseUrl=A.baseUrl,Object.keys(A.urls).forEach(t=>{this._loadingCount++,this.add(t,A.urls[t],this._bufferLoaded.bind(this,A.onload),A.onerror)})}static getDefaults(){return{baseUrl:"",onerror:tl,onload:tl,urls:{}}}has(A){return this._buffers.has(A.toString())}get(A){return uM(this.has(A),"ToneAudioBuffers has no buffer named: "+A),this._buffers.get(A.toString())}_bufferLoaded(A){this._loadingCount--,0===this._loadingCount&&A&&A()}get loaded(){return Array.from(this._buffers).every(([A,t])=>t.loaded)}add(A,t,e=tl,n=tl){return CM(t)?this._buffers.set(A.toString(),new el(this.baseUrl+t,e,n)):this._buffers.set(A.toString(),new el(t,e,n)),this}dispose(){return super.dispose(),this._buffers.forEach(A=>A.dispose()),this._buffers.clear(),this}}class ql extends gl{constructor(){super(...arguments),this.name="MidiClass",this.defaultUnits="midi"}_frequencyToUnits(A){return cl(super._frequencyToUnits(A))}_ticksToUnits(A){return cl(super._ticksToUnits(A))}_beatsToUnits(A){return cl(super._beatsToUnits(A))}_secondsToUnits(A){return cl(super._secondsToUnits(A))}toMidi(){return this.valueOf()}toFrequency(){return ll(this.toMidi())}transpose(A){return new ql(this.context,this.toMidi()+A)}}class Fl extends Yl{constructor(){super(...arguments),this.name="Draw",this.expiration=.25,this.anticipation=.008,this._events=new fM,this._boundDrawLoop=this._drawLoop.bind(this),this._animationFrame=-1}schedule(A,t){return this._events.add({callback:A,time:this.toSeconds(t)}),1===this._events.length&&(this._animationFrame=requestAnimationFrame(this._boundDrawLoop)),this}cancel(A){return this._events.cancel(this.toSeconds(A)),this}_drawLoop(){const A=this.context.currentTime;for(;this._events.length&&this._events.peek().time-this.anticipation<=A;){const t=this._events.shift();t&&A-t.time<=this.expiration&&t.callback()}this._events.length>0&&(this._animationFrame=requestAnimationFrame(this._boundDrawLoop))}dispose(){return super.dispose(),this._events.dispose(),cancelAnimationFrame(this._animationFrame),this}}LM(A=>{A.draw=new Fl({context:A})}),vM(A=>{A.draw.dispose()}),e("VYZo");class fl extends Dl{constructor(A){super(A),this.input=void 0,this._state=new dl("stopped"),this._synced=!1,this._scheduled=[],this._syncedStart=tl,this._syncedStop=tl,this._state.memory=100,this._state.increasing=!0,this._volume=this.output=new Rl({context:this.context,mute:A.mute,volume:A.volume}),this.volume=this._volume.volume,$M(this,"volume"),this.onstop=A.onstop}static getDefaults(){return Object.assign(Dl.getDefaults(),{mute:!1,onstop:tl,volume:0})}get state(){return this._synced?"started"===this.context.transport.state?this._state.getValueAtTime(this.context.transport.seconds):"stopped":this._state.getValueAtTime(this.now())}get mute(){return this._volume.mute}set mute(A){this._volume.mute=A}_clampToCurrentTime(A){return this._synced?A:Math.max(A,this.context.currentTime)}start(A,t,e){let n=wM(A)&&this._synced?this.context.transport.seconds:this.toSeconds(A);if(n=this._clampToCurrentTime(n),this._synced||"started"!==this._state.getValueAtTime(n))if(this.log("start",n),this._state.setStateAtTime("started",n),this._synced){const A=this._state.get(n);A&&(A.offset=this.toSeconds(KM(t,0)),A.duration=e?this.toSeconds(e):void 0);const s=this.context.transport.schedule(A=>{this._start(A,t,e)},n);this._scheduled.push(s),"started"===this.context.transport.state&&this.context.transport.getSecondsAtTime(this.immediate())>n&&this._syncedStart(this.now(),this.context.transport.seconds)}else gM(this.context),this._start(n,t,e);else uM(WM(n,this._state.get(n).time),"Start time must be strictly greater than previous start time"),this._state.cancel(n),this._state.setStateAtTime("started",n),this.log("restart",n),this.restart(n,t,e);return this}stop(A){let t=wM(A)&&this._synced?this.context.transport.seconds:this.toSeconds(A);if(t=this._clampToCurrentTime(t),"started"===this._state.getValueAtTime(t)||YM(this._state.getNextState("started",t))){if(this.log("stop",t),this._synced){const A=this.context.transport.schedule(this._stop.bind(this),t);this._scheduled.push(A)}else this._stop(t);this._state.cancel(t),this._state.setStateAtTime("stopped",t)}return this}restart(A,t,e){return A=this.toSeconds(A),"started"===this._state.getValueAtTime(A)&&(this._state.cancel(A),this._restart(A,t,e)),this}sync(){return this._synced||(this._synced=!0,this._syncedStart=(A,t)=>{if(t>0){const e=this._state.get(t);if(e&&"started"===e.state&&e.time!==t){const n=t-this.toSeconds(e.time);let s;e.duration&&(s=this.toSeconds(e.duration)-n),this._start(A,this.toSeconds(e.offset)+n,s)}}},this._syncedStop=A=>{const t=this.context.transport.getSecondsAtTime(Math.max(A-this.sampleTime,0));"started"===this._state.getValueAtTime(t)&&this._stop(A)},this.context.transport.on("start",this._syncedStart),this.context.transport.on("loopStart",this._syncedStart),this.context.transport.on("stop",this._syncedStop),this.context.transport.on("pause",this._syncedStop),this.context.transport.on("loopEnd",this._syncedStop)),this}unsync(){return this._synced&&(this.context.transport.off("stop",this._syncedStop),this.context.transport.off("pause",this._syncedStop),this.context.transport.off("loopEnd",this._syncedStop),this.context.transport.off("start",this._syncedStart),this.context.transport.off("loopStart",this._syncedStart)),this._synced=!1,this._scheduled.forEach(A=>this.context.transport.clear(A)),this._scheduled=[],this._state.cancel(0),this._stop(0),this}dispose(){return super.dispose(),this.onstop=tl,this.unsync(),this._volume.dispose(),this._state.dispose(),this}}class Vl extends Il{constructor(){super(xM(Vl.getDefaults(),arguments,["url","onload"])),this.name="ToneBufferSource",this._source=this.context.createBufferSource(),this._internalChannels=[this._source],this._sourceStarted=!1,this._sourceStopped=!1;const A=xM(Vl.getDefaults(),arguments,["url","onload"]);Cl(this._source,this._gainNode),this._source.onended=()=>this._stopSource(),this.playbackRate=new Bl({context:this.context,param:this._source.playbackRate,units:"positive",value:A.playbackRate}),this.loop=A.loop,this.loopStart=A.loopStart,this.loopEnd=A.loopEnd,this._buffer=new el(A.url,A.onload,A.onerror),this._internalChannels.push(this._source)}static getDefaults(){return Object.assign(Il.getDefaults(),{url:new el,loop:!1,loopEnd:0,loopStart:0,onload:tl,onerror:tl,playbackRate:1})}get fadeIn(){return this._fadeIn}set fadeIn(A){this._fadeIn=A}get fadeOut(){return this._fadeOut}set fadeOut(A){this._fadeOut=A}get curve(){return this._curve}set curve(A){this._curve=A}start(A,t,e,n=1){uM(this.buffer.loaded,"buffer is either not set or not loaded");const s=this.toSeconds(A);this._startGain(s,n),t=KM(t,this.loop?this.loopStart:0);let i=Math.max(this.toSeconds(t),0);if(this.loop){const A=this.toSeconds(this.loopEnd)||this.buffer.duration,t=this.toSeconds(this.loopStart),e=A-t;OM(i,A)&&(i=(i-t)%e+t),FM(i,this.buffer.duration)&&(i=0)}if(this._source.buffer=this.buffer.get(),this._source.loopEnd=this.toSeconds(this.loopEnd)||this.buffer.duration,qM(i,this.buffer.duration)&&(this._sourceStarted=!0,this._source.start(s,i)),YM(e)){let A=this.toSeconds(e);A=Math.max(A,0),this.stop(s+A)}return this}_stopSource(A){!this._sourceStopped&&this._sourceStarted&&(this._sourceStopped=!0,this._source.stop(this.toSeconds(A)),this._onended())}get loopStart(){return this._source.loopStart}set loopStart(A){this._source.loopStart=this.toSeconds(A)}get loopEnd(){return this._source.loopEnd}set loopEnd(A){this._source.loopEnd=this.toSeconds(A)}get buffer(){return this._buffer}set buffer(A){this._buffer.set(A)}get loop(){return this._source.loop}set loop(A){this._source.loop=A,this._sourceStarted&&this.cancelStop()}dispose(){return super.dispose(),this._source.onended=null,this._source.disconnect(),this._buffer.dispose(),this.playbackRate.dispose(),this}}class Ll extends fl{constructor(){super(xM(Ll.getDefaults(),arguments,["type"])),this.name="Noise",this._source=null;const A=xM(Ll.getDefaults(),arguments,["type"]);this._playbackRate=A.playbackRate,this.type=A.type,this._fadeIn=A.fadeIn,this._fadeOut=A.fadeOut}static getDefaults(){return Object.assign(fl.getDefaults(),{fadeIn:0,fadeOut:0,playbackRate:1,type:"white"})}get type(){return this._type}set type(A){if(uM(A in vl,"Noise: invalid type: "+A),this._type!==A&&(this._type=A,"started"===this.state)){const A=this.now();this._stop(A),this._start(A)}}get playbackRate(){return this._playbackRate}set playbackRate(A){this._playbackRate=A,this._source&&(this._source.playbackRate.value=A)}_start(A){const t=vl[this._type];this._source=new Vl({url:t,context:this.context,fadeIn:this._fadeIn,fadeOut:this._fadeOut,loop:!0,onended:()=>this.onstop(this),playbackRate:this._playbackRate}).connect(this.output),this._source.start(this.toSeconds(A),Math.random()*(t.duration-.001))}_stop(A){this._source&&(this._source.stop(this.toSeconds(A)),this._source=null)}get fadeIn(){return this._fadeIn}set fadeIn(A){this._fadeIn=A,this._source&&(this._source.fadeIn=this._fadeIn)}get fadeOut(){return this._fadeOut}set fadeOut(A){this._fadeOut=A,this._source&&(this._source.fadeOut=this._fadeOut)}_restart(A){this._stop(A),this._start(A)}dispose(){return super.dispose(),this._source&&this._source.disconnect(),this}}const Hl={brown:null,pink:null,white:null},vl={get brown(){if(!Hl.brown){const A=[];for(let t=0;t<2;t++){const e=new Float32Array(220500);A[t]=e;let n=0;for(let A=0;A<220500;A++){const t=2*Math.random()-1;e[A]=(n+.02*t)/1.02,n=e[A],e[A]*=3.5}}Hl.brown=(new el).fromArray(A)}return Hl.brown},get pink(){if(!Hl.pink){const A=[];for(let t=0;t<2;t++){const e=new Float32Array(220500);let n,s,i,o,r,a,c;A[t]=e,n=s=i=o=r=a=c=0;for(let A=0;A<220500;A++){const t=2*Math.random()-1;n=.99886*n+.0555179*t,s=.99332*s+.0750759*t,i=.969*i+.153852*t,o=.8665*o+.3104856*t,r=.55*r+.5329522*t,a=-.7616*a-.016898*t,e[A]=n+s+i+o+r+a+c+.5362*t,e[A]*=.11,c=.115926*t}}Hl.pink=(new el).fromArray(A)}return Hl.pink},get white(){if(!Hl.white){const A=[];for(let t=0;t<2;t++){const e=new Float32Array(220500);A[t]=e;for(let A=0;A<220500;A++)e[A]=2*Math.random()-1}Hl.white=(new el).fromArray(A)}return Hl.white}};function Pl(A,t){return ZM(this,void 0,void 0,(function*(){const e=t/A.context.sampleRate,n=new nl(1,e,A.context.sampleRate);return new A.constructor(Object.assign(A.get(),{frequency:2/e,detune:0,context:n})).toDestination().start(0),(yield n.render()).getChannelData(0)}))}class Xl extends Il{constructor(){super(xM(Xl.getDefaults(),arguments,["frequency","type"])),this.name="ToneOscillatorNode",this._oscillator=this.context.createOscillator(),this._internalChannels=[this._oscillator];const A=xM(Xl.getDefaults(),arguments,["frequency","type"]);Cl(this._oscillator,this._gainNode),this.type=A.type,this.frequency=new Bl({context:this.context,param:this._oscillator.frequency,units:"frequency",value:A.frequency}),this.detune=new Bl({context:this.context,param:this._oscillator.detune,units:"cents",value:A.detune}),$M(this,["frequency","detune"])}static getDefaults(){return Object.assign(Il.getDefaults(),{detune:0,frequency:440,type:"sine"})}start(A){const t=this.toSeconds(A);return this.log("start",t),this._startGain(t),this._oscillator.start(t),this}_stopSource(A){this._oscillator.stop(A)}setPeriodicWave(A){return this._oscillator.setPeriodicWave(A),this}get type(){return this._oscillator.type}set type(A){this._oscillator.type=A}dispose(){return super.dispose(),"started"===this.state&&this.stop(),this._oscillator.disconnect(),this.frequency.dispose(),this.detune.dispose(),this}}class _l extends fl{constructor(){super(xM(_l.getDefaults(),arguments,["frequency","type"])),this.name="Oscillator",this._oscillator=null;const A=xM(_l.getDefaults(),arguments,["frequency","type"]);this.frequency=new Ql({context:this.context,units:"frequency",value:A.frequency}),$M(this,"frequency"),this.detune=new Ql({context:this.context,units:"cents",value:A.detune}),$M(this,"detune"),this._partials=A.partials,this._partialCount=A.partialCount,this._type=A.type,A.partialCount&&"custom"!==A.type&&(this._type=this.baseType+A.partialCount.toString()),this.phase=A.phase}static getDefaults(){return Object.assign(fl.getDefaults(),{detune:0,frequency:440,partialCount:0,partials:[],phase:0,type:"sine"})}_start(A){const t=this.toSeconds(A),e=new Xl({context:this.context,onended:()=>this.onstop(this)});this._oscillator=e,this._wave?this._oscillator.setPeriodicWave(this._wave):this._oscillator.type=this._type,this._oscillator.connect(this.output),this.frequency.connect(this._oscillator.frequency),this.detune.connect(this._oscillator.detune),this._oscillator.start(t)}_stop(A){const t=this.toSeconds(A);this._oscillator&&this._oscillator.stop(t)}_restart(A){const t=this.toSeconds(A);return this.log("restart",t),this._oscillator&&this._oscillator.cancelStop(),this._state.cancel(t),this}syncFrequency(){return this.context.transport.syncSignal(this.frequency),this}unsyncFrequency(){return this.context.transport.unsyncSignal(this.frequency),this}_getCachedPeriodicWave(){if("custom"===this._type)return _l._periodicWaveCache.find(A=>{return A.phase===this._phase&&(t=A.partials).length===(e=this._partials).length&&t.every((A,t)=>e[t]===A);var t,e});{const A=_l._periodicWaveCache.find(A=>A.type===this._type&&A.phase===this._phase);return this._partialCount=A?A.partialCount:this._partialCount,A}}get type(){return this._type}set type(A){this._type=A;const t=-1!==["sine","square","sawtooth","triangle"].indexOf(A);if(0===this._phase&&t)this._wave=void 0,this._partialCount=0,null!==this._oscillator&&(this._oscillator.type=A);else{const t=this._getCachedPeriodicWave();if(YM(t)){const{partials:A,wave:e}=t;this._wave=e,this._partials=A,null!==this._oscillator&&this._oscillator.setPeriodicWave(this._wave)}else{const[t,e]=this._getRealImaginary(A,this._phase),n=this.context.createPeriodicWave(t,e);this._wave=n,null!==this._oscillator&&this._oscillator.setPeriodicWave(this._wave),_l._periodicWaveCache.push({imag:e,partialCount:this._partialCount,partials:this._partials,phase:this._phase,real:t,type:this._type,wave:this._wave}),_l._periodicWaveCache.length>100&&_l._periodicWaveCache.shift()}}}get baseType(){return this._type.replace(this.partialCount.toString(),"")}set baseType(A){this.type=this.partialCount&&"custom"!==this._type&&"custom"!==A?A+this.partialCount:A}get partialCount(){return this._partialCount}set partialCount(A){hM(A,0);let t=this._type;const e=/^(sine|triangle|square|sawtooth)(\d+)$/.exec(this._type);if(e&&(t=e[1]),"custom"!==this._type)this.type=0===A?t:t+A.toString();else{const t=new Float32Array(A);this._partials.forEach((A,e)=>t[e]=A),this._partials=Array.from(t),this.type=this._type}}_getRealImaginary(A,t){let e=2048;const n=new Float32Array(e),s=new Float32Array(e);let i=1;if("custom"===A){if(i=this._partials.length+1,this._partialCount=this._partials.length,e=i,0===this._partials.length)return[n,s]}else{const t=/^(sine|triangle|square|sawtooth)(\d+)$/.exec(A);t?(i=parseInt(t[2],10)+1,this._partialCount=parseInt(t[2],10),A=t[1],i=Math.max(i,2),e=i):this._partialCount=0,this._partials=[]}for(let o=1;o<e;++o){const e=2/(o*Math.PI);let r;switch(A){case"sine":r=o<=i?1:0,this._partials[o-1]=r;break;case"square":r=1&o?2*e:0,this._partials[o-1]=r;break;case"sawtooth":r=e*(1&o?1:-1),this._partials[o-1]=r;break;case"triangle":r=1&o?e*e*2*(o-1>>1&1?-1:1):0,this._partials[o-1]=r;break;case"custom":r=this._partials[o-1];break;default:throw new TypeError("Oscillator: invalid type: "+A)}0!==r?(n[o]=-r*Math.sin(t*o),s[o]=r*Math.cos(t*o)):(n[o]=0,s[o]=0)}return[n,s]}_inverseFFT(A,t,e){let n=0;const s=A.length;for(let i=0;i<s;i++)n+=A[i]*Math.cos(i*e)+t[i]*Math.sin(i*e);return n}getInitialValue(){const[A,t]=this._getRealImaginary(this._type,0);let e=0;const n=2*Math.PI;for(let i=0;i<32;i++)e=Math.max(this._inverseFFT(A,t,i/32*n),e);return s=-this._inverseFFT(A,t,this._phase)/e,-1,Math.max(Math.min(s,1),-1);var s}get partials(){return this._partials.slice(0,this.partialCount)}set partials(A){this._partials=A,this._partialCount=this._partials.length,A.length&&(this.type="custom")}get phase(){return this._phase*(180/Math.PI)}set phase(A){this._phase=A*Math.PI/180,this.type=this._type}asArray(A=1024){return ZM(this,void 0,void 0,(function*(){return Pl(this,A)}))}dispose(){return super.dispose(),null!==this._oscillator&&this._oscillator.dispose(),this._wave=void 0,this.frequency.dispose(),this.detune.dispose(),this}}_l._periodicWaveCache=[];class $l extends Dl{constructor(){super(Object.assign(xM($l.getDefaults(),arguments,["context"])))}connect(A,t=0,e=0){return Zl(this,A,t,e),this}}class Au extends $l{constructor(){super(Object.assign(xM(Au.getDefaults(),arguments,["mapping","length"]))),this.name="WaveShaper",this._shaper=this.context.createWaveShaper(),this.input=this._shaper,this.output=this._shaper;const A=xM(Au.getDefaults(),arguments,["mapping","length"]);GM(A.mapping)||A.mapping instanceof Float32Array?this.curve=Float32Array.from(A.mapping):"function"==typeof A.mapping&&this.setMap(A.mapping,A.length)}static getDefaults(){return Object.assign(Ql.getDefaults(),{length:1024})}setMap(A,t=1024){const e=new Float32Array(t);for(let n=0,s=t;n<s;n++)e[n]=A(n/(s-1)*2-1,n);return this.curve=e,this}get curve(){return this._shaper.curve}set curve(A){this._shaper.curve=A}get oversample(){return this._shaper.oversample}set oversample(A){uM(["none","2x","4x"].some(t=>t.includes(A)),"oversampling must be either 'none', '2x', or '4x'"),this._shaper.oversample=A}dispose(){return super.dispose(),this._shaper.disconnect(),this}}class tu extends $l{constructor(){super(...arguments),this.name="AudioToGain",this._norm=new Au({context:this.context,mapping:A=>(A+1)/2}),this.input=this._norm,this.output=this._norm}dispose(){return super.dispose(),this._norm.dispose(),this}}class eu extends Ql{constructor(){super(Object.assign(xM(eu.getDefaults(),arguments,["value"]))),this.name="Multiply",this.override=!1;const A=xM(eu.getDefaults(),arguments,["value"]);this._mult=this.input=this.output=new El({context:this.context,minValue:A.minValue,maxValue:A.maxValue}),this.factor=this._param=this._mult.gain,this.factor.setValueAtTime(A.value,0)}static getDefaults(){return Object.assign(Ql.getDefaults(),{value:0})}dispose(){return super.dispose(),this._mult.dispose(),this}}class nu extends fl{constructor(){super(xM(nu.getDefaults(),arguments,["frequency","type","modulationType"])),this.name="AMOscillator",this._modulationScale=new tu({context:this.context}),this._modulationNode=new El({context:this.context});const A=xM(nu.getDefaults(),arguments,["frequency","type","modulationType"]);this._carrier=new _l({context:this.context,detune:A.detune,frequency:A.frequency,onstop:()=>this.onstop(this),phase:A.phase,type:A.type}),this.frequency=this._carrier.frequency,this.detune=this._carrier.detune,this._modulator=new _l({context:this.context,phase:A.phase,type:A.modulationType}),this.harmonicity=new eu({context:this.context,units:"positive",value:A.harmonicity}),this.frequency.chain(this.harmonicity,this._modulator.frequency),this._modulator.chain(this._modulationScale,this._modulationNode.gain),this._carrier.chain(this._modulationNode,this.output),$M(this,["frequency","detune","harmonicity"])}static getDefaults(){return Object.assign(_l.getDefaults(),{harmonicity:1,modulationType:"square"})}_start(A){this._modulator.start(A),this._carrier.start(A)}_stop(A){this._modulator.stop(A),this._carrier.stop(A)}_restart(A){this._modulator.restart(A),this._carrier.restart(A)}get type(){return this._carrier.type}set type(A){this._carrier.type=A}get baseType(){return this._carrier.baseType}set baseType(A){this._carrier.baseType=A}get partialCount(){return this._carrier.partialCount}set partialCount(A){this._carrier.partialCount=A}get modulationType(){return this._modulator.type}set modulationType(A){this._modulator.type=A}get phase(){return this._carrier.phase}set phase(A){this._carrier.phase=A,this._modulator.phase=A}get partials(){return this._carrier.partials}set partials(A){this._carrier.partials=A}asArray(A=1024){return ZM(this,void 0,void 0,(function*(){return Pl(this,A)}))}dispose(){return super.dispose(),this.frequency.dispose(),this.detune.dispose(),this.harmonicity.dispose(),this._carrier.dispose(),this._modulator.dispose(),this._modulationNode.dispose(),this._modulationScale.dispose(),this}}class su extends fl{constructor(){super(xM(su.getDefaults(),arguments,["frequency","type","modulationType"])),this.name="FMOscillator",this._modulationNode=new El({context:this.context,gain:0});const A=xM(su.getDefaults(),arguments,["frequency","type","modulationType"]);this._carrier=new _l({context:this.context,detune:A.detune,frequency:0,onstop:()=>this.onstop(this),phase:A.phase,type:A.type}),this.detune=this._carrier.detune,this.frequency=new Ql({context:this.context,units:"frequency",value:A.frequency}),this._modulator=new _l({context:this.context,phase:A.phase,type:A.modulationType}),this.harmonicity=new eu({context:this.context,units:"positive",value:A.harmonicity}),this.modulationIndex=new eu({context:this.context,units:"positive",value:A.modulationIndex}),this.frequency.connect(this._carrier.frequency),this.frequency.chain(this.harmonicity,this._modulator.frequency),this.frequency.chain(this.modulationIndex,this._modulationNode),this._modulator.connect(this._modulationNode.gain),this._modulationNode.connect(this._carrier.frequency),this._carrier.connect(this.output),this.detune.connect(this._modulator.detune),$M(this,["modulationIndex","frequency","detune","harmonicity"])}static getDefaults(){return Object.assign(_l.getDefaults(),{harmonicity:1,modulationIndex:2,modulationType:"square"})}_start(A){this._modulator.start(A),this._carrier.start(A)}_stop(A){this._modulator.stop(A),this._carrier.stop(A)}_restart(A){return this._modulator.restart(A),this._carrier.restart(A),this}get type(){return this._carrier.type}set type(A){this._carrier.type=A}get baseType(){return this._carrier.baseType}set baseType(A){this._carrier.baseType=A}get partialCount(){return this._carrier.partialCount}set partialCount(A){this._carrier.partialCount=A}get modulationType(){return this._modulator.type}set modulationType(A){this._modulator.type=A}get phase(){return this._carrier.phase}set phase(A){this._carrier.phase=A,this._modulator.phase=A}get partials(){return this._carrier.partials}set partials(A){this._carrier.partials=A}asArray(A=1024){return ZM(this,void 0,void 0,(function*(){return Pl(this,A)}))}dispose(){return super.dispose(),this.frequency.dispose(),this.harmonicity.dispose(),this._carrier.dispose(),this._modulator.dispose(),this._modulationNode.dispose(),this.modulationIndex.dispose(),this}}class iu extends fl{constructor(){super(xM(iu.getDefaults(),arguments,["frequency","width"])),this.name="PulseOscillator",this._widthGate=new El({context:this.context,gain:0}),this._thresh=new Au({context:this.context,mapping:A=>A<=0?-1:1});const A=xM(iu.getDefaults(),arguments,["frequency","width"]);this.width=new Ql({context:this.context,units:"audioRange",value:A.width}),this._triangle=new _l({context:this.context,detune:A.detune,frequency:A.frequency,onstop:()=>this.onstop(this),phase:A.phase,type:"triangle"}),this.frequency=this._triangle.frequency,this.detune=this._triangle.detune,this._triangle.chain(this._thresh,this.output),this.width.chain(this._widthGate,this._thresh),$M(this,["width","frequency","detune"])}static getDefaults(){return Object.assign(fl.getDefaults(),{detune:0,frequency:440,phase:0,type:"pulse",width:.2})}_start(A){A=this.toSeconds(A),this._triangle.start(A),this._widthGate.gain.setValueAtTime(1,A)}_stop(A){A=this.toSeconds(A),this._triangle.stop(A),this._widthGate.gain.cancelScheduledValues(A),this._widthGate.gain.setValueAtTime(0,A)}_restart(A){this._triangle.restart(A),this._widthGate.gain.cancelScheduledValues(A),this._widthGate.gain.setValueAtTime(1,A)}get phase(){return this._triangle.phase}set phase(A){this._triangle.phase=A}get type(){return"pulse"}get baseType(){return"pulse"}get partials(){return[]}get partialCount(){return 0}set carrierType(A){this._triangle.type=A}asArray(A=1024){return ZM(this,void 0,void 0,(function*(){return Pl(this,A)}))}dispose(){return super.dispose(),this._triangle.dispose(),this.width.dispose(),this._widthGate.dispose(),this._thresh.dispose(),this}}class ou extends fl{constructor(){super(xM(ou.getDefaults(),arguments,["frequency","type","spread"])),this.name="FatOscillator",this._oscillators=[];const A=xM(ou.getDefaults(),arguments,["frequency","type","spread"]);this.frequency=new Ql({context:this.context,units:"frequency",value:A.frequency}),this.detune=new Ql({context:this.context,units:"cents",value:A.detune}),this._spread=A.spread,this._type=A.type,this._phase=A.phase,this._partials=A.partials,this._partialCount=A.partialCount,this.count=A.count,$M(this,["frequency","detune"])}static getDefaults(){return Object.assign(_l.getDefaults(),{count:3,spread:20,type:"sawtooth"})}_start(A){A=this.toSeconds(A),this._forEach(t=>t.start(A))}_stop(A){A=this.toSeconds(A),this._forEach(t=>t.stop(A))}_restart(A){this._forEach(t=>t.restart(A))}_forEach(A){for(let t=0;t<this._oscillators.length;t++)A(this._oscillators[t],t)}get type(){return this._type}set type(A){this._type=A,this._forEach(t=>t.type=A)}get spread(){return this._spread}set spread(A){if(this._spread=A,this._oscillators.length>1){const t=-A/2,e=A/(this._oscillators.length-1);this._forEach((A,n)=>A.detune.value=t+e*n)}}get count(){return this._oscillators.length}set count(A){if(hM(A,1),this._oscillators.length!==A){this._forEach(A=>A.dispose()),this._oscillators=[];for(let t=0;t<A;t++){const e=new _l({context:this.context,volume:-6-1.1*A,type:this._type,phase:this._phase+t/A*360,partialCount:this._partialCount,onstop:0===t?()=>this.onstop(this):tl});"custom"===this.type&&(e.partials=this._partials),this.frequency.connect(e.frequency),this.detune.connect(e.detune),e.detune.overridden=!1,e.connect(this.output),this._oscillators[t]=e}this.spread=this._spread,"started"===this.state&&this._forEach(A=>A.start())}}get phase(){return this._phase}set phase(A){this._phase=A,this._forEach(t=>t.phase=A)}get baseType(){return this._oscillators[0].baseType}set baseType(A){this._forEach(t=>t.baseType=A),this._type=this._oscillators[0].type}get partials(){return this._oscillators[0].partials}set partials(A){this._partials=A,this._partialCount=this._partials.length,A.length&&(this._type="custom",this._forEach(t=>t.partials=A))}get partialCount(){return this._oscillators[0].partialCount}set partialCount(A){this._partialCount=A,this._forEach(t=>t.partialCount=A),this._type=this._oscillators[0].type}asArray(A=1024){return ZM(this,void 0,void 0,(function*(){return Pl(this,A)}))}dispose(){return super.dispose(),this.frequency.dispose(),this.detune.dispose(),this._forEach(A=>A.dispose()),this}}class ru extends fl{constructor(){super(xM(ru.getDefaults(),arguments,["frequency","modulationFrequency"])),this.name="PWMOscillator",this.sourceType="pwm",this._scale=new eu({context:this.context,value:2});const A=xM(ru.getDefaults(),arguments,["frequency","modulationFrequency"]);this._pulse=new iu({context:this.context,frequency:A.modulationFrequency}),this._pulse.carrierType="sine",this.modulationFrequency=this._pulse.frequency,this._modulator=new _l({context:this.context,detune:A.detune,frequency:A.frequency,onstop:()=>this.onstop(this),phase:A.phase}),this.frequency=this._modulator.frequency,this.detune=this._modulator.detune,this._modulator.chain(this._scale,this._pulse.width),this._pulse.connect(this.output),$M(this,["modulationFrequency","frequency","detune"])}static getDefaults(){return Object.assign(fl.getDefaults(),{detune:0,frequency:440,modulationFrequency:.4,phase:0,type:"pwm"})}_start(A){A=this.toSeconds(A),this._modulator.start(A),this._pulse.start(A)}_stop(A){A=this.toSeconds(A),this._modulator.stop(A),this._pulse.stop(A)}_restart(A){this._modulator.restart(A),this._pulse.restart(A)}get type(){return"pwm"}get baseType(){return"pwm"}get partials(){return[]}get partialCount(){return 0}get phase(){return this._modulator.phase}set phase(A){this._modulator.phase=A}asArray(A=1024){return ZM(this,void 0,void 0,(function*(){return Pl(this,A)}))}dispose(){return super.dispose(),this._pulse.dispose(),this._scale.dispose(),this._modulator.dispose(),this}}const au={am:nu,fat:ou,fm:su,oscillator:_l,pulse:iu,pwm:ru};class cu extends fl{constructor(){super(xM(cu.getDefaults(),arguments,["frequency","type"])),this.name="OmniOscillator";const A=xM(cu.getDefaults(),arguments,["frequency","type"]);this.frequency=new Ql({context:this.context,units:"frequency",value:A.frequency}),this.detune=new Ql({context:this.context,units:"cents",value:A.detune}),$M(this,["frequency","detune"]),this.set(A)}static getDefaults(){return Object.assign(_l.getDefaults(),su.getDefaults(),nu.getDefaults(),ou.getDefaults(),iu.getDefaults(),ru.getDefaults())}_start(A){this._oscillator.start(A)}_stop(A){this._oscillator.stop(A)}_restart(A){return this._oscillator.restart(A),this}get type(){let A="";return["am","fm","fat"].some(A=>this._sourceType===A)&&(A=this._sourceType),A+this._oscillator.type}set type(A){"fm"===A.substr(0,2)?(this._createNewOscillator("fm"),this._oscillator=this._oscillator,this._oscillator.type=A.substr(2)):"am"===A.substr(0,2)?(this._createNewOscillator("am"),this._oscillator=this._oscillator,this._oscillator.type=A.substr(2)):"fat"===A.substr(0,3)?(this._createNewOscillator("fat"),this._oscillator=this._oscillator,this._oscillator.type=A.substr(3)):"pwm"===A?(this._createNewOscillator("pwm"),this._oscillator=this._oscillator):"pulse"===A?this._createNewOscillator("pulse"):(this._createNewOscillator("oscillator"),this._oscillator=this._oscillator,this._oscillator.type=A)}get partials(){return this._oscillator.partials}set partials(A){this._getOscType(this._oscillator,"pulse")||this._getOscType(this._oscillator,"pwm")||(this._oscillator.partials=A)}get partialCount(){return this._oscillator.partialCount}set partialCount(A){this._getOscType(this._oscillator,"pulse")||this._getOscType(this._oscillator,"pwm")||(this._oscillator.partialCount=A)}set(A){return Reflect.has(A,"type")&&A.type&&(this.type=A.type),super.set(A),this}_createNewOscillator(A){if(A!==this._sourceType){this._sourceType=A;const t=au[A],e=this.now();if(this._oscillator){const A=this._oscillator;A.stop(e),this.context.setTimeout(()=>A.dispose(),this.blockTime)}this._oscillator=new t({context:this.context}),this.frequency.connect(this._oscillator.frequency),this.detune.connect(this._oscillator.detune),this._oscillator.connect(this.output),this._oscillator.onstop=()=>this.onstop(this),"started"===this.state&&this._oscillator.start(e)}}get phase(){return this._oscillator.phase}set phase(A){this._oscillator.phase=A}get sourceType(){return this._sourceType}set sourceType(A){let t="sine";"pwm"!==this._oscillator.type&&"pulse"!==this._oscillator.type&&(t=this._oscillator.type),"fm"===A?this.type="fm"+t:"am"===A?this.type="am"+t:"fat"===A?this.type="fat"+t:"oscillator"===A?this.type=t:"pulse"===A?this.type="pulse":"pwm"===A&&(this.type="pwm")}_getOscType(A,t){return A instanceof au[t]}get baseType(){return this._oscillator.baseType}set baseType(A){this._getOscType(this._oscillator,"pulse")||this._getOscType(this._oscillator,"pwm")||"pulse"===A||"pwm"===A||(this._oscillator.baseType=A)}get width(){return this._getOscType(this._oscillator,"pulse")?this._oscillator.width:void 0}get count(){return this._getOscType(this._oscillator,"fat")?this._oscillator.count:void 0}set count(A){this._getOscType(this._oscillator,"fat")&&dM(A)&&(this._oscillator.count=A)}get spread(){return this._getOscType(this._oscillator,"fat")?this._oscillator.spread:void 0}set spread(A){this._getOscType(this._oscillator,"fat")&&dM(A)&&(this._oscillator.spread=A)}get modulationType(){return this._getOscType(this._oscillator,"fm")||this._getOscType(this._oscillator,"am")?this._oscillator.modulationType:void 0}set modulationType(A){(this._getOscType(this._oscillator,"fm")||this._getOscType(this._oscillator,"am"))&&CM(A)&&(this._oscillator.modulationType=A)}get modulationIndex(){return this._getOscType(this._oscillator,"fm")?this._oscillator.modulationIndex:void 0}get harmonicity(){return this._getOscType(this._oscillator,"fm")||this._getOscType(this._oscillator,"am")?this._oscillator.harmonicity:void 0}get modulationFrequency(){return this._getOscType(this._oscillator,"pwm")?this._oscillator.modulationFrequency:void 0}asArray(A=1024){return ZM(this,void 0,void 0,(function*(){return Pl(this,A)}))}dispose(){return super.dispose(),this.detune.dispose(),this.frequency.dispose(),this._oscillator.dispose(),this}}function Mu(A,t=1/0){const e=new WeakMap;return function(n,s){Reflect.defineProperty(n,s,{configurable:!0,enumerable:!0,get:function(){return e.get(this)},set:function(n){hM(n,A,t),e.set(this,n)}})}}function lu(A,t=1/0){const e=new WeakMap;return function(n,s){Reflect.defineProperty(n,s,{configurable:!0,enumerable:!0,get:function(){return e.get(this)},set:function(n){hM(this.toSeconds(n),A,t),e.set(this,n)}})}}class uu extends fl{constructor(){super(xM(uu.getDefaults(),arguments,["url","onload"])),this.name="Player",this._activeSources=new Set;const A=xM(uu.getDefaults(),arguments,["url","onload"]);this._buffer=new el({onload:this._onload.bind(this,A.onload),onerror:A.onerror,reverse:A.reverse,url:A.url}),this.autostart=A.autostart,this._loop=A.loop,this._loopStart=A.loopStart,this._loopEnd=A.loopEnd,this._playbackRate=A.playbackRate,this.fadeIn=A.fadeIn,this.fadeOut=A.fadeOut}static getDefaults(){return Object.assign(fl.getDefaults(),{autostart:!1,fadeIn:0,fadeOut:0,loop:!1,loopEnd:0,loopStart:0,onload:tl,onerror:tl,playbackRate:1,reverse:!1})}load(A){return ZM(this,void 0,void 0,(function*(){return yield this._buffer.load(A),this._onload(),this}))}_onload(A=tl){A(),this.autostart&&this.start()}_onSourceEnd(A){this.onstop(this),this._activeSources.delete(A),0!==this._activeSources.size||this._synced||"started"!==this._state.getValueAtTime(this.now())||this._state.setStateAtTime("stopped",this.now())}start(A,t,e){return super.start(A,t,e),this}_start(A,t,e){t=KM(t,this._loop?this._loopStart:0);let n=this.toSeconds(t);this._synced&&(n*=this._playbackRate);const s=e;e=KM(e,Math.max(this._buffer.duration-n,0));let i=this.toSeconds(e);i/=this._playbackRate,A=this.toSeconds(A);const o=new Vl({url:this._buffer,context:this.context,fadeIn:this.fadeIn,fadeOut:this.fadeOut,loop:this._loop,loopEnd:this._loopEnd,loopStart:this._loopStart,onended:this._onSourceEnd.bind(this),playbackRate:this._playbackRate}).connect(this.output);this._loop||this._synced||(this._state.cancel(A+i),this._state.setStateAtTime("stopped",A+i,{implicitEnd:!0})),this._activeSources.add(o),this._loop&&wM(s)?o.start(A,n):o.start(A,n,i-this.toSeconds(this.fadeOut))}_stop(A){const t=this.toSeconds(A);this._activeSources.forEach(A=>A.stop(t))}restart(A,t,e){return super.restart(A,t,e),this}_restart(A,t,e){this._stop(A),this._start(A,t,e)}seek(A,t){const e=this.toSeconds(t);if("started"===this._state.getValueAtTime(e)){const t=this.toSeconds(A);this._stop(e),this._start(e,t)}return this}setLoopPoints(A,t){return this.loopStart=A,this.loopEnd=t,this}get loopStart(){return this._loopStart}set loopStart(A){this._loopStart=A,this.buffer.loaded&&hM(this.toSeconds(A),0,this.buffer.duration),this._activeSources.forEach(t=>{t.loopStart=A})}get loopEnd(){return this._loopEnd}set loopEnd(A){this._loopEnd=A,this.buffer.loaded&&hM(this.toSeconds(A),0,this.buffer.duration),this._activeSources.forEach(t=>{t.loopEnd=A})}get buffer(){return this._buffer}set buffer(A){this._buffer.set(A)}get loop(){return this._loop}set loop(A){if(this._loop!==A&&(this._loop=A,this._activeSources.forEach(t=>{t.loop=A}),A)){const A=this._state.getNextState("stopped",this.now());A&&this._state.cancel(A.time)}}get playbackRate(){return this._playbackRate}set playbackRate(A){this._playbackRate=A;const t=this.now(),e=this._state.getNextState("stopped",t);e&&e.implicitEnd&&(this._state.cancel(e.time),this._activeSources.forEach(A=>A.cancelStop())),this._activeSources.forEach(e=>{e.playbackRate.setValueAtTime(A,t)})}get reverse(){return this._buffer.reverse}set reverse(A){this._buffer.reverse=A}get loaded(){return this._buffer.loaded}dispose(){return super.dispose(),this._activeSources.forEach(A=>A.dispose()),this._activeSources.clear(),this._buffer.dispose(),this}}QM([lu(0)],uu.prototype,"fadeIn",void 0),QM([lu(0)],uu.prototype,"fadeOut",void 0);class hu extends Dl{constructor(){super(xM(hu.getDefaults(),arguments,["attack","decay","sustain","release"])),this.name="Envelope",this._sig=new Ql({context:this.context,value:0}),this.output=this._sig,this.input=void 0;const A=xM(hu.getDefaults(),arguments,["attack","decay","sustain","release"]);this.attack=A.attack,this.decay=A.decay,this.sustain=A.sustain,this.release=A.release,this.attackCurve=A.attackCurve,this.releaseCurve=A.releaseCurve,this.decayCurve=A.decayCurve}static getDefaults(){return Object.assign(Dl.getDefaults(),{attack:.01,attackCurve:"linear",decay:.1,decayCurve:"exponential",release:1,releaseCurve:"exponential",sustain:.5})}get value(){return this.getValueAtTime(this.now())}_getCurve(A,t){if(CM(A))return A;{let e;for(e in gu)if(gu[e][t]===A)return e;return A}}_setCurve(A,t,e){if(CM(e)&&Reflect.has(gu,e)){const n=gu[e];BM(n)?"_decayCurve"!==A&&(this[A]=n[t]):this[A]=n}else{if(!GM(e)||"_decayCurve"===A)throw new Error("Envelope: invalid curve: "+e);this[A]=e}}get attackCurve(){return this._getCurve(this._attackCurve,"In")}set attackCurve(A){this._setCurve("_attackCurve","In",A)}get releaseCurve(){return this._getCurve(this._releaseCurve,"Out")}set releaseCurve(A){this._setCurve("_releaseCurve","Out",A)}get decayCurve(){return this._decayCurve}set decayCurve(A){uM(["linear","exponential"].some(t=>t===A),"Invalid envelope curve: "+A),this._decayCurve=A}triggerAttack(A,t=1){this.log("triggerAttack",A,t),A=this.toSeconds(A);let e=this.toSeconds(this.attack);const n=this.toSeconds(this.decay),s=this.getValueAtTime(A);if(s>0&&(e=(1-s)/(1/e)),e<this.sampleTime)this._sig.cancelScheduledValues(A),this._sig.setValueAtTime(t,A);else if("linear"===this._attackCurve)this._sig.linearRampTo(t,e,A);else if("exponential"===this._attackCurve)this._sig.targetRampTo(t,e,A);else{this._sig.cancelAndHoldAtTime(A);let n=this._attackCurve;for(let A=1;A<n.length;A++)if(n[A-1]<=s&&s<=n[A]){n=this._attackCurve.slice(A),n[0]=s;break}this._sig.setValueCurveAtTime(n,A,e,t)}if(n&&this.sustain<1){const s=t*this.sustain,i=A+e;this.log("decay",i),"linear"===this._decayCurve?this._sig.linearRampToValueAtTime(s,n+i):this._sig.exponentialApproachValueAtTime(s,i,n)}return this}triggerRelease(A){this.log("triggerRelease",A),A=this.toSeconds(A);const t=this.getValueAtTime(A);if(t>0){const e=this.toSeconds(this.release);e<this.sampleTime?this._sig.setValueAtTime(0,A):"linear"===this._releaseCurve?this._sig.linearRampTo(0,e,A):"exponential"===this._releaseCurve?this._sig.targetRampTo(0,e,A):(uM(GM(this._releaseCurve),"releaseCurve must be either 'linear', 'exponential' or an array"),this._sig.cancelAndHoldAtTime(A),this._sig.setValueCurveAtTime(this._releaseCurve,A,e,t))}return this}getValueAtTime(A){return this._sig.getValueAtTime(A)}triggerAttackRelease(A,t,e=1){return t=this.toSeconds(t),this.triggerAttack(t,e),this.triggerRelease(t+this.toSeconds(A)),this}cancel(A){return this._sig.cancelScheduledValues(this.toSeconds(A)),this}connect(A,t=0,e=0){return Zl(this,A,t,e),this}asArray(A=1024){return ZM(this,void 0,void 0,(function*(){const t=A/this.context.sampleRate,e=new nl(1,t,this.context.sampleRate),n=this.toSeconds(this.attack)+this.toSeconds(this.decay),s=n+this.toSeconds(this.release),i=.1*s,o=s+i,r=new this.constructor(Object.assign(this.get(),{attack:t*this.toSeconds(this.attack)/o,decay:t*this.toSeconds(this.decay)/o,release:t*this.toSeconds(this.release)/o,context:e}));return r._sig.toDestination(),r.triggerAttackRelease(t*(n+i)/o,0),(yield e.render()).getChannelData(0)}))}dispose(){return super.dispose(),this._sig.dispose(),this}}QM([lu(0)],hu.prototype,"attack",void 0),QM([lu(0)],hu.prototype,"decay",void 0),QM([Mu(0,1)],hu.prototype,"sustain",void 0),QM([lu(0)],hu.prototype,"release",void 0);const gu=(()=>{let A,t;const e=[];for(A=0;A<128;A++)e[A]=Math.sin(A/127*(Math.PI/2));const n=[];for(A=0;A<127;A++){t=A/127;const e=Math.sin(t*(2*Math.PI)*6.4-Math.PI/2)+1;n[A]=e/10+.83*t}n[127]=1;const s=[];for(A=0;A<128;A++)s[A]=Math.ceil(A/127*5)/5;const i=[];for(A=0;A<128;A++)t=A/127,i[A]=.5*(1-Math.cos(Math.PI*t));const o=[];for(A=0;A<128;A++){t=A/127;const e=4*Math.pow(t,3)+.2,n=Math.cos(e*Math.PI*2*t);o[A]=Math.abs(n*(1-t))}function r(A){const t=new Array(A.length);for(let e=0;e<A.length;e++)t[e]=1-A[e];return t}return{bounce:{In:r(o),Out:o},cosine:{In:e,Out:(a=e,a.slice(0).reverse())},exponential:"exponential",linear:"linear",ripple:{In:n,Out:r(n)},sine:{In:i,Out:r(i)},step:{In:s,Out:r(s)}};var a})();class mu extends Dl{constructor(){super(xM(mu.getDefaults(),arguments)),this._scheduledEvents=[],this._synced=!1,this._original_triggerAttack=this.triggerAttack,this._original_triggerRelease=this.triggerRelease;const A=xM(mu.getDefaults(),arguments);this._volume=this.output=new Rl({context:this.context,volume:A.volume}),this.volume=this._volume.volume,$M(this,"volume")}static getDefaults(){return Object.assign(Dl.getDefaults(),{volume:0})}sync(){return this._synced||(this._synced=!0,this._syncMethod("triggerAttack",1),this._syncMethod("triggerRelease",0)),this}_syncMethod(A,t){const e=this["_original_"+A]=this[A];this[A]=(...A)=>{const n=this.context.transport.schedule(n=>{A[t]=n,e.apply(this,A)},A[t]);this._scheduledEvents.push(n)}}unsync(){return this._scheduledEvents.forEach(A=>this.context.transport.clear(A)),this._scheduledEvents=[],this._synced&&(this._synced=!1,this.triggerAttack=this._original_triggerAttack,this.triggerRelease=this._original_triggerRelease),this}triggerAttackRelease(A,t,e,n){const s=this.toSeconds(e),i=this.toSeconds(t);return this.triggerAttack(A,s,n),this.triggerRelease(s+i),this}dispose(){return super.dispose(),this._volume.dispose(),this.unsync(),this._scheduledEvents=[],this}}class pu extends mu{constructor(){super(xM(pu.getDefaults(),arguments));const A=xM(pu.getDefaults(),arguments);this.portamento=A.portamento,this.onsilence=A.onsilence}static getDefaults(){return Object.assign(mu.getDefaults(),{detune:0,onsilence:tl,portamento:0})}triggerAttack(A,t,e=1){this.log("triggerAttack",A,t,e);const n=this.toSeconds(t);return this._triggerEnvelopeAttack(n,e),this.setNote(A,n),this}triggerRelease(A){this.log("triggerRelease",A);const t=this.toSeconds(A);return this._triggerEnvelopeRelease(t),this}setNote(A,t){const e=this.toSeconds(t),n=A instanceof gl?A.toFrequency():A;if(this.portamento>0&&this.getLevelAtTime(e)>.05){const A=this.toSeconds(this.portamento);this.frequency.exponentialRampTo(n,A,e)}else this.frequency.setValueAtTime(n,e);return this}}QM([lu(0)],pu.prototype,"portamento",void 0);class wu extends hu{constructor(){super(xM(wu.getDefaults(),arguments,["attack","decay","sustain","release"])),this.name="AmplitudeEnvelope",this._gainNode=new El({context:this.context,gain:0}),this.output=this._gainNode,this.input=this._gainNode,this._sig.connect(this._gainNode.gain),this.output=this._gainNode,this.input=this._gainNode}dispose(){return super.dispose(),this._gainNode.dispose(),this}}class Yu extends pu{constructor(){super(xM(Yu.getDefaults(),arguments)),this.name="Synth";const A=xM(Yu.getDefaults(),arguments);this.oscillator=new cu(Object.assign({context:this.context,detune:A.detune,onstop:()=>this.onsilence(this)},A.oscillator)),this.frequency=this.oscillator.frequency,this.detune=this.oscillator.detune,this.envelope=new wu(Object.assign({context:this.context},A.envelope)),this.oscillator.chain(this.envelope,this.output),$M(this,["oscillator","frequency","detune","envelope"])}static getDefaults(){return Object.assign(pu.getDefaults(),{envelope:Object.assign(JM(hu.getDefaults(),Object.keys(Dl.getDefaults())),{attack:.005,decay:.1,release:1,sustain:.3}),oscillator:Object.assign(JM(cu.getDefaults(),[...Object.keys(fl.getDefaults()),"frequency","detune"]),{type:"triangle"})})}_triggerEnvelopeAttack(A,t){if(this.envelope.triggerAttack(A,t),this.oscillator.start(A),0===this.envelope.sustain){const t=this.toSeconds(this.envelope.attack),e=this.toSeconds(this.envelope.decay);this.oscillator.stop(A+t+e)}}_triggerEnvelopeRelease(A){this.envelope.triggerRelease(A),this.oscillator.stop(A+this.toSeconds(this.envelope.release))}getLevelAtTime(A){return A=this.toSeconds(A),this.envelope.getValueAtTime(A)}dispose(){return super.dispose(),this.oscillator.dispose(),this.envelope.dispose(),this}}class du extends Dl{constructor(){super(xM(du.getDefaults(),arguments,["frequency","type"])),this.name="BiquadFilter";const A=xM(du.getDefaults(),arguments,["frequency","type"]);this._filter=this.context.createBiquadFilter(),this.input=this.output=this._filter,this.Q=new Bl({context:this.context,units:"number",value:A.Q,param:this._filter.Q}),this.frequency=new Bl({context:this.context,units:"frequency",value:A.frequency,param:this._filter.frequency}),this.detune=new Bl({context:this.context,units:"cents",value:A.detune,param:this._filter.detune}),this.gain=new Bl({context:this.context,units:"gain",value:A.gain,param:this._filter.gain}),this.type=A.type}static getDefaults(){return Object.assign(Dl.getDefaults(),{Q:1,type:"lowpass",frequency:350,detune:0,gain:0})}get type(){return this._filter.type}set type(A){uM(-1!==["lowpass","highpass","bandpass","lowshelf","highshelf","notch","allpass","peaking"].indexOf(A),"Invalid filter type: "+A),this._filter.type=A}getFrequencyResponse(A=128){const t=new Float32Array(A);for(let i=0;i<A;i++){const e=Math.pow(i/A,2);t[i]=19980*e+20}const e=new Float32Array(A),n=new Float32Array(A),s=this.context.createBiquadFilter();return s.type=this.type,s.Q.value=this.Q.value,s.frequency.value=this.frequency.value,s.gain.value=this.gain.value,s.getFrequencyResponse(t,e,n),e}dispose(){return super.dispose(),this._filter.disconnect(),this.Q.dispose(),this.frequency.dispose(),this.gain.dispose(),this.detune.dispose(),this}}class Bu extends Dl{constructor(){super(xM(Bu.getDefaults(),arguments,["frequency","type","rolloff"])),this.name="Filter",this.input=new El({context:this.context}),this.output=new El({context:this.context}),this._filters=[];const A=xM(Bu.getDefaults(),arguments,["frequency","type","rolloff"]);this._filters=[],this.Q=new Ql({context:this.context,units:"positive",value:A.Q}),this.frequency=new Ql({context:this.context,units:"frequency",value:A.frequency}),this.detune=new Ql({context:this.context,units:"cents",value:A.detune}),this.gain=new Ql({context:this.context,units:"decibels",value:A.gain}),this._type=A.type,this.rolloff=A.rolloff,$M(this,["detune","frequency","gain","Q"])}static getDefaults(){return Object.assign(Dl.getDefaults(),{Q:1,detune:0,frequency:350,gain:0,rolloff:-12,type:"lowpass"})}get type(){return this._type}set type(A){uM(-1!==["lowpass","highpass","bandpass","lowshelf","highshelf","notch","allpass","peaking"].indexOf(A),"Invalid filter type: "+A),this._type=A,this._filters.forEach(t=>t.type=A)}get rolloff(){return this._rolloff}set rolloff(A){const t=dM(A)?A:parseInt(A,10),e=[-12,-24,-48,-96];let n=e.indexOf(t);uM(-1!==n,"rolloff can only be "+e.join(", ")),n+=1,this._rolloff=t,this.input.disconnect(),this._filters.forEach(A=>A.disconnect()),this._filters=new Array(n);for(let s=0;s<n;s++){const A=new du({context:this.context});A.type=this._type,this.frequency.connect(A.frequency),this.detune.connect(A.detune),this.Q.connect(A.Q),this.gain.connect(A.gain),this._filters[s]=A}this._internalChannels=this._filters,Gl(this.input,...this._internalChannels,this.output)}getFrequencyResponse(A=128){const t=new du({frequency:this.frequency.value,gain:this.gain.value,Q:this.Q.value,type:this._type,detune:this.detune.value}),e=new Float32Array(A).map(()=>1);return this._filters.forEach(()=>{t.getFrequencyResponse(A).forEach((A,t)=>e[t]*=A)}),t.dispose(),e}dispose(){return super.dispose(),this._filters.forEach(A=>{A.dispose()}),Al(this,["detune","frequency","gain","Q"]),this.frequency.dispose(),this.Q.dispose(),this.detune.dispose(),this.gain.dispose(),this}}class Du extends Yu{constructor(){super(xM(Du.getDefaults(),arguments)),this.name="MembraneSynth",this.portamento=0;const A=xM(Du.getDefaults(),arguments);this.pitchDecay=A.pitchDecay,this.octaves=A.octaves,$M(this,["oscillator","envelope"])}static getDefaults(){return NM(pu.getDefaults(),Yu.getDefaults(),{envelope:{attack:.001,attackCurve:"exponential",decay:.4,release:1.4,sustain:.01},octaves:10,oscillator:{type:"sine"},pitchDecay:.05})}setNote(A,t){const e=this.toSeconds(t),n=this.toFrequency(A instanceof gl?A.toFrequency():A);return this.oscillator.frequency.setValueAtTime(n*this.octaves,e),this.oscillator.frequency.exponentialRampToValueAtTime(n,e+this.toSeconds(this.pitchDecay)),this}dispose(){return super.dispose(),this}}QM([Mu(0)],Du.prototype,"octaves",void 0),QM([lu(0)],Du.prototype,"pitchDecay",void 0);const Gu=new Set;function Cu(A){Gu.add(A)}function Eu(A,t){Gu.add(`registerProcessor("${A}", ${t})`)}class Iu extends Dl{constructor(A){super(A),this.name="ToneAudioWorklet",this.workletOptions={},this.onprocessorerror=tl;const t=URL.createObjectURL(new Blob([Array.from(Gu).join("\n")],{type:"text/javascript"})),e=this._audioWorkletName();this._dummyGain=this.context.createGain(),this._dummyParam=this._dummyGain.gain,this.context.addAudioWorkletModule(t,e).then(()=>{this.disposed||(this._worklet=this.context.createAudioWorkletNode(e,this.workletOptions),this._worklet.onprocessorerror=this.onprocessorerror.bind(this),this.onReady(this._worklet))})}dispose(){return super.dispose(),this._dummyGain.disconnect(),this._worklet&&(this._worklet.port.postMessage("dispose"),this._worklet.disconnect()),this}}Cu('\n\t/**\n\t * The base AudioWorkletProcessor for use in Tone.js. Works with the [[ToneAudioWorklet]]. \n\t */\n\tclass ToneAudioWorkletProcessor extends AudioWorkletProcessor {\n\n\t\tconstructor(options) {\n\t\t\t\n\t\t\tsuper(options);\n\t\t\t/**\n\t\t\t * If the processor was disposed or not. Keep alive until it\'s disposed.\n\t\t\t */\n\t\t\tthis.disposed = false;\n\t\t   \t/** \n\t\t\t * The number of samples in the processing block\n\t\t\t */\n\t\t\tthis.blockSize = 128;\n\t\t\t/**\n\t\t\t * the sample rate\n\t\t\t */\n\t\t\tthis.sampleRate = sampleRate;\n\n\t\t\tthis.port.onmessage = (event) => {\n\t\t\t\t// when it receives a dispose \n\t\t\t\tif (event.data === "dispose") {\n\t\t\t\t\tthis.disposed = true;\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t}\n'),Cu("\n\t/**\n\t * Abstract class for a single input/output processor. \n\t * has a 'generate' function which processes one sample at a time\n\t */\n\tclass SingleIOProcessor extends ToneAudioWorkletProcessor {\n\n\t\tconstructor(options) {\n\t\t\tsuper(Object.assign(options, {\n\t\t\t\tnumberOfInputs: 1,\n\t\t\t\tnumberOfOutputs: 1\n\t\t\t}));\n\t\t\t/**\n\t\t\t * Holds the name of the parameter and a single value of that\n\t\t\t * parameter at the current sample\n\t\t\t * @type { [name: string]: number }\n\t\t\t */\n\t\t\tthis.params = {}\n\t\t}\n\n\t\t/**\n\t\t * Generate an output sample from the input sample and parameters\n\t\t * @abstract\n\t\t * @param input number\n\t\t * @param channel number\n\t\t * @param parameters { [name: string]: number }\n\t\t * @returns number\n\t\t */\n\t\tgenerate(){}\n\n\t\t/**\n\t\t * Update the private params object with the \n\t\t * values of the parameters at the given index\n\t\t * @param parameters { [name: string]: Float32Array },\n\t\t * @param index number\n\t\t */\n\t\tupdateParams(parameters, index) {\n\t\t\tfor (const paramName in parameters) {\n\t\t\t\tconst param = parameters[paramName];\n\t\t\t\tif (param.length > 1) {\n\t\t\t\t\tthis.params[paramName] = parameters[paramName][index];\n\t\t\t\t} else {\n\t\t\t\t\tthis.params[paramName] = parameters[paramName][0];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Process a single frame of the audio\n\t\t * @param inputs Float32Array[][]\n\t\t * @param outputs Float32Array[][]\n\t\t */\n\t\tprocess(inputs, outputs, parameters) {\n\t\t\tconst input = inputs[0];\n\t\t\tconst output = outputs[0];\n\t\t\t// get the parameter values\n\t\t\tconst channelCount = Math.max(input && input.length || 0, output.length);\n\t\t\tfor (let sample = 0; sample < this.blockSize; sample++) {\n\t\t\t\tthis.updateParams(parameters, sample);\n\t\t\t\tfor (let channel = 0; channel < channelCount; channel++) {\n\t\t\t\t\tconst inputSample = input && input.length ? input[channel][sample] : 0;\n\t\t\t\t\toutput[channel][sample] = this.generate(inputSample, channel, this.params);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn !this.disposed;\n\t\t}\n\t};\n"),Cu("\n\t/**\n\t * A multichannel buffer for use within an AudioWorkletProcessor as a delay line\n\t */\n\tclass DelayLine {\n\t\t\n\t\tconstructor(size, channels) {\n\t\t\tthis.buffer = [];\n\t\t\tthis.writeHead = []\n\t\t\tthis.size = size;\n\n\t\t\t// create the empty channels\n\t\t\tfor (let i = 0; i < channels; i++) {\n\t\t\t\tthis.buffer[i] = new Float32Array(this.size);\n\t\t\t\tthis.writeHead[i] = 0;\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Push a value onto the end\n\t\t * @param channel number\n\t\t * @param value number\n\t\t */\n\t\tpush(channel, value) {\n\t\t\tthis.writeHead[channel] += 1;\n\t\t\tif (this.writeHead[channel] > this.size) {\n\t\t\t\tthis.writeHead[channel] = 0;\n\t\t\t}\n\t\t\tthis.buffer[channel][this.writeHead[channel]] = value;\n\t\t}\n\n\t\t/**\n\t\t * Get the recorded value of the channel given the delay\n\t\t * @param channel number\n\t\t * @param delay number delay samples\n\t\t */\n\t\tget(channel, delay) {\n\t\t\tlet readHead = this.writeHead[channel] - Math.floor(delay);\n\t\t\tif (readHead < 0) {\n\t\t\t\treadHead += this.size;\n\t\t\t}\n\t\t\treturn this.buffer[channel][readHead];\n\t\t}\n\t}\n"),Eu("feedback-comb-filter",'\n\tclass FeedbackCombFilterWorklet extends SingleIOProcessor {\n\n\t\tconstructor(options) {\n\t\t\tsuper(options);\n\t\t\tthis.delayLine = new DelayLine(this.sampleRate, options.channelCount || 2);\n\t\t}\n\n\t\tstatic get parameterDescriptors() {\n\t\t\treturn [{\n\t\t\t\tname: "delayTime",\n\t\t\t\tdefaultValue: 0.1,\n\t\t\t\tminValue: 0,\n\t\t\t\tmaxValue: 1,\n\t\t\t\tautomationRate: "k-rate"\n\t\t\t}, {\n\t\t\t\tname: "feedback",\n\t\t\t\tdefaultValue: 0.5,\n\t\t\t\tminValue: 0,\n\t\t\t\tmaxValue: 0.9999,\n\t\t\t\tautomationRate: "k-rate"\n\t\t\t}];\n\t\t}\n\n\t\tgenerate(input, channel, parameters) {\n\t\t\tconst delayedSample = this.delayLine.get(channel, parameters.delayTime * this.sampleRate);\n\t\t\tthis.delayLine.push(channel, input + delayedSample * parameters.feedback);\n\t\t\treturn delayedSample;\n\t\t}\n\t}\n');class yu extends Iu{constructor(){super(xM(yu.getDefaults(),arguments,["delayTime","resonance"])),this.name="FeedbackCombFilter";const A=xM(yu.getDefaults(),arguments,["delayTime","resonance"]);this.input=new El({context:this.context}),this.output=new El({context:this.context}),this.delayTime=new Bl({context:this.context,value:A.delayTime,units:"time",minValue:0,maxValue:1,param:this._dummyParam,swappable:!0}),this.resonance=new Bl({context:this.context,value:A.resonance,units:"normalRange",param:this._dummyParam,swappable:!0}),$M(this,["resonance","delayTime"])}_audioWorkletName(){return"feedback-comb-filter"}static getDefaults(){return Object.assign(Dl.getDefaults(),{delayTime:.1,resonance:.5})}onReady(A){Gl(this.input,A,this.output);const t=A.parameters.get("delayTime");this.delayTime.setParam(t);const e=A.parameters.get("feedback");this.resonance.setParam(e)}dispose(){return super.dispose(),this.input.dispose(),this.output.dispose(),this.delayTime.dispose(),this.resonance.dispose(),this}}class Qu extends Dl{constructor(){super(xM(Qu.getDefaults(),arguments,["frequency","type"])),this.name="OnePoleFilter";const A=xM(Qu.getDefaults(),arguments,["frequency","type"]);this._frequency=A.frequency,this._type=A.type,this.input=new El({context:this.context}),this.output=new El({context:this.context}),this._createFilter()}static getDefaults(){return Object.assign(Dl.getDefaults(),{frequency:880,type:"lowpass"})}_createFilter(){const A=this._filter,t=this.toFrequency(this._frequency),e=1/(2*Math.PI*t);if("lowpass"===this._type){const A=1/(e*this.context.sampleRate);this._filter=this.context.createIIRFilter([A,0],[1,A-1])}else this._filter=this.context.createIIRFilter([1,-1],[1,1/(e*this.context.sampleRate)-1]);this.input.chain(this._filter,this.output),A&&this.context.setTimeout(()=>{this.disposed||(this.input.disconnect(A),A.disconnect())},this.blockTime)}get frequency(){return this._frequency}set frequency(A){this._frequency=A,this._createFilter()}get type(){return this._type}set type(A){this._type=A,this._createFilter()}getFrequencyResponse(A=128){const t=new Float32Array(A);for(let s=0;s<A;s++){const e=Math.pow(s/A,2);t[s]=19980*e+20}const e=new Float32Array(A),n=new Float32Array(A);return this._filter.getFrequencyResponse(t,e,n),e}dispose(){return super.dispose(),this.input.dispose(),this.output.dispose(),this._filter.disconnect(),this}}class Zu extends Dl{constructor(){super(xM(Zu.getDefaults(),arguments,["delayTime","resonance","dampening"])),this.name="LowpassCombFilter";const A=xM(Zu.getDefaults(),arguments,["delayTime","resonance","dampening"]);this._combFilter=this.output=new yu({context:this.context,delayTime:A.delayTime,resonance:A.resonance}),this.delayTime=this._combFilter.delayTime,this.resonance=this._combFilter.resonance,this._lowpass=this.input=new Qu({context:this.context,frequency:A.dampening,type:"lowpass"}),this._lowpass.connect(this._combFilter)}static getDefaults(){return Object.assign(Dl.getDefaults(),{dampening:3e3,delayTime:.1,resonance:.5})}get dampening(){return this._lowpass.frequency}set dampening(A){this._lowpass.frequency=A}dispose(){return super.dispose(),this._combFilter.dispose(),this._lowpass.dispose(),this}}class Tu extends mu{constructor(){super(xM(Tu.getDefaults(),arguments)),this.name="PluckSynth";const A=xM(Tu.getDefaults(),arguments);this._noise=new Ll({context:this.context,type:"pink"}),this.attackNoise=A.attackNoise,this._lfcf=new Zu({context:this.context,dampening:A.dampening,resonance:A.resonance}),this.resonance=A.resonance,this.release=A.release,this._noise.connect(this._lfcf),this._lfcf.connect(this.output)}static getDefaults(){return NM(mu.getDefaults(),{attackNoise:1,dampening:4e3,resonance:.7,release:1})}get dampening(){return this._lfcf.dampening}set dampening(A){this._lfcf.dampening=A}triggerAttack(A,t){const e=this.toFrequency(A);t=this.toSeconds(t);const n=1/e;return this._lfcf.delayTime.setValueAtTime(n,t),this._noise.start(t),this._noise.stop(t+n*this.attackNoise),this._lfcf.resonance.cancelScheduledValues(t),this._lfcf.resonance.setValueAtTime(this.resonance,t),this}triggerRelease(A){return this._lfcf.resonance.linearRampTo(0,this.release,A),this}dispose(){return super.dispose(),this._noise.dispose(),this._lfcf.dispose(),this}}class ku extends mu{constructor(){super(xM(ku.getDefaults(),arguments,["voice","options"])),this.name="PolySynth",this._availableVoices=[],this._activeVoices=[],this._voices=[],this._gcTimeout=-1,this._averageActiveVoices=0;const A=xM(ku.getDefaults(),arguments,["voice","options"]);uM(!dM(A.voice),"DEPRECATED: The polyphony count is no longer the first argument.");const t=A.voice.getDefaults();this.options=Object.assign(t,A.options),this.voice=A.voice,this.maxPolyphony=A.maxPolyphony,this._dummyVoice=this._getNextAvailableVoice();const e=this._voices.indexOf(this._dummyVoice);this._voices.splice(e,1),this._gcTimeout=this.context.setInterval(this._collectGarbage.bind(this),1)}static getDefaults(){return Object.assign(mu.getDefaults(),{maxPolyphony:32,options:{},voice:Yu})}get activeVoices(){return this._activeVoices.length}_makeVoiceAvailable(A){this._availableVoices.push(A);const t=this._activeVoices.findIndex(t=>t.voice===A);this._activeVoices.splice(t,1)}_getNextAvailableVoice(){if(this._availableVoices.length)return this._availableVoices.shift();if(this._voices.length<this.maxPolyphony){const A=new this.voice(Object.assign(this.options,{context:this.context,onsilence:this._makeVoiceAvailable.bind(this)}));return A.connect(this.output),this._voices.push(A),A}pM("Max polyphony exceeded. Note dropped.")}_collectGarbage(){if(this._averageActiveVoices=Math.max(.95*this._averageActiveVoices,this.activeVoices),this._availableVoices.length&&this._voices.length>Math.ceil(this._averageActiveVoices+1)){const A=this._availableVoices.shift(),t=this._voices.indexOf(A);this._voices.splice(t,1),this.context.isOffline||A.dispose()}}_triggerAttack(A,t,e){A.forEach(A=>{const n=new ql(this.context,A).toMidi(),s=this._getNextAvailableVoice();s&&(s.triggerAttack(A,t,e),this._activeVoices.push({midi:n,voice:s,released:!1}),this.log("triggerAttack",A,t))})}_triggerRelease(A,t){A.forEach(A=>{const e=new ql(this.context,A).toMidi(),n=this._activeVoices.find(({midi:A,released:t})=>A===e&&!t);n&&(n.voice.triggerRelease(t),n.released=!0,this.log("triggerRelease",A,t))})}_scheduleEvent(A,t,e,n){uM(!this.disposed,"Synth was already disposed"),e<=this.now()?"attack"===A?this._triggerAttack(t,e,n):this._triggerRelease(t,e):this.context.setTimeout(()=>{this._scheduleEvent(A,t,e,n)},e-this.now())}triggerAttack(A,t,e){Array.isArray(A)||(A=[A]);const n=this.toSeconds(t);return this._scheduleEvent("attack",A,n,e),this}triggerRelease(A,t){Array.isArray(A)||(A=[A]);const e=this.toSeconds(t);return this._scheduleEvent("release",A,e),this}triggerAttackRelease(A,t,e,n){const s=this.toSeconds(e);if(this.triggerAttack(A,s,n),GM(t)){uM(GM(A),"If the duration is an array, the notes must also be an array"),A=A;for(let e=0;e<A.length;e++){const n=t[Math.min(e,t.length-1)],i=this.toSeconds(n);uM(i>0,"The duration must be greater than 0"),this.triggerRelease(A[e],s+i)}}else{const e=this.toSeconds(t);uM(e>0,"The duration must be greater than 0"),this.triggerRelease(A,s+e)}return this}sync(){return this._syncMethod("triggerAttack",1),this._syncMethod("triggerRelease",1),this}set(A){const t=JM(A,["onsilence","context"]);return this.options=NM(this.options,t),this._voices.forEach(A=>A.set(t)),this._dummyVoice.set(t),this}get(){return this._dummyVoice.get()}releaseAll(A){const t=this.toSeconds(A);return this._activeVoices.forEach(({voice:A})=>{A.triggerRelease(t)}),this}dispose(){return super.dispose(),this._dummyVoice.dispose(),this._voices.forEach(A=>A.dispose()),this._activeVoices=[],this._availableVoices=[],this.context.clearInterval(this._gcTimeout),this}}class Su extends mu{constructor(){super(xM(Su.getDefaults(),arguments,["urls","onload","baseUrl"],"urls")),this.name="Sampler",this._activeSources=new Map;const A=xM(Su.getDefaults(),arguments,["urls","onload","baseUrl"],"urls"),t={};Object.keys(A.urls).forEach(e=>{const n=parseInt(e,10);if(uM(EM(e)||dM(n)&&isFinite(n),"url key is neither a note or midi pitch: "+e),EM(e)){const n=new gl(this.context,e).toMidi();t[n]=A.urls[e]}else dM(n)&&isFinite(n)&&(t[n]=A.urls[n])}),this._buffers=new Ol({urls:t,onload:A.onload,baseUrl:A.baseUrl,onerror:A.onerror}),this.attack=A.attack,this.release=A.release,this.curve=A.curve,this._buffers.loaded&&Promise.resolve().then(A.onload)}static getDefaults(){return Object.assign(mu.getDefaults(),{attack:0,baseUrl:"",curve:"exponential",onload:tl,onerror:tl,release:.1,urls:{}})}_findClosest(A){let t=0;for(;t<96;){if(this._buffers.has(A+t))return-t;if(this._buffers.has(A-t))return t;t++}throw new Error("No available buffers for note: "+A)}triggerAttack(A,t,e=1){return this.log("triggerAttack",A,t,e),Array.isArray(A)||(A=[A]),A.forEach(A=>{const n=Ml(new gl(this.context,A).toFrequency()),s=Math.round(n),i=n-s,o=this._findClosest(s),r=this._buffers.get(s-o),a=rl(o+i),c=new Vl({url:r,context:this.context,curve:this.curve,fadeIn:this.attack,fadeOut:this.release,playbackRate:a}).connect(this.output);c.start(t,0,r.duration/a,e),GM(this._activeSources.get(s))||this._activeSources.set(s,[]),this._activeSources.get(s).push(c),c.onended=()=>{if(this._activeSources&&this._activeSources.has(s)){const A=this._activeSources.get(s),t=A.indexOf(c);-1!==t&&A.splice(t,1)}}}),this}triggerRelease(A,t){return this.log("triggerRelease",A,t),Array.isArray(A)||(A=[A]),A.forEach(A=>{const e=new gl(this.context,A).toMidi();if(this._activeSources.has(e)&&this._activeSources.get(e).length){const A=this._activeSources.get(e);t=this.toSeconds(t),A.forEach(A=>{A.stop(t)}),this._activeSources.set(e,[])}}),this}releaseAll(A){const t=this.toSeconds(A);return this._activeSources.forEach(A=>{for(;A.length;)A.shift().stop(t)}),this}sync(){return this._syncMethod("triggerAttack",1),this._syncMethod("triggerRelease",1),this}triggerAttackRelease(A,t,e,n=1){const s=this.toSeconds(e);return this.triggerAttack(A,s,n),GM(t)?(uM(GM(A),"notes must be an array when duration is array"),A.forEach((A,e)=>{const n=t[Math.min(e,t.length-1)];this.triggerRelease(A,s+this.toSeconds(n))})):this.triggerRelease(A,s+this.toSeconds(t)),this}add(A,t,e){if(uM(EM(A)||isFinite(A),"note must be a pitch or midi: "+A),EM(A)){const n=new gl(this.context,A).toMidi();this._buffers.add(n,t,e)}else this._buffers.add(A,t,e);return this}get loaded(){return this._buffers.loaded}dispose(){return super.dispose(),this._buffers.dispose(),this._activeSources.forEach(A=>{A.forEach(A=>A.dispose())}),this._activeSources.clear(),this}}QM([lu(0)],Su.prototype,"attack",void 0),QM([lu(0)],Su.prototype,"release",void 0);class zu extends Yl{constructor(){super(xM(zu.getDefaults(),arguments,["callback","value"])),this.name="ToneEvent",this._state=new dl("stopped"),this._startOffset=0;const A=xM(zu.getDefaults(),arguments,["callback","value"]);this._loop=A.loop,this.callback=A.callback,this.value=A.value,this._loopStart=this.toTicks(A.loopStart),this._loopEnd=this.toTicks(A.loopEnd),this._playbackRate=A.playbackRate,this._probability=A.probability,this._humanize=A.humanize,this.mute=A.mute,this._playbackRate=A.playbackRate,this._state.increasing=!0,this._rescheduleEvents()}static getDefaults(){return Object.assign(Yl.getDefaults(),{callback:tl,humanize:!1,loop:!1,loopEnd:"1m",loopStart:0,mute:!1,playbackRate:1,probability:1,value:null})}_rescheduleEvents(A=-1){this._state.forEachFrom(A,A=>{let t;if("started"===A.state){-1!==A.id&&this.context.transport.clear(A.id);const e=A.time+Math.round(this.startOffset/this._playbackRate);if(!0===this._loop||dM(this._loop)&&this._loop>1){t=1/0,dM(this._loop)&&(t=this._loop*this._getLoopDuration());const n=this._state.getAfter(e);null!==n&&(t=Math.min(t,n.time-e)),t!==1/0&&(this._state.setStateAtTime("stopped",e+t+1,{id:-1}),t=new bl(this.context,t));const s=new bl(this.context,this._getLoopDuration());A.id=this.context.transport.scheduleRepeat(this._tick.bind(this),s,new bl(this.context,e),t)}else A.id=this.context.transport.schedule(this._tick.bind(this),new bl(this.context,e))}})}get state(){return this._state.getValueAtTime(this.context.transport.ticks)}get startOffset(){return this._startOffset}set startOffset(A){this._startOffset=A}get probability(){return this._probability}set probability(A){this._probability=A}get humanize(){return this._humanize}set humanize(A){this._humanize=A}start(A){const t=this.toTicks(A);return"stopped"===this._state.getValueAtTime(t)&&(this._state.add({id:-1,state:"started",time:t}),this._rescheduleEvents(t)),this}stop(A){this.cancel(A);const t=this.toTicks(A);if("started"===this._state.getValueAtTime(t)){this._state.setStateAtTime("stopped",t,{id:-1});const A=this._state.getBefore(t);let e=t;null!==A&&(e=A.time),this._rescheduleEvents(e)}return this}cancel(A){A=KM(A,-1/0);const t=this.toTicks(A);return this._state.forEachFrom(t,A=>{this.context.transport.clear(A.id)}),this._state.cancel(t),this}_tick(A){const t=this.context.transport.getTicksAtTime(A);if(!this.mute&&"started"===this._state.getValueAtTime(t)){if(this.probability<1&&Math.random()>this.probability)return;if(this.humanize){let t=.02;DM(this.humanize)||(t=this.toSeconds(this.humanize)),A+=(2*Math.random()-1)*t}this.callback(A,this.value)}}_getLoopDuration(){return Math.round((this._loopEnd-this._loopStart)/this._playbackRate)}get loop(){return this._loop}set loop(A){this._loop=A,this._rescheduleEvents()}get playbackRate(){return this._playbackRate}set playbackRate(A){this._playbackRate=A,this._rescheduleEvents()}get loopEnd(){return new bl(this.context,this._loopEnd).toSeconds()}set loopEnd(A){this._loopEnd=this.toTicks(A),this._loop&&this._rescheduleEvents()}get loopStart(){return new bl(this.context,this._loopStart).toSeconds()}set loopStart(A){this._loopStart=this.toTicks(A),this._loop&&this._rescheduleEvents()}get progress(){if(this._loop){const A=this.context.transport.ticks,t=this._state.get(A);if(null!==t&&"started"===t.state){const e=this._getLoopDuration();return(A-t.time)%e/e}return 0}return 0}dispose(){return super.dispose(),this.cancel(),this._state.dispose(),this}}class Uu extends Yl{constructor(){super(xM(Uu.getDefaults(),arguments,["callback","interval"])),this.name="Loop";const A=xM(Uu.getDefaults(),arguments,["callback","interval"]);this._event=new zu({context:this.context,callback:this._tick.bind(this),loop:!0,loopEnd:A.interval,playbackRate:A.playbackRate,probability:A.probability}),this.callback=A.callback,this.iterations=A.iterations}static getDefaults(){return Object.assign(Yl.getDefaults(),{interval:"4n",callback:tl,playbackRate:1,iterations:1/0,probability:1,mute:!1,humanize:!1})}start(A){return this._event.start(A),this}stop(A){return this._event.stop(A),this}cancel(A){return this._event.cancel(A),this}_tick(A){this.callback(A)}get state(){return this._event.state}get progress(){return this._event.progress}get interval(){return this._event.loopEnd}set interval(A){this._event.loopEnd=A}get playbackRate(){return this._event.playbackRate}set playbackRate(A){this._event.playbackRate=A}get humanize(){return this._event.humanize}set humanize(A){this._event.humanize=A}get probability(){return this._event.probability}set probability(A){this._event.probability=A}get mute(){return this._event.mute}set mute(A){this._event.mute=A}get iterations(){return!0===this._event.loop?1/0:this._event.loop}set iterations(A){this._event.loop=A===1/0||A}dispose(){return super.dispose(),this._event.dispose(),this}}class bu extends Dl{constructor(){super(Object.assign(xM(bu.getDefaults(),arguments,["pan"]))),this.name="Panner",this._panner=this.context.createStereoPanner(),this.input=this._panner,this.output=this._panner;const A=xM(bu.getDefaults(),arguments,["pan"]);this.pan=new Bl({context:this.context,param:this._panner.pan,value:A.pan,minValue:-1,maxValue:1}),this._panner.channelCount=A.channelCount,this._panner.channelCountMode="explicit",$M(this,"pan")}static getDefaults(){return Object.assign(Dl.getDefaults(),{pan:0,channelCount:1})}dispose(){return super.dispose(),this._panner.disconnect(),this.pan.dispose(),this}}Eu("bit-crusher","\n\tclass BitCrusherWorklet extends SingleIOProcessor {\n\n\t\tstatic get parameterDescriptors() {\n\t\t\treturn [{\n\t\t\t\tname: \"bits\",\n\t\t\t\tdefaultValue: 12,\n\t\t\t\tminValue: 1,\n\t\t\t\tmaxValue: 16,\n\t\t\t\tautomationRate: 'k-rate'\n\t\t\t}];\n\t\t}\n\n\t\tgenerate(input, _channel, parameters) {\n\t\t\tconst step = Math.pow(0.5, parameters.bits - 1);\n\t\t\tconst val = step * Math.floor(input / step + 0.5);\n\t\t\treturn val;\n\t\t}\n\t}\n");class ju extends Dl{constructor(){super(xM(ju.getDefaults(),arguments,["solo"])),this.name="Solo";const A=xM(ju.getDefaults(),arguments,["solo"]);this.input=this.output=new El({context:this.context}),ju._allSolos.has(this.context)||ju._allSolos.set(this.context,new Set),ju._allSolos.get(this.context).add(this),this.solo=A.solo}static getDefaults(){return Object.assign(Dl.getDefaults(),{solo:!1})}get solo(){return this._isSoloed()}set solo(A){A?this._addSolo():this._removeSolo(),ju._allSolos.get(this.context).forEach(A=>A._updateSolo())}get muted(){return 0===this.input.gain.value}_addSolo(){ju._soloed.has(this.context)||ju._soloed.set(this.context,new Set),ju._soloed.get(this.context).add(this)}_removeSolo(){ju._soloed.has(this.context)&&ju._soloed.get(this.context).delete(this)}_isSoloed(){return ju._soloed.has(this.context)&&ju._soloed.get(this.context).has(this)}_noSolos(){return!ju._soloed.has(this.context)||ju._soloed.has(this.context)&&0===ju._soloed.get(this.context).size}_updateSolo(){this.input.gain.value=this._isSoloed()||this._noSolos()?1:0}dispose(){return super.dispose(),ju._allSolos.get(this.context).delete(this),this._removeSolo(),this}}ju._allSolos=new Map,ju._soloed=new Map;class Nu extends Dl{constructor(){super(xM(Nu.getDefaults(),arguments,["pan","volume"])),this.name="PanVol";const A=xM(Nu.getDefaults(),arguments,["pan","volume"]);this._panner=this.input=new bu({context:this.context,pan:A.pan,channelCount:A.channelCount}),this.pan=this._panner.pan,this._volume=this.output=new Rl({context:this.context,volume:A.volume}),this.volume=this._volume.volume,this._panner.connect(this._volume),this.mute=A.mute,$M(this,["pan","volume"])}static getDefaults(){return Object.assign(Dl.getDefaults(),{mute:!1,pan:0,volume:0,channelCount:1})}get mute(){return this._volume.mute}set mute(A){this._volume.mute=A}dispose(){return super.dispose(),this._panner.dispose(),this.pan.dispose(),this._volume.dispose(),this.volume.dispose(),this}}class xu extends Dl{constructor(){super(xM(xu.getDefaults(),arguments,["volume","pan"])),this.name="Channel";const A=xM(xu.getDefaults(),arguments,["volume","pan"]);this._solo=this.input=new ju({solo:A.solo,context:this.context}),this._panVol=this.output=new Nu({context:this.context,pan:A.pan,volume:A.volume,mute:A.mute,channelCount:A.channelCount}),this.pan=this._panVol.pan,this.volume=this._panVol.volume,this._solo.connect(this._panVol),$M(this,["pan","volume"])}static getDefaults(){return Object.assign(Dl.getDefaults(),{pan:0,volume:0,mute:!1,solo:!1,channelCount:1})}get solo(){return this._solo.solo}set solo(A){this._solo.solo=A}get muted(){return this._solo.muted||this.mute}get mute(){return this._panVol.mute}set mute(A){this._panVol.mute=A}_getBus(A){return xu.buses.has(A)||xu.buses.set(A,new El({context:this.context})),xu.buses.get(A)}send(A,t=0){const e=this._getBus(A),n=new El({context:this.context,units:"decibels",gain:t});return this.connect(n),n.connect(e),n}receive(A){return this._getBus(A).connect(this),this}dispose(){return super.dispose(),this._panVol.dispose(),this.pan.dispose(),this.volume.dispose(),this._solo.dispose(),this}}xu.buses=new Map;class Ku extends Dl{constructor(){super(...arguments),this.name="Listener",this.positionX=new Bl({context:this.context,param:this.context.rawContext.listener.positionX}),this.positionY=new Bl({context:this.context,param:this.context.rawContext.listener.positionY}),this.positionZ=new Bl({context:this.context,param:this.context.rawContext.listener.positionZ}),this.forwardX=new Bl({context:this.context,param:this.context.rawContext.listener.forwardX}),this.forwardY=new Bl({context:this.context,param:this.context.rawContext.listener.forwardY}),this.forwardZ=new Bl({context:this.context,param:this.context.rawContext.listener.forwardZ}),this.upX=new Bl({context:this.context,param:this.context.rawContext.listener.upX}),this.upY=new Bl({context:this.context,param:this.context.rawContext.listener.upY}),this.upZ=new Bl({context:this.context,param:this.context.rawContext.listener.upZ})}static getDefaults(){return Object.assign(Dl.getDefaults(),{positionX:0,positionY:0,positionZ:0,forwardX:0,forwardY:0,forwardZ:-1,upX:0,upY:1,upZ:0})}dispose(){return super.dispose(),this.positionX.dispose(),this.positionY.dispose(),this.positionZ.dispose(),this.forwardX.dispose(),this.forwardY.dispose(),this.forwardZ.dispose(),this.upX.dispose(),this.upY.dispose(),this.upZ.dispose(),this}}LM(A=>{A.listener=new Ku({context:A})}),vM(A=>{A.listener.dispose()});const Ju=ol().transport,Ru=ol().destination;ol(),ol(),ol(),ol();let Wu=(()=>{class A{constructor(A){this.padService=A,this.myChordsSubject=new C,this.myList=[],this.transformedList=[]}getPad(){this.padSubscription=this.padService.myPadSubject.subscribe(A=>{this.pad=A,this.chooseChords()})}updateChords(A){this.chords=A,this.emitChords()}emitChords(){this.myChordsSubject.next(this.chords)}chooseChords(){this.pad.valenceValue>0?(this.transformedList=[],this.chords=[["D3","F3","A3"],["D#3","G3","A#3"],["A3","C#4","E4"],["A3","C#4","E4"]],this.updateChords(this.arpeggiator(this.chords))):(this.pad.valenceValue<0||this.pad.arousalValue<-70)&&(this.chords=[["A3","C4","E4"],["G3","B3","D4"],["E3","G3","B3"],["F3","A3","C4"]],this.updateChords(this.plaque(this.chords)))}arpeggiator(A){return this.transformedList=[],A.forEach(A=>{A.push(A[1]),A.forEach((t,e)=>{this.myList=A.slice(e,e+1),this.transformedList.length<4*this.chords.length&&this.transformedList.push(this.myList)})}),this.transformedList}plaque(A){return this.transformedList=[],A.forEach(A=>{A.forEach((t,e)=>{this.transformedList.length<4*this.chords.length&&this.transformedList.push(A)})}),this.transformedList}}return A.\u0275fac=function(t){return new(t||A)(FA(ka))},A.\u0275prov=rA({token:A,factory:A.\u0275fac,providedIn:"root"}),A})();const Ou=new bA("NgValueAccessor");function qu(A){return 0===A.buttons}"undefined"!=typeof Element&&Element;const Fu=new bA("cdk-focus-monitor-default-options"),fu=oc({passive:!0,capture:!0});let Vu=(()=>{class A{constructor(A,t,e,n){this._ngZone=A,this._platform=t,this._origin=null,this._windowFocused=!1,this._elementInfo=new Map,this._monitoredElementCount=0,this._rootNodeFocusListenerCount=new Map,this._documentKeydownListener=()=>{this._lastTouchTarget=null,this._setOriginForCurrentEventQueue("keyboard")},this._documentMousedownListener=A=>{if(!this._lastTouchTarget){const t=qu(A)?"keyboard":"mouse";this._setOriginForCurrentEventQueue(t)}},this._documentTouchstartListener=A=>{null!=this._touchTimeoutId&&clearTimeout(this._touchTimeoutId),this._lastTouchTarget=Lu(A),this._touchTimeoutId=setTimeout(()=>this._lastTouchTarget=null,650)},this._windowFocusListener=()=>{this._windowFocused=!0,this._windowFocusTimeoutId=setTimeout(()=>this._windowFocused=!1)},this._rootNodeFocusAndBlurListener=A=>{const t=Lu(A),e="focus"===A.type?this._onFocus:this._onBlur;for(let n=t;n;n=n.parentElement)e.call(this,A,n)},this._document=e,this._detectionMode=(null==n?void 0:n.detectionMode)||0}monitor(A,t=!1){if(!this._platform.isBrowser)return Ua(null);const e=za(A),n=rc(e)||this._getDocument(),s=this._elementInfo.get(e);if(s)return t&&(s.checkChildren=!0),s.subject.asObservable();const i={checkChildren:t,subject:new C,rootNode:n};return this._elementInfo.set(e,i),this._registerGlobalListeners(i),i.subject.asObservable()}stopMonitoring(A){const t=za(A),e=this._elementInfo.get(t);e&&(e.subject.complete(),this._setClasses(t),this._elementInfo.delete(t),this._removeGlobalListeners(e))}focusVia(A,t,e){const n=za(A);this._setOriginForCurrentEventQueue(t),"function"==typeof n.focus&&n.focus(e)}ngOnDestroy(){this._elementInfo.forEach((A,t)=>this.stopMonitoring(t))}_getDocument(){return this._document||document}_getWindow(){return this._getDocument().defaultView||window}_toggleClass(A,t,e){e?A.classList.add(t):A.classList.remove(t)}_getFocusOrigin(A){return this._origin?this._origin:this._windowFocused&&this._lastFocusOrigin?this._lastFocusOrigin:this._wasCausedByTouch(A)?"touch":"program"}_setClasses(A,t){this._toggleClass(A,"cdk-focused",!!t),this._toggleClass(A,"cdk-touch-focused","touch"===t),this._toggleClass(A,"cdk-keyboard-focused","keyboard"===t),this._toggleClass(A,"cdk-mouse-focused","mouse"===t),this._toggleClass(A,"cdk-program-focused","program"===t)}_setOriginForCurrentEventQueue(A){this._ngZone.runOutsideAngular(()=>{this._origin=A,0===this._detectionMode&&(this._originTimeoutId=setTimeout(()=>this._origin=null,1))})}_wasCausedByTouch(A){const t=Lu(A);return this._lastTouchTarget instanceof Node&&t instanceof Node&&(t===this._lastTouchTarget||t.contains(this._lastTouchTarget))}_onFocus(A,t){const e=this._elementInfo.get(t);if(!e||!e.checkChildren&&t!==Lu(A))return;const n=this._getFocusOrigin(A);this._setClasses(t,n),this._emitOrigin(e.subject,n),this._lastFocusOrigin=n}_onBlur(A,t){const e=this._elementInfo.get(t);!e||e.checkChildren&&A.relatedTarget instanceof Node&&t.contains(A.relatedTarget)||(this._setClasses(t),this._emitOrigin(e.subject,null))}_emitOrigin(A,t){this._ngZone.run(()=>A.next(t))}_registerGlobalListeners(A){if(!this._platform.isBrowser)return;const t=A.rootNode,e=this._rootNodeFocusListenerCount.get(t)||0;e||this._ngZone.runOutsideAngular(()=>{t.addEventListener("focus",this._rootNodeFocusAndBlurListener,fu),t.addEventListener("blur",this._rootNodeFocusAndBlurListener,fu)}),this._rootNodeFocusListenerCount.set(t,e+1),1==++this._monitoredElementCount&&this._ngZone.runOutsideAngular(()=>{const A=this._getDocument(),t=this._getWindow();A.addEventListener("keydown",this._documentKeydownListener,fu),A.addEventListener("mousedown",this._documentMousedownListener,fu),A.addEventListener("touchstart",this._documentTouchstartListener,fu),t.addEventListener("focus",this._windowFocusListener)})}_removeGlobalListeners(A){const t=A.rootNode;if(this._rootNodeFocusListenerCount.has(t)){const A=this._rootNodeFocusListenerCount.get(t);A>1?this._rootNodeFocusListenerCount.set(t,A-1):(t.removeEventListener("focus",this._rootNodeFocusAndBlurListener,fu),t.removeEventListener("blur",this._rootNodeFocusAndBlurListener,fu),this._rootNodeFocusListenerCount.delete(t))}if(!--this._monitoredElementCount){const A=this._getDocument(),t=this._getWindow();A.removeEventListener("keydown",this._documentKeydownListener,fu),A.removeEventListener("mousedown",this._documentMousedownListener,fu),A.removeEventListener("touchstart",this._documentTouchstartListener,fu),t.removeEventListener("focus",this._windowFocusListener),clearTimeout(this._windowFocusTimeoutId),clearTimeout(this._touchTimeoutId),clearTimeout(this._originTimeoutId)}}}return A.\u0275fac=function(t){return new(t||A)(FA(Er),FA(sc),FA(vr,8),FA(Fu,8))},A.\u0275prov=rA({factory:function(){return new A(FA(Er),FA(sc),FA(vr,8),FA(Fu,8))},token:A,providedIn:"root"}),A})();function Lu(A){return A.composedPath?A.composedPath()[0]:A.target}let Hu=(()=>{class A{constructor(A,t){this._platform=A,this._document=t}getHighContrastMode(){if(!this._platform.isBrowser)return 0;const A=this._document.createElement("div");A.style.backgroundColor="rgb(1,2,3)",A.style.position="absolute",this._document.body.appendChild(A);const t=this._document.defaultView||window,e=t&&t.getComputedStyle?t.getComputedStyle(A):null,n=(e&&e.backgroundColor||"").replace(/ /g,"");switch(this._document.body.removeChild(A),n){case"rgb(0,0,0)":return 2;case"rgb(255,255,255)":return 1}return 0}_applyBodyHighContrastModeCssClasses(){if(this._platform.isBrowser&&this._document.body){const A=this._document.body.classList;A.remove("cdk-high-contrast-active"),A.remove("cdk-high-contrast-black-on-white"),A.remove("cdk-high-contrast-white-on-black");const t=this.getHighContrastMode();1===t?(A.add("cdk-high-contrast-active"),A.add("cdk-high-contrast-black-on-white")):2===t&&(A.add("cdk-high-contrast-active"),A.add("cdk-high-contrast-white-on-black"))}}}return A.\u0275fac=function(t){return new(t||A)(FA(sc),FA(vr))},A.\u0275prov=rA({factory:function(){return new A(FA(sc),FA(vr))},token:A,providedIn:"root"}),A})();const vu=new to("10.0.1");function Pu(){return"undefined"!=typeof process&&"[object process]"==={}.toString.call(process)}let Xu=(A,t)=>!1,_u=(A,t)=>!1,$u=(A,t,e)=>[];const Ah=Pu();(Ah||"undefined"!=typeof Element)&&((A,t)=>A.contains(t),_u=(()=>{if(Ah||Element.prototype.matches)return(A,t)=>A.matches(t);{const A=Element.prototype,t=A.matchesSelector||A.mozMatchesSelector||A.msMatchesSelector||A.oMatchesSelector||A.webkitMatchesSelector;return t?(A,e)=>t.apply(A,[e]):_u}})());const th=new bA("AnimationModuleType"),eh=new to("10.0.1"),nh=new bA("mat-sanity-checks",{providedIn:"root",factory:function(){return!0}});let sh,ih=(()=>{class A{constructor(A,t,e){this._hasDoneGlobalChecks=!1,this._document=e,A._applyBodyHighContrastModeCssClasses(),this._sanityChecks=t,this._hasDoneGlobalChecks||(this._checkDoctypeIsDefined(),this._checkThemeIsPresent(),this._checkCdkVersionMatch(),this._hasDoneGlobalChecks=!0)}_getDocument(){const A=this._document||document;return"object"==typeof A&&A?A:null}_getWindow(){const A=this._getDocument(),t=(null==A?void 0:A.defaultView)||window;return"object"==typeof t&&t?t:null}_checksAreEnabled(){return _e()&&!this._isTestEnv()}_isTestEnv(){const A=this._getWindow();return A&&(A.__karma__||A.jasmine)}_checkDoctypeIsDefined(){const A=this._checksAreEnabled()&&(!0===this._sanityChecks||this._sanityChecks.doctype),t=this._getDocument();A&&t&&!t.doctype&&console.warn("Current document does not have a doctype. This may cause some Angular Material components not to behave as expected.")}_checkThemeIsPresent(){const A=!this._checksAreEnabled()||!1===this._sanityChecks||!this._sanityChecks.theme,t=this._getDocument();if(A||!t||!t.body||"function"!=typeof getComputedStyle)return;const e=t.createElement("div");e.classList.add("mat-theme-loaded-marker"),t.body.appendChild(e);const n=getComputedStyle(e);n&&"none"!==n.display&&console.warn("Could not find Angular Material core theme. Most Material components may not work as expected. For more info refer to the theming guide: https://material.angular.io/guide/theming"),t.body.removeChild(e)}_checkCdkVersionMatch(){this._checksAreEnabled()&&(!0===this._sanityChecks||this._sanityChecks.version)&&eh.full!==vu.full&&console.warn("The Angular Material version ("+eh.full+") does not match the Angular CDK version ("+vu.full+").\nPlease ensure the versions of these two packages exactly match.")}}return A.\u0275mod=ut({type:A}),A.\u0275inj=aA({factory:function(t){return new(t||A)(FA(Hu),FA(nh,8),FA(vr,8))},imports:[[Mc],Mc]}),A})();function oh(A){return class extends A{constructor(...A){super(...A),this._disableRipple=!1}get disableRipple(){return this._disableRipple}set disableRipple(A){this._disableRipple=Sa(A)}}}try{sh="undefined"!=typeof Intl}catch(Sh){sh=!1}class rh{constructor(A,t,e){this._renderer=A,this.element=t,this.config=e,this.state=3}fadeOut(){this._renderer.fadeOutRipple(this)}}const ah={enterDuration:450,exitDuration:400},ch=oc({passive:!0}),Mh=["mousedown","touchstart"],lh=["mouseup","mouseleave","touchend","touchcancel"];class uh{constructor(A,t,e,n){this._target=A,this._ngZone=t,this._isPointerDown=!1,this._activeRipples=new Set,this._pointerUpEventsRegistered=!1,n.isBrowser&&(this._containerElement=za(e))}fadeInRipple(A,t,e={}){const n=this._containerRect=this._containerRect||this._containerElement.getBoundingClientRect(),s=Object.assign(Object.assign({},ah),e.animation);e.centered&&(A=n.left+n.width/2,t=n.top+n.height/2);const i=e.radius||function(A,t,e){const n=Math.max(Math.abs(A-e.left),Math.abs(A-e.right)),s=Math.max(Math.abs(t-e.top),Math.abs(t-e.bottom));return Math.sqrt(n*n+s*s)}(A,t,n),o=A-n.left,r=t-n.top,a=s.enterDuration,c=document.createElement("div");c.classList.add("mat-ripple-element"),c.style.left=o-i+"px",c.style.top=r-i+"px",c.style.height=2*i+"px",c.style.width=2*i+"px",null!=e.color&&(c.style.backgroundColor=e.color),c.style.transitionDuration=a+"ms",this._containerElement.appendChild(c),window.getComputedStyle(c).getPropertyValue("opacity"),c.style.transform="scale(1)";const M=new rh(this,c,e);return M.state=0,this._activeRipples.add(M),e.persistent||(this._mostRecentTransientRipple=M),this._runTimeoutOutsideZone(()=>{const A=M===this._mostRecentTransientRipple;M.state=1,e.persistent||A&&this._isPointerDown||M.fadeOut()},a),M}fadeOutRipple(A){const t=this._activeRipples.delete(A);if(A===this._mostRecentTransientRipple&&(this._mostRecentTransientRipple=null),this._activeRipples.size||(this._containerRect=null),!t)return;const e=A.element,n=Object.assign(Object.assign({},ah),A.config.animation);e.style.transitionDuration=n.exitDuration+"ms",e.style.opacity="0",A.state=2,this._runTimeoutOutsideZone(()=>{A.state=3,e.parentNode.removeChild(e)},n.exitDuration)}fadeOutAll(){this._activeRipples.forEach(A=>A.fadeOut())}setupTriggerEvents(A){const t=za(A);t&&t!==this._triggerElement&&(this._removeTriggerEvents(),this._triggerElement=t,this._registerEvents(Mh))}handleEvent(A){"mousedown"===A.type?this._onMousedown(A):"touchstart"===A.type?this._onTouchStart(A):this._onPointerUp(),this._pointerUpEventsRegistered||(this._registerEvents(lh),this._pointerUpEventsRegistered=!0)}_onMousedown(A){const t=qu(A),e=this._lastTouchStartEvent&&Date.now()<this._lastTouchStartEvent+800;this._target.rippleDisabled||t||e||(this._isPointerDown=!0,this.fadeInRipple(A.clientX,A.clientY,this._target.rippleConfig))}_onTouchStart(A){if(!this._target.rippleDisabled){this._lastTouchStartEvent=Date.now(),this._isPointerDown=!0;const t=A.changedTouches;for(let A=0;A<t.length;A++)this.fadeInRipple(t[A].clientX,t[A].clientY,this._target.rippleConfig)}}_onPointerUp(){this._isPointerDown&&(this._isPointerDown=!1,this._activeRipples.forEach(A=>{!A.config.persistent&&(1===A.state||A.config.terminateOnPointerUp&&0===A.state)&&A.fadeOut()}))}_runTimeoutOutsideZone(A,t=0){this._ngZone.runOutsideAngular(()=>setTimeout(A,t))}_registerEvents(A){this._ngZone.runOutsideAngular(()=>{A.forEach(A=>{this._triggerElement.addEventListener(A,this,ch)})})}_removeTriggerEvents(){this._triggerElement&&(Mh.forEach(A=>{this._triggerElement.removeEventListener(A,this,ch)}),this._pointerUpEventsRegistered&&lh.forEach(A=>{this._triggerElement.removeEventListener(A,this,ch)}))}}const hh=new bA("mat-ripple-global-options");let gh=(()=>{class A{constructor(A,t,e,n,s){this._elementRef=A,this._animationMode=s,this.radius=0,this._disabled=!1,this._isInitialized=!1,this._globalOptions=n||{},this._rippleRenderer=new uh(this,t,A,e)}get disabled(){return this._disabled}set disabled(A){this._disabled=A,this._setupTriggerEventsIfEnabled()}get trigger(){return this._trigger||this._elementRef.nativeElement}set trigger(A){this._trigger=A,this._setupTriggerEventsIfEnabled()}ngOnInit(){this._isInitialized=!0,this._setupTriggerEventsIfEnabled()}ngOnDestroy(){this._rippleRenderer._removeTriggerEvents()}fadeOutAll(){this._rippleRenderer.fadeOutAll()}get rippleConfig(){return{centered:this.centered,radius:this.radius,color:this.color,animation:Object.assign(Object.assign(Object.assign({},this._globalOptions.animation),"NoopAnimations"===this._animationMode?{enterDuration:0,exitDuration:0}:{}),this.animation),terminateOnPointerUp:this._globalOptions.terminateOnPointerUp}}get rippleDisabled(){return this.disabled||!!this._globalOptions.disabled}_setupTriggerEventsIfEnabled(){!this.disabled&&this._isInitialized&&this._rippleRenderer.setupTriggerEvents(this.trigger)}launch(A,t=0,e){return"number"==typeof A?this._rippleRenderer.fadeInRipple(A,t,Object.assign(Object.assign({},this.rippleConfig),e)):this._rippleRenderer.fadeInRipple(0,0,Object.assign(Object.assign({},this.rippleConfig),A))}}return A.\u0275fac=function(t){return new(t||A)(ri(Hi),ri(Er),ri(sc),ri(hh,8),ri(th,8))},A.\u0275dir=gt({type:A,selectors:[["","mat-ripple",""],["","matRipple",""]],hostAttrs:[1,"mat-ripple"],hostVars:2,hostBindings:function(A,t){2&A&&Bi("mat-ripple-unbounded",t.unbounded)},inputs:{radius:["matRippleRadius","radius"],disabled:["matRippleDisabled","disabled"],trigger:["matRippleTrigger","trigger"],color:["matRippleColor","color"],unbounded:["matRippleUnbounded","unbounded"],centered:["matRippleCentered","centered"],animation:["matRippleAnimation","animation"]},exportAs:["matRipple"]}),A})(),mh=(()=>{class A{}return A.\u0275mod=ut({type:A}),A.\u0275inj=aA({factory:function(t){return new(t||A)},imports:[[ih,ic],ih]}),A})();const ph=["button"],wh=["*"],Yh=new bA("MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS"),dh={provide:Ou,useExisting:BA(()=>Gh),multi:!0};let Bh=0;class Dh{constructor(A,t){this.source=A,this.value=t}}let Gh=(()=>{class A{constructor(A,t){this._changeDetector=A,this._vertical=!1,this._multiple=!1,this._disabled=!1,this._controlValueAccessorChangeFn=()=>{},this._onTouched=()=>{},this._name="mat-button-toggle-group-"+Bh++,this.valueChange=new Jo,this.change=new Jo,this.appearance=t&&t.appearance?t.appearance:"standard"}get name(){return this._name}set name(A){this._name=A,this._buttonToggles&&this._buttonToggles.forEach(A=>{A.name=this._name,A._markForCheck()})}get vertical(){return this._vertical}set vertical(A){this._vertical=Sa(A)}get value(){const A=this._selectionModel?this._selectionModel.selected:[];return this.multiple?A.map(A=>A.value):A[0]?A[0].value:void 0}set value(A){this._setSelectionByValue(A),this.valueChange.emit(this.value)}get selected(){const A=this._selectionModel?this._selectionModel.selected:[];return this.multiple?A:A[0]||null}get multiple(){return this._multiple}set multiple(A){this._multiple=Sa(A)}get disabled(){return this._disabled}set disabled(A){this._disabled=Sa(A),this._buttonToggles&&this._buttonToggles.forEach(A=>A._markForCheck())}ngOnInit(){this._selectionModel=new lc(this.multiple,void 0,!1)}ngAfterContentInit(){this._selectionModel.select(...this._buttonToggles.filter(A=>A.checked))}writeValue(A){this.value=A,this._changeDetector.markForCheck()}registerOnChange(A){this._controlValueAccessorChangeFn=A}registerOnTouched(A){this._onTouched=A}setDisabledState(A){this.disabled=A}_emitChangeEvent(){const A=this.selected,t=Array.isArray(A)?A[A.length-1]:A,e=new Dh(t,this.value);this._controlValueAccessorChangeFn(e.value),this.change.emit(e)}_syncButtonToggle(A,t,e=!1,n=!1){this.multiple||!this.selected||A.checked||(this.selected.checked=!1),this._selectionModel?t?this._selectionModel.select(A):this._selectionModel.deselect(A):n=!0,n?Promise.resolve().then(()=>this._updateModelValue(e)):this._updateModelValue(e)}_isSelected(A){return this._selectionModel&&this._selectionModel.isSelected(A)}_isPrechecked(A){return void 0!==this._rawValue&&(this.multiple&&Array.isArray(this._rawValue)?this._rawValue.some(t=>null!=A.value&&t===A.value):A.value===this._rawValue)}_setSelectionByValue(A){if(this._rawValue=A,this._buttonToggles)if(this.multiple&&A){if(!Array.isArray(A))throw Error("Value must be an array in multiple-selection mode.");this._clearSelection(),A.forEach(A=>this._selectValue(A))}else this._clearSelection(),this._selectValue(A)}_clearSelection(){this._selectionModel.clear(),this._buttonToggles.forEach(A=>A.checked=!1)}_selectValue(A){const t=this._buttonToggles.find(t=>null!=t.value&&t.value===A);t&&(t.checked=!0,this._selectionModel.select(t))}_updateModelValue(A){A&&this._emitChangeEvent(),this.valueChange.emit(this.value)}}return A.\u0275fac=function(t){return new(t||A)(ri(xs),ri(Yh,8))},A.\u0275dir=gt({type:A,selectors:[["mat-button-toggle-group"]],contentQueries:function(A,t,e){var n;1&A&&_o(e,Ih,!0),2&A&&Po(n=$o())&&(t._buttonToggles=n)},hostAttrs:["role","group",1,"mat-button-toggle-group"],hostVars:5,hostBindings:function(A,t){2&A&&(oi("aria-disabled",t.disabled),Bi("mat-button-toggle-vertical",t.vertical)("mat-button-toggle-group-appearance-standard","standard"===t.appearance))},inputs:{appearance:"appearance",name:"name",vertical:"vertical",value:"value",multiple:"multiple",disabled:"disabled"},outputs:{valueChange:"valueChange",change:"change"},exportAs:["matButtonToggleGroup"],features:[Fi([dh])]}),A})();class Ch{}const Eh=oh(Ch);let Ih=(()=>{class A extends Eh{constructor(A,t,e,n,s,i){super(),this._changeDetectorRef=t,this._elementRef=e,this._focusMonitor=n,this._isSingleSelector=!1,this._checked=!1,this.ariaLabelledby=null,this._disabled=!1,this.change=new Jo;const o=Number(s);this.tabIndex=o||0===o?o:null,this.buttonToggleGroup=A,this.appearance=i&&i.appearance?i.appearance:"standard"}get buttonId(){return this.id+"-button"}get appearance(){return this.buttonToggleGroup?this.buttonToggleGroup.appearance:this._appearance}set appearance(A){this._appearance=A}get checked(){return this.buttonToggleGroup?this.buttonToggleGroup._isSelected(this):this._checked}set checked(A){const t=Sa(A);t!==this._checked&&(this._checked=t,this.buttonToggleGroup&&this.buttonToggleGroup._syncButtonToggle(this,this._checked),this._changeDetectorRef.markForCheck())}get disabled(){return this._disabled||this.buttonToggleGroup&&this.buttonToggleGroup.disabled}set disabled(A){this._disabled=Sa(A)}ngOnInit(){const A=this.buttonToggleGroup;this._isSingleSelector=A&&!A.multiple,this.id=this.id||"mat-button-toggle-"+Bh++,this._isSingleSelector&&(this.name=A.name),A&&(A._isPrechecked(this)?this.checked=!0:A._isSelected(this)!==this._checked&&A._syncButtonToggle(this,this._checked))}ngAfterViewInit(){this._focusMonitor.monitor(this._elementRef,!0)}ngOnDestroy(){const A=this.buttonToggleGroup;this._focusMonitor.stopMonitoring(this._elementRef),A&&A._isSelected(this)&&A._syncButtonToggle(this,!1,!1,!0)}focus(A){this._buttonElement.nativeElement.focus(A)}_onButtonClick(){const A=!!this._isSingleSelector||!this._checked;A!==this._checked&&(this._checked=A,this.buttonToggleGroup&&(this.buttonToggleGroup._syncButtonToggle(this,this._checked,!0),this.buttonToggleGroup._onTouched())),this.change.emit(new Dh(this,this.value))}_markForCheck(){this._changeDetectorRef.markForCheck()}}return A.\u0275fac=function(t){return new(t||A)(ri(Gh,8),ri(xs),ri(Hi),ri(Vu),("tabindex",function(A,t){const e=A.attrs;if(e){const A=e.length;let t=0;for(;t<A;){const n=e[t];if(Ye(n))break;if(0===n)t+=2;else if("number"==typeof n)for(t++;t<A&&"string"==typeof e[t];)t++;else{if("tabindex"===n)return e[t+1];t+=2}}}return null}(qt())),ri(Yh,8))},A.\u0275cmp=at({type:A,selectors:[["mat-button-toggle"]],viewQuery:function(A,t){var e;1&A&&Xo(ph,!0),2&A&&Po(e=$o())&&(t._buttonElement=e.first)},hostAttrs:[1,"mat-button-toggle"],hostVars:11,hostBindings:function(A,t){1&A&&gi("focus",(function(){return t.focus()})),2&A&&(oi("tabindex",-1)("id",t.id)("name",null),Bi("mat-button-toggle-standalone",!t.buttonToggleGroup)("mat-button-toggle-checked",t.checked)("mat-button-toggle-disabled",t.disabled)("mat-button-toggle-appearance-standard","standard"===t.appearance))},inputs:{disableRipple:"disableRipple",ariaLabelledby:["aria-labelledby","ariaLabelledby"],tabIndex:"tabIndex",appearance:"appearance",checked:"checked",disabled:"disabled",id:"id",name:"name",ariaLabel:["aria-label","ariaLabel"],value:"value"},outputs:{change:"change"},exportAs:["matButtonToggle"],features:[Zi],ngContentSelectors:wh,decls:6,vars:9,consts:[["type","button",1,"mat-button-toggle-button","mat-focus-indicator",3,"id","disabled","click"],["button",""],[1,"mat-button-toggle-label-content"],[1,"mat-button-toggle-focus-overlay"],["matRipple","",1,"mat-button-toggle-ripple",3,"matRippleTrigger","matRippleDisabled"]],template:function(A,t){if(1&A&&(function(A){const t=Wt()[16][6];if(!t.projection){const A=t.projection=$A(1,null),e=A.slice();let n=t.child;for(;null!==n;){const t=0;null!==t&&(e[t]?e[t].projectionNext=n:A[t]=n,e[t]=n),n=n.next}}}(),Mi(0,"button",0,1),gi("click",(function(){return t._onButtonClick()})),Mi(2,"div",2),function(A,t=0,e){const n=Wt(),s=Ot(),i=Tn(s,n[6],A,1,null,e||null);null===i.projection&&(i.projection=t),Vt(),function(A,t,e){ys(t[11],0,t,e,ps(A,e,t),Ds(e.parent||t[6],t))}(s,n,i)}(3),li(),li(),ui(4,"div",3),ui(5,"div",4)),2&A){const A=Jt.lFrame.contextLView[21];ai("id",t.buttonId)("disabled",t.disabled||null),oi("tabindex",t.disabled?-1:t.tabIndex)("aria-pressed",t.checked)("name",t.name||null)("aria-label",t.ariaLabel)("aria-labelledby",t.ariaLabelledby),Yn(5),ai("matRippleTrigger",A)("matRippleDisabled",t.disableRipple||t.disabled)}},directives:[gh],styles:[".mat-button-toggle-standalone,.mat-button-toggle-group{position:relative;display:inline-flex;flex-direction:row;white-space:nowrap;overflow:hidden;border-radius:2px;-webkit-tap-highlight-color:transparent}.cdk-high-contrast-active .mat-button-toggle-standalone,.cdk-high-contrast-active .mat-button-toggle-group{outline:solid 1px}.mat-button-toggle-standalone.mat-button-toggle-appearance-standard,.mat-button-toggle-group-appearance-standard{border-radius:4px}.cdk-high-contrast-active .mat-button-toggle-standalone.mat-button-toggle-appearance-standard,.cdk-high-contrast-active .mat-button-toggle-group-appearance-standard{outline:0}.mat-button-toggle-vertical{flex-direction:column}.mat-button-toggle-vertical .mat-button-toggle-label-content{display:block}.mat-button-toggle{white-space:nowrap;position:relative}.mat-button-toggle .mat-icon svg{vertical-align:top}.mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:1}.cdk-high-contrast-active .mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:.5}.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{opacity:.04}.mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:.12}.cdk-high-contrast-active .mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:.5}@media(hover: none){.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{display:none}}.mat-button-toggle-label-content{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;display:inline-block;line-height:36px;padding:0 16px;position:relative}.mat-button-toggle-appearance-standard .mat-button-toggle-label-content{padding:0 12px}.mat-button-toggle-label-content>*{vertical-align:middle}.mat-button-toggle-focus-overlay{border-radius:inherit;pointer-events:none;opacity:0;top:0;left:0;right:0;bottom:0;position:absolute}.mat-button-toggle-checked .mat-button-toggle-focus-overlay{border-bottom:solid 36px}.cdk-high-contrast-active .mat-button-toggle-checked .mat-button-toggle-focus-overlay{opacity:.5;height:0}.cdk-high-contrast-active .mat-button-toggle-checked.mat-button-toggle-appearance-standard .mat-button-toggle-focus-overlay{border-bottom:solid 500px}.mat-button-toggle .mat-button-toggle-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-button-toggle-button{border:0;background:none;color:inherit;padding:0;margin:0;font:inherit;outline:none;width:100%;cursor:pointer}.mat-button-toggle-disabled .mat-button-toggle-button{cursor:default}.mat-button-toggle-button::-moz-focus-inner{border:0}\n"],encapsulation:2,changeDetection:0}),A})(),yh=(()=>{class A{}return A.\u0275mod=ut({type:A}),A.\u0275inj=aA({factory:function(t){return new(t||A)},imports:[[ih,mh],ih]}),A})(),Qh=(()=>{class A{constructor(A,t){this.padService=A,this.generatorService=t,this.chords=[["A4","C4"]]}ngOnInit(){this.pad={cursorXAxis:0,cursorYAxis:0,valenceValue:0,arousalValue:0},this.filterFrequency=300,this.osc="sine",this.initSounds(),this.initLoops(),Ru.volume.value=-10,Ju.bpm.value=180,this.padSubscription=this.padService.myPadSubject.subscribe(A=>{this.pad=A,this.modulateSpeed(),this.modulateFilter(),this.modulateOscillator()}),this.generatorSubscription=this.generatorService.myChordsSubject.subscribe(A=>{this.chords=A})}play(){il.resume(),this.startHarmonyLoop(),Ju.start()}stop(){this.harmonyLoop.stop(),this.drumLoop.stop(),this.initSounds(),Ju.stop()}startHarmonyLoop(){this.pos=0,this.harmonyLoop.start(0)}startMelodyLoop(){this.melodyLoop.start(0)}startDrumLoop(){this.pos=0,this.drumLoop.start(0)}startBassLoop(){this.bassLoop.start(0)}modulateSpeed(){this.pad.valenceValue>40&&(Ju.bpm.value=260),this.pad.valenceValue<40&&this.pad.valenceValue>0&&(Ju.bpm.value=180),this.pad.valenceValue<-40&&(Ju.bpm.value=100)}modulateFilter(){this.filter&&(this.filterFrequency=10*this.pad.cursorXAxis,this.filter.frequency.value=this.filterFrequency,console.log("filter frequency:",this.filter.frequency.value))}modulateOscillator(){this.synth&&(this.pad.arousalValue>70&&(this.osc="sawtooth",this.synth.options.oscillator.type=this.osc,console.log(this.synth.options.oscillator.type)),this.pad.arousalValue<-70&&(this.osc="sine",this.synth.options.oscillator.type=this.osc,console.log(this.synth.options.oscillator.type)),this.pad.arousalValue>-70&&this.pad.arousalValue<70&&(this.osc="square",this.synth.options.oscillator.type=this.osc,console.log(this.synth.options.oscillator.type)))}initSounds(){this.filter=new Bu({type:"lowpass",frequency:this.filterFrequency,rolloff:-12,Q:1,gain:0}).toDestination(),this.synthA=(new Tu).toDestination(),this.synth=new ku(Yu).toDestination(),this.synth.options.envelope={attack:.2,decay:.7,sustain:.3,release:.1},this.synth.options.oscillator={count:3,harmonicity:1,modulationFrequency:.8,modulationIndex:2,modulationType:"sine",partialCount:0,partials:[],phase:0,spread:20,type:this.osc,width:.3},this.drums=(new Du).toDestination(),this.piano=new Su({urls:{C0:"data:audio/mpeg;base64,data:audio/mpeg;base64,data:audio/mpeg;base64,data:audio/mpeg;base64,data:audio/mpeg;base64,data:audio/mpeg;base64,",C6:"data:audio/mpeg;base64,}}).toDestination(),this.piano.connect(this.filter)}initLoops(){this.harmonyLoop=new Uu(A=>{console.log(this.pos),this.piano.triggerAttackRelease(this.chords[this.pos],"1n",A),this.pos=this.pos+1,this.pos>=this.chords.length&&(this.pos=0)},"4n"),this.drumLoop=new Uu(A=>{this.drums.triggerAttackRelease(" E1","8n",A),this.pos=this.pos+1,this.pos>=this.chords.length&&(this.pos=0)},"2n")}}return A.\u0275fac=function(t){return new(t||A)(ri(ka),ri(Wu))},A.\u0275cmp=at({type:A,selectors:[["app-synth"]],decls:14,vars:4,consts:[[1,"synth"],[1,"btn-primary",3,"click"],[1,"debug-box"],[1,"debug"]],template:function(A,t){1&A&&(Mi(0,"div",0),Mi(1,"mat-button-toggle",1),gi("click",(function(){return t.play()})),Ii(2,"Play"),li(),Mi(3,"mat-button-toggle",1),gi("click",(function(){return t.stop()})),Ii(4,"Stop"),li(),Mi(5,"div",2),Mi(6,"p",3),Ii(7),li(),Mi(8,"p",3),Ii(9),li(),Mi(10,"p",3),Ii(11),li(),Mi(12,"p",3),Ii(13),li(),li(),li()),2&A&&(Yn(7),yi(" valenceValue: ",t.pad.valenceValue,""),Yn(2),yi(" arousalValue: ",t.pad.arousalValue,""),Yn(2),yi(" x: ",t.pad.cursorXAxis,""),Yn(2),yi(" y: ",t.pad.cursorYAxis,""))},directives:[Ih],styles:[".synth[_ngcontent-%COMP%]{display:flex;flex-direction:column;justify-content:center;align-items:center;padding:20px}.btn-primary[_ngcontent-%COMP%]{padding:2px 30px}.debug-box[_ngcontent-%COMP%]{margin-top:15px;display:flex;flex-direction:column}.debug[_ngcontent-%COMP%]{padding:5px;font-size:1rem}"]}),A})(),Zh=(()=>{class A{constructor(A){this.generatorService=A}ngOnInit(){this.generatorService.getPad()}}return A.\u0275fac=function(t){return new(t||A)(ri(Wu))},A.\u0275cmp=at({type:A,selectors:[["app-generator"]],decls:0,vars:0,template:function(A,t){},styles:[""]}),A})(),Th=(()=>{class A{ngOnInit(){}}return A.\u0275fac=function(t){return new(t||A)},A.\u0275cmp=at({type:A,selectors:[["app-root"]],decls:6,vars:0,consts:[[1,"nav"]],template:function(A,t){1&A&&(Mi(0,"div",0),Mi(1,"h1"),Ii(2," morph "),li(),li(),ui(3,"app-pad"),ui(4,"app-synth"),ui(5,"app-generator"))},directives:[MM,Qh,Zh],styles:[".nav[_ngcontent-%COMP%]{display:flex;width:auto;flex-direction:row;justify-content:flex-start}h1[_ngcontent-%COMP%]{margin-left:19px;padding:24px;font-size:2.1rem;margin-bottom:0;flex-shrink:3;font-weight:600}"]}),A})(),kh=(()=>{class A{}return A.\u0275mod=ut({type:A,bootstrap:[Th]}),A.\u0275inj=aA({factory:function(t){return new(t||A)},imports:[[Za,iM,yh]]}),A})();(function(){if(Xe)throw new Error("Cannot enable prod mode after platform setup.");Pe=!1})(),ya().bootstrapModule(kh).catch(A=>console.error(A))},zfln:function(A,t){},zn8P:function(A,t){function e(A){return Promise.resolve().then((function(){var t=new Error("Cannot find module '"+A+"'");throw t.code="MODULE_NOT_FOUND",t}))}e.keys=function(){return[]},e.resolve=e,A.exports=e,e.id="zn8P"},zna5:function(A,t,e){"use strict";e.d(t,"a",(function(){return s}));var n=e("jvfW");const s=(A,t)=>{Object(n.a)(A,t,"channelCount"),Object(n.a)(A,t,"channelCountMode"),Object(n.a)(A,t,"channelInterpretation")}},zqSo:function(A,t,e){"use strict";e.d(t,"a",(function(){return n}));const n=(A,t)=>()=>{if(null===t)return Promise.resolve(!1);const e=new t(1,1,44100),n=A(e,{channelCount:1,channelCountMode:"explicit",channelInterpretation:"discrete",gain:0});return new Promise(A=>{e.oncomplete=()=>{n.disconnect(),A(0!==e.currentTime)},e.startRendering()})}},zrpS:function(A,t){},zxk7:function(A,t){}},[[0,0]]]);